{
  "version": 3,
  "sources": ["../../../union/src/adt/flex_buffer_view.ts", "../../../union/src/adt/ordered_map.ts", "../../../union/src/adt/pool.ts", "../../../union/src/adt/ptree.ts", "../../../union/src/animation/animation_channel.ts", "../../../union/src/math/axis.ts", "../../../union/src/memory/footprint.ts", "../../../union/src/math/math.ts", "../../../union/src/math/simd.ts", "../../../union/src/math/box.ts", "../../../union/src/math/color.ts", "../../../union/src/math/simd_mat.ts", "../../../union/src/math/euler.ts", "../../../union/src/math/interpolation.ts", "../../../union/src/math/ray.ts", "../../../union/src/math/rect.ts", "../../../union/src/math/simd_quaternion.ts", "../../../union/src/memory/heap.ts", "../../../union/src/math/spherical.ts", "../../../union/src/engine/camera.ts", "../../../union/src/engine/event.ts", "../../../union/src/engine/global_event.ts", "../../../union/src/engine/keycode.ts", "../../../union/src/input/browser_input.ts", "../../../union/src/input/input.ts", "../../../union/src/engine/engine.ts", "../../../union/src/engine/frame_capture.ts", "../../../union/src/gfx/gfx_type.ts", "../../../union/src/adt/block_allocator.ts", "../node_modules/@union_native/metal.js/src/index.ts", "../../../union/src/metal/encoder.ts", "../../../union/src/gfx/render.command.ts", "../../../union/src/gfx/render.worker.ts", "../../../union/src/webgpu/device.ts", "../../../union/src/webgpu/encoder.ts", "../../../union/src/gfx/gfx_device.ts", "../../../union/src/std/type.ts", "../../../union/src/worker/web_worker.ts", "../../../union/src/gfx/gfx_device_client.ts", "../../../union/src/gfx/render.resource.ts", "../../../union/src/webgl/block.ts", "../../../union/src/webgl/type.ts", "../../../union/src/webgl/draw.ts", "../../../union/src/webgl/extensions.ts", "../../../union/src/webgl/pass.ts", "../../../union/src/std/numeric.ts", "../../../union/src/webgl/texture_slot.ts", "../../../union/src/webgl/pipeline.ts", "../../../union/src/webgl/encoder.ts", "../../../union/src/engine/spherical_control.ts", "../../../union/src/engine/vertex_data.ts", "../../../union/src/webgl/mesh.ts", "../../../union/src/webgl/primitive.ts", "../../../union/src/math/tangent.ts", "../../../union/src/mesh/builtin_mesh.ts", "../../../union/src/mesh/box_mesh.ts", "../../../union/src/std/platform.ts", "../src/pipeline.ts", "../src/index.ts"],
  "sourcesContent": ["import { BufferRange } from './type';\n\nexport class FlexBufferView {\n    f32_view: Float32Array;\n    u32_view: Uint32Array;\n    u8_view: Uint8Array;\n\n    constructor(public buffer: ArrayBuffer, offset: number = 0, byte_length: number = buffer.byteLength) {\n        this.f32_view = new Float32Array(buffer, offset, byte_length / 4);\n        this.u32_view = new Uint32Array(buffer, offset, byte_length / 4);\n        this.u8_view = new Uint8Array(buffer, offset, byte_length);\n    }\n\n    sub_view(range: BufferRange) {\n        return new FlexBufferView(this.buffer, range.byte_offset, range.byte_length);\n    }\n}", "export type MapKey = string | number;\n\nexport class OrderedMap<K = MapKey, V = any> {\n    private map: Map<K, V> = new Map();\n    private list: Array<K> = [];\n\n    constructor(source?: Array<{ key: K; value: V }> | Iterable<{ key: K; value: V }> | { [key: string]: V }) {\n        if (source) {\n            if (source instanceof Array) {\n                source.forEach((pair) => {\n                    this.map.set(pair.key, pair.value);\n                    this.list.push(pair.key);\n                });\n            } else if (typeof (source as any)[Symbol.iterator] === 'function') {\n                for (const pair of source as Iterable<{ key: K; value: V }>) {\n                    this.map.set(pair.key, pair.value);\n                    this.list.push(pair.key);\n                }\n            } else if (typeof source === 'object') {\n                this.list = Object.getOwnPropertyNames(source).sort() as K[];\n                const obj = source as { [key: string]: V };\n                for (const name of this.list) {\n                    this.map.set(name as K, obj[name as string] as V);\n                }\n            }\n        }\n    }\n\n    get size() {\n        return this.list.length;\n    }\n\n    set(key: K, value: V) {\n        if (!this.map.has(key)) {\n            this.list.push(key);\n        }\n        this.map.set(key, value);\n    }\n\n    get(key: K): V | undefined {\n        return this.map.get(key);\n    }\n\n    index_of(value: V): number {\n        return this.list.indexOf(value as any);\n    }\n\n    at(index: number): V | undefined {\n        if (index < 0 || index > this.list.length - 1) return;\n        return this.map.get(this.list[index]);\n    }\n\n    replace_at(index: number, new_key: K, value?: V) {\n        if (index < 0 || index > this.list.length - 1) return;\n        const old_key = this.list[index];\n        this.list[index] = new_key;\n        value = value ?? this.map.get(old_key)!;\n        this.map.delete(old_key);\n        this.map.set(new_key, value);\n    }\n\n    replace(old_key: K, new_key: K, value?: V) {\n        const index = this.list.indexOf(old_key);\n        if (index < 0) return;\n        this.replace_at(index, new_key, value);\n    }\n\n    swap(index_a: number, index_b: number) {\n        if (index_a < 0 || index_a > this.list.length - 1) return;\n        if (index_b < 0 || index_b > this.list.length - 1) return;\n        if (index_a === index_b) return;\n        const key_a = this.list[index_a];\n        const key_b = this.list[index_b];\n        this.list[index_a] = key_b;\n        this.list[index_b] = key_a;\n    }\n\n    delete(key: K) {\n        if (this.map.has(key)) {\n            this.map.delete(key);\n            this.list.splice(this.list.indexOf(key), 1);\n        }\n    }\n\n    delete_value(value: V) {\n        const index = this.list.indexOf(value as any);\n        if (index < 0) return;\n        this.delete_at(index);\n    }\n\n    delete_at(index: number) {\n        if (index < 0 || index > this.list.length - 1) return;\n        this.delete(this.list[index]);\n    }\n\n    has(key: K) {\n        return this.map.has(key);\n    }\n\n    clear() {\n        this.list = [];\n        this.map.clear();\n    }\n\n    *[Symbol.iterator](): Iterator<[K, V]> {\n        for (let i = 0; i < this.list.length; ++i) {\n            const key = this.list[i];\n            yield [key, this.map.get(key)!];\n        }\n    }\n}\n", "import { Constructor } from '../std/type';\n\ninterface TypedPool<T> {\n    free: Set<T>;\n    preserved: Set<T>;\n}\n\nlet _trace_enabled = false;\n\nconst _pool_map = new Map<Constructor<any>, TypedPool<any>>();\nconst _object_map = new WeakMap<any, TypedPool<any>>();\nconst _object_trace = new Map<any, string>();\n/**\n * @warning DO NOT USE THIS FUNCTION IN A HIGH FREQUENCY LOOP\n */\nexport function pool_get<T>(constructor: Constructor<T>): T {\n    let pool = _pool_map.get(constructor);\n    if (!pool) {\n        pool = {\n            free: new Set<T>(),\n            preserved: new Set<T>(),\n        };\n        _pool_map.set(constructor, pool);\n    }\n\n    let instance: T;\n    if (pool.free.size > 0) {\n        instance = pool.free.values().next().value;\n        pool.free.delete(instance);\n        pool.preserved.add(instance);\n    } else {\n        instance = new constructor();\n        _object_map.set(instance, pool);\n        pool.preserved.add(instance);\n    }\n\n    if (_trace_enabled) {\n        _object_trace.set(instance, new Error().stack!);\n    }\n\n    return instance;\n}\n\n/**\n * @warning DO NOT USE THIS FUNCTION IN A HIGH FREQUENCY LOOP\n */\nexport function pool_return<T>(instance: T): void {\n    const pool = _object_map.get(instance);\n    if (!pool) {\n        console.log(`[pool] pool_return: pool for ${instance} not found`);\n        return;\n    }\n\n    if (!pool.preserved.has(instance)) {\n        console.log(`[pool] pool_return: instance not found in pool`);\n        return;\n    }\n\n    pool.preserved.delete(instance);\n    pool.free.add(instance);\n    if (_trace_enabled) _object_trace.delete(instance);\n}\n\nexport function pool_trace(enable: boolean): void {\n    _trace_enabled = enable;\n}\n\nexport function pool_diagnose(): void {\n    for (const [key, value] of _object_trace) {\n        console.log(`[object] ${key} leaked at ${value}`);\n    }\n}", "export class PolyNode<T extends PolyNode<T>> {\n    children: Array<T> = [];\n\n    parent: T | undefined;\n\n    get is_root(): boolean {\n        return this.parent === undefined;\n    }\n\n    can_add?: (node: T) => boolean | undefined;\n\n    add(node: T): void {\n        if (this.can_add && this.can_add(node)) {\n            return;\n        }\n\n        if (node.parent) {\n            node.parent.remove(node);\n        }\n        this.children.push(node);\n        node.parent = this as any;\n    }\n\n    remove(node: T): void {\n        const index = this.children.indexOf(node);\n        if (index > -1) {\n            this.children.splice(index, 1);\n            node.parent = undefined;\n        }\n    }\n\n    has(node: T): boolean {\n        return this.children.indexOf(node) > -1;\n    }\n\n    serialize(): any | undefined {\n        return undefined;\n    }\n\n    deserialize(data: any) {\n    }\n}\n\nexport interface PolyNodeData {\n    children: number[];\n    data: any;\n    id: number;\n}\n\nexport interface PTreeData {\n    nodes: PolyNodeData[];\n}\n\nexport function ptree_serialize<T extends PolyNode<T>>(root: PolyNode<T>) {\n    const data_nodes: PolyNodeData[] = [];\n    const node_map = new WeakMap<PolyNode<T>, PolyNodeData>();\n    const queue: PolyNode<T>[] = [root];\n    let id = 0;\n    while (queue.length > 0) {\n        const node = queue.shift()!;\n        const node_id = id++;\n        const data_node = poly_node_serialize(node, node_id);\n\n        node_map.set(node, data_node);\n        data_nodes.push(data_node);\n\n        for (const child of node.children) {\n            queue.push(child);\n        }\n\n        if (node.parent) {\n            const parent_data = node_map.get(node.parent!);\n            if (parent_data) {\n                parent_data.children.push(node_id);\n            }\n        }\n    }\n\n    const data: PTreeData = { nodes: data_nodes };\n    return data;\n}\n\nfunction poly_node_serialize(node: PolyNode<any>, id: number): PolyNodeData {\n    return { id, data: node.serialize?.(), children: [] };\n}\n\nexport function ptree_deserialize<T extends PolyNode<T>>(data: PTreeData, constructor?: Constructor<T>): T {\n    const node_map = new Map<number, PolyNode<T>>();\n\n    for (const data_node of data.nodes) {\n        const node = poly_node_deserialize<T>(data_node, constructor);\n        node_map.set(data_node.id, node);\n    }\n\n    for (const data_node of data.nodes) {\n        const node = node_map.get(data_node.id)!;\n        for (const child_id of data_node.children) {\n            const child = node_map.get(child_id)!;\n            node.add(child as any);\n        }\n    }\n\n    const root = node_map.get(0)!;\n    return root as T;\n}\n\nfunction poly_node_deserialize<T extends PolyNode<T>>(data_node: PolyNodeData, constructor?: Constructor<T>): PolyNode<T> {\n    const node = new (constructor ?? PolyNode<T>)();\n    node.deserialize?.(data_node.data);\n    return node;\n}\n\n\nexport type PolyNodeVisitor<T extends PolyNode<T>> = (node: T) => void;\n\nexport function poly_node_traverse_dfs<T extends PolyNode<T>>(root: T, visitor: PolyNodeVisitor<T>) {\n    visitor(root);\n    for (let i = 0; i < root.children.length; ++i) {\n        poly_node_traverse_dfs(root.children[i], visitor);\n    }\n}\n\nexport function poly_node_traverse_bfs<T extends PolyNode<T>>(root: T, visitor: PolyNodeVisitor<T>) {\n    const queue: T[] = [root];\n    while (queue.length > 0) {\n        const node = queue.shift()!;\n        visitor(node);\n        for (let i = 0; i < node.children.length; ++i) {\n            queue.push(node.children[i]);\n        }\n    }\n}", "import { AnimationKey, AnimationValue, animation_key_interpolate, animation_value_clone } from './animation_key';\n\nexport enum AnimationDataType {\n    Float,\n    Float2,\n    Float3,\n    Float4,\n    Quaternion,\n    Euler,\n    Mat4,\n    Mat3,\n    Color,\n    Generic\n}\n\nexport class AnimationChannel {\n    loop_mode: number = 0;\n    blending: boolean = false;\n\n    value?: AnimationValue;\n\n    keys: AnimationKey[] = [];\n\n    constructor(public name: string, public property: string, public type: AnimationDataType) {}\n\n    set_keys(keys: AnimationKey[]): void {\n        this.keys = keys;\n        this.value = animation_value_clone(keys[0].value);\n    }\n\n    insert_at_time(time: number, key: AnimationKey): void {\n        let keys = this.keys;\n        let i = 0;\n        while (i < keys.length && keys[i].time < time) i++;\n        keys.splice(i, 0, key);\n    }\n\n    private set_value(value: AnimationValue): void {\n        this.value = value;\n    }\n\n    private linear_interpolation(key1: AnimationKey, key2: AnimationKey, t: number): AnimationValue {\n        let value1 = key1.value;\n        let value2 = key2.value;\n        return animation_key_interpolate(value1, value2, t, this.value);\n    }\n\n    evaluate(time: number): AnimationValue {\n        let keys = this.keys;\n        if (keys.length === 0) return this.value;\n\n        let index = 0;\n        while (index < keys.length && keys[index].time < time) index++;\n\n        if (index === 0) {\n            this.set_value(keys[0].value);\n            return;\n        }\n\n        if (index === keys.length) {\n            this.set_value(keys[index - 1].value);\n            return;\n        }\n\n        let key1 = keys[index - 1];\n        let key2 = keys[index];\n\n        let t = (time - key1.time) / (key2.time - key1.time);\n\n        if (key1.smooth_interpolation) {\n            // this.set_value(this.smooth_interpolation(key1, key2, t));\n        } else {\n            this.set_value(this.linear_interpolation(key1, key2, t));\n        }\n\n        return this.value;\n    }\n\n    clone(): AnimationChannel {\n        const channel = new AnimationChannel(this.name, this.property, this.type);\n        channel.loop_mode = this.loop_mode;\n        channel.blending = this.blending;\n        channel.keys = this.keys.map((key) => {\n            return {\n                time: key.time,\n                value: animation_value_clone(key.value),\n                smooth_interpolation: key.smooth_interpolation,\n                tangent_in: animation_value_clone(key.tangent_in),\n                tangent_out: animation_value_clone(key.tangent_out),\n                locked_tangent: key.locked_tangent\n            };\n        });\n        return channel;\n    }\n}", "export enum Axis {\n    X = 0,\n    Y = 1,\n    Z = 2,\n}\n", "let global_foot_print = 0;\nexport function footprint_get() {\n    return global_foot_print;\n}\n\nexport function footprint_reset() {\n    global_foot_print = 0;\n}\n\nexport function footprint_alloc(size: number) {\n    global_foot_print += size;\n}", "export const DegreeToRadian = Math.PI / 180;\nexport const RadianToDegree = 180 / Math.PI;\n\nexport function deg2rad(deg: number): number {\n    return deg * DegreeToRadian;\n}\n\nexport function rad2deg(rad: number): number {\n    return rad * RadianToDegree;\n}\n\nexport const E = 2.7182818284;\nexport const PI = 3.141592653;\nexport const EPSILON = 1e-4;\n\nexport function clamp(i: number, b: number, t: number): number {\n    return Math.max(Math.min(i, t), b);\n}\n\nexport function lerp(a: number, b: number, i: number): number {\n    return a + (b - a) * i;\n}\n", "import { footprint_alloc } from '../memory/footprint';\nimport { HeapPointer } from '../memory/heap_pointer';\nimport { TypedArray } from '../std/type';\nimport { clamp, lerp } from './math';\nimport { Mat3, Mat4 } from './simd_mat';\nimport { Quaternion } from './simd_quaternion';\nimport { Spherical } from './spherical';\n\nexport class Float2 implements HeapPointer {\n    get x() {\n        return this.elements[0];\n    }\n    set x(value: number) {\n        this.elements[0] = value;\n    }\n\n    get y() {\n        return this.elements[1];\n    }\n    set y(value: number) {\n        this.elements[1] = value;\n    }\n\n    size = 2;\n    elements = new Float32Array(2);\n\n    constructor(x: number = 0, y: number = 0) {\n        this.set(x, y);\n        footprint_alloc(2);\n    }\n\n    read(buffer: TypedArray | number[], offset: number = 0): this {\n        this.elements[0] = buffer[offset];\n        this.elements[1] = buffer[offset + 1];\n        return this;\n    }\n\n    write(buffer: TypedArray | number[], offset: number = 0): this {\n        buffer[offset] = this.elements[0];\n        buffer[offset + 1] = this.elements[1];\n        return this;\n    }\n\n    set(x: number, y: number): Float2 {\n        this.elements[0] = x;\n        this.elements[1] = y;\n        return this;\n    }\n\n    copy(a: Float2): Float2 {\n        this.elements.set(a.elements);\n        return this;\n    }\n\n    clone(): Float2 {\n        return new Float2(this.elements[0], this.elements[1]);\n    }\n\n    rotate(angle: number, center?: Float2): Float2 {\n        if (center === undefined) {\n            center = _center;\n        }\n\n        const c = Math.cos(angle);\n        const s = Math.sin(angle);\n\n        const x = this.elements[0] - center.x;\n        const y = this.elements[1] - center.y;\n\n        this.elements[0] = x * c - y * s + center.x;\n        this.elements[1] = x * s + y * c + center.y;\n        return this;\n    }\n\n    distance(a: Float2): number {\n        return Math.sqrt(this.distance_squared(a));\n    }\n\n    get length(): number {\n        return Math.sqrt(this.elements[0] * this.elements[0] + this.elements[1] * this.elements[1]);\n    }\n\n    normalize(): Float2 {\n        const inv_length = 1.0 / this.length;\n        this.elements[0] *= inv_length;\n        this.elements[1] *= inv_length;\n        return this;\n    }\n\n    add(a: Float2): Float2 {\n        this.elements[0] += a.elements[0];\n        this.elements[1] += a.elements[1];\n        return this;\n    }\n\n    sub(a: Float2): Float2 {\n        this.elements[0] -= a.elements[0];\n        this.elements[1] -= a.elements[1];\n        return this;\n    }\n\n    mul(n: number): Float2 {\n        this.elements[0] *= n;\n        this.elements[1] *= n;\n        return this;\n    }\n\n    dot(a: Float2): number {\n        return this.elements[0] * a.elements[0] + this.elements[1] * a.elements[1];\n    }\n\n    lerp(a: Float2, f: number): Float2 {\n        return Float2.Lerp(this, a, f, this);\n    }\n\n    distance_squared(a: Float2): number {\n        const dx = this.elements[0] - a.elements[0];\n        const dy = this.elements[1] - a.elements[1];\n        return dx * dx + dy * dy;\n    }\n\n    toString(): string {\n        return `[${this.elements[0]}, ${this.elements[1]}]`;\n    }\n\n    static Lerp(a: Float2, b: Float2, f: number, dst?: Float2): Float2 {\n        if (!dst) dst = new Float2();\n        dst.x = a.elements[0] + (b.x - a.elements[0]) * f;\n        dst.y = a.elements[1] + (b.y - a.elements[1]) * f;\n        return dst;\n    }\n}\nconst _center = new Float2();\n\nexport class Float3 implements HeapPointer {\n    public static ZERO = new Float3(0, 0, 0);\n    public static ONE = new Float3(1, 1, 1);\n    public static X = new Float3(1, 0, 0);\n    public static Y = new Float3(0, 1, 0);\n    public static Z = new Float3(0, 0, 1);\n    public static NEGATIVE_X = new Float3(-1, 0, 0);\n    public static NEGATIVE_Y = new Float3(0, -1, 0);\n    public static NEGATIVE_Z = new Float3(0, 0, -1);\n\n    size = 3;\n    elements = new Float32Array(3);\n\n    get x() {\n        return this.elements[0];\n    }\n    set x(value: number) {\n        this.elements[0] = value;\n    }\n\n    get y() {\n        return this.elements[1];\n    }\n    set y(value: number) {\n        this.elements[1] = value;\n    }\n\n    get z() {\n        return this.elements[2];\n    }\n    set z(value: number) {\n        this.elements[2] = value;\n    }\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.set(x, y, z);\n        footprint_alloc(3);\n    }\n\n    read(buffer: TypedArray | number[], offset: number = 0): this {\n        this.elements[0] = buffer[offset];\n        this.elements[1] = buffer[offset + 1];\n        this.elements[2] = buffer[offset + 2];\n        return this;\n    }\n\n    write(buffer: TypedArray | number[], offset: number = 0): this {\n        buffer[offset] = this.elements[0];\n        buffer[offset + 1] = this.elements[1];\n        buffer[offset + 2] = this.elements[2];\n        return this;\n    }\n\n    set(x: number, y: number, z: number): Float3 {\n        this.elements[0] = x;\n        this.elements[1] = y;\n        this.elements[2] = z;\n        return this;\n    }\n\n    cross(b: Float3): Float3 {\n        return Float3.Cross(this, b, this);\n    }\n\n    from_spherical(s: Spherical): Float3 {\n        return Float3.FromSpherical(s, this);\n    }\n\n    apply_quaternion(q: Quaternion): Float3 {\n        return Float3.ApplyQuaternion(this, q, this);\n    }\n\n    add(a: Float3): Float3 {\n        this.elements[0] += a.elements[0];\n        this.elements[1] += a.elements[1];\n        this.elements[2] += a.elements[2];\n        return this;\n    }\n\n    sub(a: Float3): Float3 {\n        this.elements[0] -= a.elements[0];\n        this.elements[1] -= a.elements[1];\n        this.elements[2] -= a.elements[2];\n        return this;\n    }\n\n    mul(n: number): Float3 {\n        this.elements[0] *= n;\n        this.elements[1] *= n;\n        this.elements[2] *= n;\n        return this;\n    }\n\n    mul_v(a: Float3): Float3 {\n        this.elements[0] *= a.elements[0];\n        this.elements[1] *= a.elements[1];\n        this.elements[2] *= a.elements[2];\n        return this;\n    }\n\n    div(n: number): Float3 {\n        this.elements[0] /= n;\n        this.elements[1] /= n;\n        this.elements[2] /= n;\n        return this;\n    }\n\n    div_v(a: Float3): Float3 {\n        this.elements[0] /= a.elements[0];\n        this.elements[1] /= a.elements[1];\n        this.elements[2] /= a.elements[2];\n        return this;\n    }\n\n    copy(a: Float3): Float3 {\n        this.elements[0] = a.elements[0];\n        this.elements[1] = a.elements[1];\n        this.elements[2] = a.elements[2];\n        return this;\n    }\n\n    clone(): Float3 {\n        return new Float3(this.elements[0], this.elements[1], this.elements[2]);\n    }\n\n    lerp(b: Float3, i: number): Float3 {\n        return Float3.Lerp(this, b, i, this);\n    }\n\n    apply_mat4(m: Mat4): Float3 {\n        return Float3.MultiplyMat4(this, m, this);\n    }\n\n    apply_mat4_directional(m: Mat4): Float3 {\n        return Float3.MultiplyMat4Directional(this, m, this);\n    }\n\n    distance(a: Float3): number {\n        return Math.sqrt(this.distance_squared(a));\n    }\n\n    get length_square(): number {\n        return this.elements[0] * this.elements[0] + this.elements[1] * this.elements[1] + this.elements[2] * this.elements[2];\n    }\n\n    get length(): number {\n        return Math.sqrt(this.elements[0] * this.elements[0] + this.elements[1] * this.elements[1] + this.elements[2] * this.elements[2]);\n    }\n\n    dot(a: Float3): number {\n        return this.elements[0] * a.elements[0] + this.elements[1] * a.elements[1] + this.elements[2] * a.elements[2];\n    }\n\n    min(a: Float3): Float3 {\n        this.elements[0] = Math.min(this.elements[0], a.elements[0]);\n        this.elements[1] = Math.min(this.elements[1], a.elements[1]);\n        this.elements[2] = Math.min(this.elements[2], a.elements[2]);\n        return this;\n    }\n\n    max(a: Float3): Float3 {\n        this.elements[0] = Math.max(this.elements[0], a.elements[0]);\n        this.elements[1] = Math.max(this.elements[1], a.elements[1]);\n        this.elements[2] = Math.max(this.elements[2], a.elements[2]);\n        return this;\n    }\n\n    normalize(): Float3 {\n        const inv_length = 1.0 / this.length;\n        this.elements[0] *= inv_length;\n        this.elements[1] *= inv_length;\n        this.elements[2] *= inv_length;\n        return this;\n    }\n\n    distance_squared(a: Float3): number {\n        const x = this.elements[0] - a.elements[0];\n        const y = this.elements[1] - a.elements[1];\n        const z = this.elements[2] - a.elements[2];\n        return x * x + y * y + z * z;\n    }\n\n    toString(): string {\n        return `[${this.elements[0]}, ${this.elements[1]}, ${this.elements[2]}]`;\n    }\n\n    static IsZero(src: Float3): boolean {\n        return src.x === 0 && src.y === 0 && src.z === 0;\n    }\n\n    static Equals(a: Float3, b: Float3): boolean {\n        return a.elements[0] === b.elements[0] && a.elements[1] === b.elements[1] && a.elements[2] === b.elements[2];\n    }\n\n    static Abs(src: Float3, dst: Float3): Float3 {\n        dst.x = Math.abs(src.x);\n        dst.y = Math.abs(src.y);\n        dst.z = Math.abs(src.z);\n        return dst;\n    }\n\n    static Clamp(src: Float3, min: Float3, max: Float3, dst: Float3): Float3 {\n        dst.x = clamp(src.x, min.x, max.x);\n        dst.y = clamp(src.y, min.y, max.y);\n        dst.z = clamp(src.z, min.z, max.z);\n        return dst;\n    }\n\n    static Set(x: number, y: number, z: number, dst: Float3): Float3 {\n        dst.x = x;\n        dst.y = y;\n        dst.z = z;\n        return dst;\n    }\n\n    static Copy(src: Float3, dst: Float3): Float3 {\n        dst.x = src.x;\n        dst.y = src.y;\n        dst.z = src.z;\n        return dst;\n    }\n\n    static Swap(a: Float3, b: Float3) {\n        [a.elements[0], b.x] = [b.x, a.elements[0]];\n        [a.elements[1], b.y] = [b.y, a.elements[1]];\n        [a.elements[2], b.z] = [b.z, a.elements[2]];\n    }\n\n    static Add(a: Float3, b: Float3, dst: Float3): Float3 {\n        dst.x = a.elements[0] + b.x;\n        dst.y = a.elements[1] + b.y;\n        dst.z = a.elements[2] + b.z;\n        return dst;\n    }\n\n    static Subtract(a: Float3, b: Float3, dst: Float3): Float3 {\n        dst.x = a.elements[0] - b.x;\n        dst.y = a.elements[1] - b.y;\n        dst.z = a.elements[2] - b.z;\n        return dst;\n    }\n\n    static Distance(a: Float3, b: Float3): number {\n        return a.distance(b);\n    }\n\n    static Normalize(src: Float3, dst: Float3): Float3 {\n        const inv_length = 1.0 / src.length;\n        dst.x *= inv_length;\n        dst.y *= inv_length;\n        dst.z *= inv_length;\n        return dst;\n    }\n\n    static Multiply(a: Float3, n: number, dst: Float3): Float3 {\n        dst.x = a.elements[0] * n;\n        dst.y = a.elements[1] * n;\n        dst.z = a.elements[2] * n;\n        return dst;\n    }\n\n    static MultiplyFloat3(a: Float3, b: Float3, dst: Float3): Float3 {\n        dst.x = a.elements[0] * b.x;\n        dst.y = a.elements[1] * b.y;\n        dst.z = a.elements[2] * b.z;\n        return dst;\n    }\n\n    static ApplyQuaternion(a: Float3, q: Quaternion, dst?: Float3) {\n        dst = dst ?? new Float3();\n        const x = a.elements[0];\n        const y = a.elements[1];\n        const z = a.elements[2];\n        const qx = q.x;\n        const qy = q.y;\n        const qz = q.z;\n        const qw = q.w;\n        // calculate quat * vector\n\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n\n        // calculate result * inverse quat\n        dst.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        dst.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        dst.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n        return dst;\n    }\n\n    static Dot(a: Float3, b: Float3): number {\n        return a.elements[0] * b.x + a.elements[1] * b.y + a.elements[2] * b.z;\n    }\n\n    static Cross(a: Float3, b: Float3, dst: Float3 = new Float3()): Float3 {\n        const ax = a.elements[0];\n        const ay = a.elements[1];\n        const az = a.elements[2];\n        const bx = b.x;\n        const by = b.y;\n        const bz = b.z;\n\n        dst.x = ay * bz - az * by;\n        dst.y = az * bx - ax * bz;\n        dst.z = ax * by - ay * bx;\n\n        return dst;\n    }\n\n    static FromSpherical(s: Spherical, dst: Float3 = new Float3()): Float3 {\n        const sinRadius = Math.sin(s.theta) * s.radius;\n        dst.x = sinRadius * Math.sin(s.phi);\n        dst.y = Math.cos(s.theta) * s.radius;\n        dst.z = sinRadius * Math.cos(s.phi);\n        return dst;\n    }\n\n    static Lerp(a: Float3, b: Float3, i: number, dst: Float3): Float3 {\n        dst.x = lerp(a.elements[0], b.x, i);\n        dst.y = lerp(a.elements[1], b.y, i);\n        dst.z = lerp(a.elements[2], b.z, i);\n        return dst;\n    }\n\n    static AddMultiplied(a: Float3, b: Float3, n: number, dst: Float3): Float3 {\n        dst.x = a.elements[0] + b.x * n;\n        dst.y = a.elements[1] + b.y * n;\n        dst.z = a.elements[2] + b.z * n;\n        return dst;\n    }\n\n    static MultiplyMat4(a: Float3, m: Mat4, dst: Float3): Float3 {\n        const x = a.elements[0];\n        const y = a.elements[1];\n        const z = a.elements[2];\n        const e = m.elements;\n        const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\n\n        dst.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;\n        dst.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;\n        dst.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;\n\n        return dst;\n    }\n\n    static MultiplyMat3(a: Float3, m: Mat3, dst: Float3): Float3 {\n        const x = a.elements[0];\n        const y = a.elements[1];\n        const z = a.elements[2];\n        const e = m.elements;\n\n        dst.x = e[0] * x + e[3] * y + e[6] * z;\n        dst.y = e[1] * x + e[4] * y + e[7] * z;\n        dst.z = e[2] * x + e[5] * y + e[8] * z;\n\n        return dst;\n    }\n\n    static MultiplyMat4Directional(a: Float3, m: Mat4, dst: Float3): Float3 {\n        const x = a.elements[0];\n        const y = a.elements[1];\n        const z = a.elements[2];\n        const e = m.elements;\n\n        dst.x = e[0] * x + e[4] * y + e[8] * z;\n        dst.y = e[1] * x + e[5] * y + e[9] * z;\n        dst.z = e[2] * x + e[6] * y + e[10] * z;\n\n        return dst;\n    }\n}\n\nexport class Float4 implements HeapPointer {\n    size = 4;\n    elements = new Float32Array(4);\n\n    get x() {\n        return this.elements[0];\n    }\n    set x(value: number) {\n        this.elements[0] = value;\n    }\n\n    get y() {\n        return this.elements[1];\n    }\n    set y(value: number) {\n        this.elements[1] = value;\n    }\n\n    get z() {\n        return this.elements[2];\n    }\n    set z(value: number) {\n        this.elements[2] = value;\n    }\n\n    get w() {\n        return this.elements[3];\n    }\n    set w(value: number) {\n        this.elements[3] = value;\n    }\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 0) {\n        this.set(x, y, z, w);\n        footprint_alloc(4);\n    }\n\n    read(buffer: TypedArray | number[], offset: number = 0): this {\n        this.elements[0] = buffer[offset];\n        this.elements[1] = buffer[offset + 1];\n        this.elements[2] = buffer[offset + 2];\n        this.elements[3] = buffer[offset + 3];\n        return this;\n    }\n\n    write(buffer: TypedArray | number[], offset: number = 0): this {\n        buffer[offset] = this.elements[0];\n        buffer[offset + 1] = this.elements[1];\n        buffer[offset + 2] = this.elements[2];\n        buffer[offset + 3] = this.elements[3];\n        return this;\n    }\n\n    set(x: number, y: number, z: number, w: number): Float4 {\n        this.elements[0] = x;\n        this.elements[1] = y;\n        this.elements[2] = z;\n        this.elements[3] = w;\n        return this;\n    }\n\n    copy(a: Float4): Float4 {\n        this.elements.set(a.elements);\n        return this;\n    }\n\n    apply_mat4(m: Mat4): Float4 {\n        return Float4.MultiplyMat4(this, m, this);\n    }\n\n    clone(): Float4 {\n        return new Float4(this.elements[0], this.elements[1], this.elements[2], this.elements[3]);\n    }\n\n    all_zero(): boolean {\n        return this.elements[0] === 0 && this.elements[1] === 0 && this.elements[2] === 0 && this.elements[3] === 0;\n    }\n\n    toString(): string {\n        return `[${this.elements[0]}, ${this.elements[1]}, ${this.elements[2]}, ${this.elements[3]}]`;\n    }\n\n    mul(n: number): Float4 {\n        this.elements[0] *= n;\n        this.elements[1] *= n;\n        this.elements[2] *= n;\n        this.elements[3] *= n;\n        return this;\n    }\n\n    lerp(b: Float4, f: number): this {\n        Float4.Lerp(this, b, f, this);\n        return this;\n    }\n\n    static Lerp(a: Float4, b: Float4, f: number, dst: Float4): Float4 {\n        dst.x = lerp(a.x, b.x, f);\n        dst.y = lerp(a.y, b.y, f);\n        dst.y = lerp(a.z, b.z, f);\n        dst.y = lerp(a.w, b.w, f);\n        return dst;\n    }\n\n    static MultiplyMat4(a: Float4, m: Mat4, dst: Float4): Float4 {\n        const x = a.elements[0];\n        const y = a.elements[1];\n        const z = a.elements[2];\n        const w = a.elements[3];\n        const e = m.elements;\n\n        dst.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;\n        dst.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;\n        dst.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;\n        dst.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;\n\n        return dst;\n    }\n}\n", "import { Float3 } from './simd';\nimport { Mat4 } from './simd_mat';\n\nconst points = [new Float3(), new Float3(), new Float3(), new Float3(), new Float3(), new Float3(), new Float3(), new Float3()];\nexport class Box3 {\n    constructor(min?: Float3, max?: Float3) {\n        if (min !== undefined) {\n            this.min.copy(min);\n        } else {\n            this.min.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        }\n        if (max !== undefined) {\n            this.max.copy(max);\n        } else {\n            this.max.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        }\n    }\n\n    min: Float3 = new Float3();\n    max: Float3 = new Float3();\n\n    private _size: Float3 = new Float3();\n    private _center: Float3 = new Float3();\n\n    get size(): Float3 {\n        return this._size.copy(this.max).sub(this.min) as Float3;\n    }\n\n    get center(): Float3 {\n        return this._center.copy(this.size).mul(0.5).add(this.min) as Float3;\n    }\n\n    set(min: Float3, max: Float3): this {\n        this.min.copy(min);\n        this.max.copy(max);\n        return this;\n    }\n\n    copy(a: Box3): this {\n        this.min.copy(a.min);\n        this.max.copy(a.max);\n        return this;\n    }\n\n    clone(): Box3 {\n        return new Box3(this.min, this.max);\n    }\n\n    reset(): this {\n        this.min.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        this.max.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        return this;\n    }\n\n    expand_point(point: Float3): this {\n        this.min.min(point);\n        this.max.max(point);\n        return this;\n    }\n\n    contains_point(point: Float3): boolean {\n        return point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;\n    }\n\n    expand_box(box: Box3): this {\n        this.min.min(box.min);\n        this.max.max(box.max);\n        return this;\n    }\n\n    contains_box(box: Box3): boolean {\n        return this.min.x <= box.min.x && this.max.x >= box.max.x && this.min.y <= box.min.y && this.max.y >= box.max.y && this.min.z <= box.min.z && this.max.z >= box.max.z;\n    }\n\n    apply_mat4(m: Mat4): Box3 {\n        // using a binary pattern to specify all 2^3 combinations below\n        points[0].set(this.min.x, this.min.y, this.min.z).apply_mat4(m); // 000\n        points[1].set(this.min.x, this.min.y, this.max.z).apply_mat4(m); // 001\n        points[2].set(this.min.x, this.max.y, this.min.z).apply_mat4(m); // 010\n        points[3].set(this.min.x, this.max.y, this.max.z).apply_mat4(m); // 011\n        points[4].set(this.max.x, this.min.y, this.min.z).apply_mat4(m); // 100\n        points[5].set(this.max.x, this.min.y, this.max.z).apply_mat4(m); // 101\n        points[6].set(this.max.x, this.max.y, this.min.z).apply_mat4(m); // 110\n        points[7].set(this.max.x, this.max.y, this.max.z).apply_mat4(m); // 111\n\n        this.reset();\n        for (let i = 0; i < 8; ++i) {\n            this.expand_point(points[i]);\n        }\n\n        return this;\n    }\n\n    write(buffer: Float32Array, offset: number = 0): Box3 {\n        this.min.write(buffer, offset);\n        this.max.write(buffer, offset + 3);\n        return this;\n    }\n\n    read(buffer: Float32Array, offset: number = 0): Box3 {\n        this.min.read(buffer, offset);\n        this.max.read(buffer, offset + 3);\n        return this;\n    }\n\n    set_center(center: Float3): Box3 {\n        const size = this.size;\n\n        const half_x = size.x * 0.5;\n        const half_y = size.y * 0.5;\n        const half_z = size.z * 0.5;\n\n        this.min.x = center.x - half_x;\n        this.min.y = center.y - half_y;\n        this.min.z = center.z - half_z;\n\n        this.max.x = center.x + half_x;\n        this.max.y = center.y + half_y;\n        this.max.z = center.z + half_z;\n\n        return this;\n    }\n\n    set_size(size: Float3): Box3 {\n        const center = this.center;\n        const sx = size.x * 0.5;\n        const sy = size.y * 0.5;\n        const sz = size.z * 0.5;\n\n        this.min.x = center.x - sx;\n        this.min.y = center.y - sy;\n        this.min.z = center.z - sz;\n\n        this.max.x = center.x + sx;\n        this.max.y = center.y + sy;\n        this.max.z = center.z + sz;\n\n        return this;\n    }\n\n    get invalid(): boolean {\n        return this.min.x === Infinity || this.min.y === Infinity || this.min.z === Infinity || this.max.x === -Infinity || this.max.y === -Infinity || this.max.z === -Infinity;\n    }\n\n    static Overlapped(a: Box3, b: Box3): boolean {\n        let overlap = true;\n        overlap = a.min.x > b.max.x || a.max.x < b.min.x ? false : overlap;\n        overlap = a.min.y > b.max.y || a.max.y < b.min.y ? false : overlap;\n        overlap = a.min.z > b.max.z || a.max.z < b.min.z ? false : overlap;\n        return overlap;\n    }\n}\n", "import { TypedArray } from '../std/type';\nimport { clamp } from './math';\nimport { Float3, Float4 } from './simd';\n\nfunction color_to_hex(c: number): string {\n    c = clamp(Math.ceil(c * 255), 0, 255);\n    if (c < 16) return '0' + c.toString(16);\n    return c.toString(16);\n}\n\nexport interface Color<T extends Color<T>> {}\n\nexport enum ColorMode {\n    RGBA = 1,\n    HSL,\n    HSV,\n}\n\nexport class ColorRGBA extends Float4 implements Color<ColorRGBA> {\n    get r() {\n        return this.elements[0];\n    }\n    set r(value: number) {\n        this.elements[0] = value;\n    }\n\n    get g() {\n        return this.elements[1];\n    }\n    set g(value: number) {\n        this.elements[1] = value;\n    }\n\n    get b() {\n        return this.elements[2];\n    }\n    set b(value: number) {\n        this.elements[2] = value;\n    }\n\n    get a() {\n        return this.elements[3];\n    }\n    set a(value: number) {\n        this.elements[3] = value;\n    }\n\n    constructor(r: number = 0, g: number = 0, b: number = 0, a: number = 1) {\n        super(r, g, b, a);\n    }\n\n    copy(color: ColorRGBA): ColorRGBA {\n        super.copy(color);\n        return this;\n    }\n\n    clone(): ColorRGBA {\n        return new ColorRGBA().copy(this);\n    }\n\n    read(buffer: TypedArray | number[], offset: number = 0): this {\n        this.elements[0] = buffer[offset];\n        this.elements[1] = buffer[offset + 1];\n        this.elements[2] = buffer[offset + 2];\n        this.elements[3] = buffer[offset + 3];\n        return this;\n    }\n\n    write(buffer: TypedArray | number[], offset: number = 0): this {\n        buffer[offset] = this.elements[0];\n        buffer[offset + 1] = this.elements[1];\n        buffer[offset + 2] = this.elements[2];\n        buffer[offset + 3] = this.elements[3];\n        return this;\n    }\n\n    set_hex_string(hex: string): ColorRGBA {\n        let h = hex;\n        if (!h) return this;\n        if (h[0] === '#') h = h.substr(1);\n        else if (h[0] === '0' && h[1] === 'x') h = h.substr(2);\n\n        if (h.length === 3) {\n            this.r = parseInt(h[0], 16) / 15;\n            this.g = parseInt(h[1], 16) / 15;\n            this.b = parseInt(h[2], 16) / 15;\n            this.a = 1;\n        } else if (h.length === 4) {\n            this.r = parseInt(h[0], 16) / 15;\n            this.g = parseInt(h[1], 16) / 15;\n            this.b = parseInt(h[2], 16) / 15;\n            this.a = parseInt(h[3], 16) / 15;\n        } else if (h.length === 6) {\n            this.r = parseInt(h.substr(0, 2), 16) / 255;\n            this.g = parseInt(h.substr(2, 2), 16) / 255;\n            this.b = parseInt(h.substr(4, 2), 16) / 255;\n            this.a = 1;\n        } else if (h.length === 8) {\n            this.r = parseInt(h.substr(0, 2), 16) / 255;\n            this.g = parseInt(h.substr(2, 2), 16) / 255;\n            this.b = parseInt(h.substr(4, 2), 16) / 255;\n            this.a = parseInt(h.substr(6, 2), 16) / 255;\n        } else {\n            throw `invalid hex value ${hex}`;\n        }\n\n        return this;\n    }\n\n    set_hex(hex: number): ColorRGBA {\n        if (hex > 0xffffff) {\n            this.r = ((hex & 0xff000000) >>> 24) / 255.0;\n            this.g = ((hex & 0xff0000) >>> 16) / 255.0;\n            this.b = ((hex & 0xff00) >>> 8) / 255.0;\n            this.a = (hex & 0xff) / 255.0;\n        } else {\n            this.r = ((hex & 0xff0000) >>> 16) / 255.0;\n            this.g = ((hex & 0xff00) >>> 8) / 255.0;\n            this.b = (hex & 0xff) / 255.0;\n            this.a = 1.0;\n        }\n        return this;\n    }\n\n    to_hex(): number {\n        const r = ((this.r * 255.0) & 0xff) << 24;\n        const g = ((this.g * 255.0) & 0xff) << 16;\n        const b = ((this.b * 255.0) & 0xff) << 8;\n        const a = (this.a * 255.0) & 0xff;\n        return r | g | b | a;\n    }\n\n    to_hex_string() {\n        return color_to_hex(this.r) + color_to_hex(this.g) + color_to_hex(this.b) + color_to_hex(this.a);\n    }\n\n    set_rgba_byte(r: number, g: number, b: number, a: number): ColorRGBA {\n        this.r = r / 255.0;\n        this.g = g / 255.0;\n        this.b = b / 255.0;\n        this.a = a / 255.0;\n        return this;\n    }\n\n    tone(f: number): ColorRGBA {\n        this.r *= f;\n        this.g *= f;\n        this.b *= f;\n        return this;\n    }\n\n    tone_scalar(offset: number): ColorRGBA {\n        this.r += offset;\n        this.g += offset;\n        this.b += offset;\n        return this;\n    }\n\n    from_float3(src: Float3): ColorRGBA {\n        this.r = src.x;\n        this.g = src.y;\n        this.b = src.z;\n        this.a = 1;\n        return this;\n    }\n\n    from_float4(src: Float4): ColorRGBA {\n        this.r = src.x;\n        this.g = src.y;\n        this.b = src.z;\n        this.a = src.w;\n        return this;\n    }\n\n    to_float3(dst?: Float3): Float3 {\n        dst = dst ?? new Float3();\n        dst.x = this.r;\n        dst.y = this.g;\n        dst.z = this.b;\n        return dst;\n    }\n\n    to_float4(dst?: Float4): Float4 {\n        dst = dst ?? new Float4();\n        dst.x = this.r;\n        dst.y = this.g;\n        dst.z = this.b;\n        dst.w = this.a;\n        return dst;\n    }\n\n    toString(): string {\n        return `[${this.r}, ${this.g}, ${this.b}, ${this.a}]`;\n    }\n\n    toJSON(): number[] {\n        return [this.r, this.g, this.b, this.a];\n    }\n\n    to_array(): any {\n        return [this.r, this.g, this.b, this.a];\n    }\n}\n\nexport class ColorHSL extends Float3 implements Color<ColorHSL> {\n    constructor(public hue = 0, public saturation = 0, public lightness = 1) {\n        super(hue, saturation, lightness);\n    }\n\n    toString(): string {\n        return `[${this.hue}, ${this.saturation}, ${this.lightness}]`;\n    }\n}\n\nexport class ColorHSV extends Float3 implements Color<ColorHSV> {\n    constructor(public hue = 0, public saturation = 0, public value = 1) {\n        super(hue, saturation, value);\n    }\n\n    toString(): string {\n        return `[${this.hue}, ${this.saturation}, ${this.value}]`;\n    }\n}\n\nexport function color_rgba_to_hsl(src: ColorRGBA, dst?: ColorHSL): ColorHSL {\n    const r = src.r;\n    const g = src.g;\n    const b = src.b;\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    let s = 0;\n    let l = (max + min) * 0.5;\n    if (max === min) {\n        h = s = 0;\n    } else {\n        const d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n        }\n        h /= 6;\n    }\n    dst = dst ?? new ColorHSL();\n    dst.hue = h;\n    dst.saturation = s;\n    dst.lightness = l;\n    return dst;\n}\n\nfunction hue2rgb(p: number, q: number, t: number) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\n\nexport function color_hsl_to_rgba(src: ColorHSL, dst?: ColorRGBA): ColorRGBA {\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    const s = src.saturation;\n    const h = src.hue;\n    const l = src.lightness;\n\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        let p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    dst = dst ?? new ColorRGBA();\n    dst.r = r;\n    dst.g = g;\n    dst.b = b;\n    return dst;\n}\n\nexport function color_hsv_to_rgba(src: ColorHSV, dst?: ColorRGBA): ColorRGBA {\n    const h = src.hue;\n    const s = src.saturation;\n    const v = src.value;\n\n    const i = Math.floor(h * 6);\n    const f = h * 6 - i;\n    const p = v * (1 - s);\n    const q = v * (1 - f * s);\n    const t = v * (1 - (1 - f) * s);\n\n    let r = 0;\n    let g = 0;\n    let b = 0;\n\n    switch (i % 6) {\n        case 0:\n            r = v;\n            g = t;\n            b = p;\n            break;\n        case 1:\n            r = q;\n            g = v;\n            b = p;\n            break;\n        case 2:\n            r = p;\n            g = v;\n            b = t;\n            break;\n        case 3:\n            r = p;\n            g = q;\n            b = v;\n            break;\n        case 4:\n            r = t;\n            g = p;\n            b = v;\n            break;\n        case 5:\n            r = v;\n            g = p;\n            b = q;\n            break;\n    }\n\n    dst = dst ?? new ColorRGBA();\n    dst.r = r;\n    dst.g = g;\n    dst.b = b;\n    return dst;\n}\n\nexport function color_rgba_to_hsv(src: ColorRGBA, dst?: ColorHSV): ColorHSV {\n    const r = src.r;\n    const g = src.g;\n    const b = src.b;\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let h = 0;\n    const v = max;\n    const d = max - min;\n    const s = max === 0 ? 0 : d / max;\n\n    if (max === min) {\n        h = 0; // achromatic\n    } else {\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n        }\n\n        h /= 6;\n    }\n\n    dst = dst ?? new ColorHSV();\n    dst.hue = h;\n    dst.saturation = s;\n    dst.value = v;\n    return dst;\n}\n", "import { pool_get, pool_return } from '../adt';\nimport { footprint_alloc } from '../memory/footprint';\nimport { HeapPointer } from '../memory/heap_pointer';\nimport { TypedArray } from '../std/type';\nimport { DegreeToRadian } from './math';\nimport { Float3 } from './simd';\nimport { Quaternion } from './simd_quaternion';\n\nconst x = new Float3();\nconst y = new Float3();\nconst z = new Float3();\nconst v = new Float3();\nconst default_up = new Float3(0, 1, 0);\n\nexport class Mat4 implements HeapPointer {\n    size = 16;\n    elements = new Float32Array(16);\n\n    static IDENTITY = new Mat4().identity();\n\n    constructor() {\n        this.identity();\n        footprint_alloc(16);\n    }\n\n    read(buffer: TypedArray | number[], offset: number = 0): this {\n        for (let i = 0; i < this.size; ++i) {\n            this.elements[i] = buffer[offset + i];\n        }\n        return this;\n    }\n\n    write(buffer: TypedArray | number[], offset: number = 0): this {\n        for (let i = 0; i < this.size; ++i) {\n            buffer[offset + i] = this.elements[i];\n        }\n        return this;\n    }\n\n    copy(dst: Mat4): Mat4 {\n        this.elements.set(dst.elements);\n        return this;\n    }\n\n    clone(): Mat4 {\n        return new Mat4().copy(this);\n    }\n\n    identity(): Mat4 {\n        this.elements.set([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n        return this;\n    }\n\n    get_x(x: Float3): Float3 {\n        x.read(this.elements);\n        return x;\n    }\n\n    get_y(y: Float3): Float3 {\n        y.read(this.elements, 4);\n        return y;\n    }\n\n    get_z(z: Float3): Float3 {\n        z.read(this.elements, 8);\n        return z;\n    }\n\n    get_w(w: Float3): Float3 {\n        w.read(this.elements, 12);\n        return w;\n    }\n\n    set_x(x: Float3): Mat4 {\n        x.write(this.elements);\n        return this;\n    }\n\n    set_y(x: Float3): Mat4 {\n        x.write(this.elements, 4);\n        return this;\n    }\n\n    set_z(x: Float3): Mat4 {\n        x.write(this.elements, 8);\n        return this;\n    }\n\n    set_w(x: Float3): Mat4 {\n        x.write(this.elements, 12);\n        return this;\n    }\n\n    set(\n        xx: number,\n        xy: number,\n        xz: number,\n        xw: number,\n        yx: number,\n        yy: number,\n        yz: number,\n        yw: number,\n        zx: number,\n        zy: number,\n        zz: number,\n        zw: number,\n        wx: number,\n        wy: number,\n        wz: number,\n        ww: number\n    ): Mat4 {\n        const te = this.elements;\n        te[0] = xx;\n        te[1] = xy;\n        te[2] = xz;\n        te[3] = xw;\n        te[4] = yx;\n        te[5] = yy;\n        te[6] = yz;\n        te[7] = yw;\n        te[8] = zx;\n        te[9] = zy;\n        te[10] = zz;\n        te[11] = zw;\n        te[12] = wx;\n        te[13] = wy;\n        te[14] = wz;\n        te[15] = ww;\n        return this;\n    }\n\n    look_at(origin: Float3, target: Float3, up?: Float3): Mat4 {\n        if (up === undefined) up = default_up;\n\n        z.copy(origin).sub(target);\n\n        // origin and target are in the same position\n        if (z.x === 0 && z.y === 0 && z.z === 0) {\n            z.z = 1;\n        }\n\n        z.normalize();\n        Float3.Cross(up, z, x);\n\n        // z and up are parallel\n        if (x.x === 0 && x.y === 0 && x.z === 0) {\n            if (Math.abs(up.z) === 1) {\n                z.x += 0.0001;\n            } else {\n                z.z += 0.0001;\n            }\n            z.normalize();\n            Float3.Cross(up, z, x);\n        }\n\n        x.normalize();\n\n        Float3.Cross(z, x, y);\n        y.normalize();\n\n        const te = this.elements;\n        te[0] = x.x;\n        te[1] = x.y;\n        te[2] = x.z;\n\n        te[4] = y.x;\n        te[5] = y.y;\n        te[6] = y.z;\n\n        te[8] = z.x;\n        te[9] = z.y;\n        te[10] = z.z;\n\n        return this;\n    }\n\n    perspective(vertical_fov: number, aspect: number, near: number, far: number, reverse_depth: boolean = false): Mat4 {\n        const top = near * Math.tan(DegreeToRadian * 0.5 * vertical_fov);\n        const bottom = -top;\n        const left = top * aspect;\n        const right = -left;\n\n        const depth_range = far - near;\n        const n2 = near * 2;\n\n        const te = this.elements;\n        te.fill(0);\n\n        te[0] = n2 / (right - left);\n        te[5] = n2 / (top - bottom);\n\n        te[8] = (right + left) / (right - left);\n        te[9] = (top + bottom) / (top - bottom);\n        te[10] = -(far / depth_range);\n\n        te[14] = near * te[10];\n        te[11] = -1;\n\n        if (reverse_depth) {\n            te[14] = -te[14];\n            te[10] = -te[10] - 1.0;\n        }\n\n        return this;\n    }\n\n    orthographics(size_vertical: number, size_horizontal: number, near: number, far: number, reverse_depth: boolean = false): Mat4 {\n        const te = this.elements;\n        te.fill(0);\n\n        const depth_range = far - near;\n\n        const left = size_horizontal / 2;\n        const right = -size_horizontal / 2;\n        const top = size_vertical / 2;\n        const bottom = -size_vertical / 2;\n\n        te[0] = 2 / (right - left);\n        te[5] = 2 / (top - bottom);\n        te[10] = -2 / depth_range;\n\n        te[12] = (right + left) / (right - left);\n        te[13] = (top + bottom) / (top - bottom);\n        te[14] = -near * te[10];\n        te[15] = 1;\n\n        if (reverse_depth) {\n            te[14] = -te[14] + 1;\n            te[10] = -te[10];\n        }\n\n        return this;\n    }\n\n    inverse(): Mat4 {\n        return Mat4.Inverse(this, this);\n    }\n\n    from_quaternion(q: Quaternion): Mat4 {\n        return Mat4.FromQuaternion(q, this);\n    }\n\n    compose(location: Float3, rotation: Quaternion, scale: Float3): Mat4 {\n        return Mat4.Compose(location, rotation, scale, this);\n    }\n\n    decompose(location: Float3, rotation: Quaternion, scale: Float3): Mat4 {\n        return Mat4.Decompose(this, location, rotation, scale);\n    }\n\n    set_scale(scale: Float3): Mat4 {\n        const te = this.elements;\n        const x = scale.x,\n            y = scale.y,\n            z = scale.z;\n        te[0] *= x;\n        te[4] *= y;\n        te[8] *= z;\n        te[1] *= x;\n        te[5] *= y;\n        te[9] *= z;\n        te[2] *= x;\n        te[6] *= y;\n        te[10] *= z;\n        te[3] *= x;\n        te[7] *= y;\n        te[11] *= z;\n        return this;\n    }\n\n    get_scale(scale: Float3): Float3 {\n        return scale.set(this.elements[0], this.elements[5], this.elements[10]);\n    }\n\n    set_location(location: Float3): Mat4 {\n        const te = this.elements;\n        te[12] = location.x;\n        te[13] = location.y;\n        te[14] = location.z;\n        return this;\n    }\n\n    pre_mul(a: Mat4): Mat4 {\n        return Mat4.Mul(a, this, this);\n    }\n\n    mul(a: Mat4): Mat4 {\n        return Mat4.Mul(this, a, this);\n    }\n\n    transpose(): Mat4 {\n        const te = this.elements;\n        let tmp;\n        tmp = te[1];\n        te[1] = te[4];\n        te[4] = tmp;\n        tmp = te[2];\n        te[2] = te[8];\n        te[8] = tmp;\n        tmp = te[6];\n        te[6] = te[9];\n        te[9] = tmp;\n        tmp = te[3];\n        te[3] = te[12];\n        te[12] = tmp;\n        tmp = te[7];\n        te[7] = te[13];\n        te[13] = tmp;\n        tmp = te[11];\n        te[11] = te[14];\n        te[14] = tmp;\n        return this;\n    }\n\n    determinant(): number {\n        return Mat4.Determinant(this);\n    }\n\n    static IsIdentity(src: Mat4): boolean {\n        const te = src.elements;\n        return (\n            te[0] === 1 &&\n            te[1] === 0 &&\n            te[2] === 0 &&\n            te[3] === 0 &&\n            te[4] === 0 &&\n            te[5] === 1 &&\n            te[6] === 0 &&\n            te[7] === 0 &&\n            te[8] === 0 &&\n            te[9] === 0 &&\n            te[10] === 1 &&\n            te[11] === 0 &&\n            te[12] === 0 &&\n            te[13] === 0 &&\n            te[14] === 0 &&\n            te[15] === 1\n        );\n    }\n\n    static Determinant(src: Mat4): number {\n        const te = src.elements;\n        const n11 = te[0],\n            n12 = te[4],\n            n13 = te[8],\n            n14 = te[12];\n        const n21 = te[1],\n            n22 = te[5],\n            n23 = te[9],\n            n24 = te[13];\n        const n31 = te[2],\n            n32 = te[6],\n            n33 = te[10],\n            n34 = te[14];\n        const n41 = te[3],\n            n42 = te[7],\n            n43 = te[11],\n            n44 = te[15];\n\n        //TODO: make this more efficient\n        //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n        return (\n            n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) +\n            n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) +\n            n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) +\n            n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31)\n        );\n    }\n\n    static Compose(location: Float3, rotation: Quaternion, scale: Float3, dst?: Mat4): Mat4 {\n        if (dst === undefined) dst = new Mat4();\n        const te = dst.elements;\n        const x = rotation.x,\n            y = rotation.y,\n            z = rotation.z,\n            w = rotation.w;\n        const x2 = x + x,\n            y2 = y + y,\n            z2 = z + z;\n        const xx = x * x2,\n            xy = x * y2,\n            xz = x * z2;\n        const yy = y * y2,\n            yz = y * z2,\n            zz = z * z2;\n        const wx = w * x2,\n            wy = w * y2,\n            wz = w * z2;\n\n        const sx = scale.x,\n            sy = scale.y,\n            sz = scale.z;\n\n        te[0] = (1 - (yy + zz)) * sx;\n        te[1] = (xy + wz) * sx;\n        te[2] = (xz - wy) * sx;\n        te[3] = 0;\n\n        te[4] = (xy - wz) * sy;\n        te[5] = (1 - (xx + zz)) * sy;\n        te[6] = (yz + wx) * sy;\n        te[7] = 0;\n\n        te[8] = (xz + wy) * sz;\n        te[9] = (yz - wx) * sz;\n        te[10] = (1 - (xx + yy)) * sz;\n        te[11] = 0;\n\n        te[12] = location.x;\n        te[13] = location.y;\n        te[14] = location.z;\n        te[15] = 1;\n        return dst;\n    }\n\n    static Decompose(src: Mat4, location: Float3, rotation: Quaternion, scale: Float3): Mat4 {\n        const m = pool_get(Mat4);\n        const te = src.elements;\n\n        let sx = v.set(te[0], te[1], te[2]).length;\n        const sy = v.set(te[4], te[5], te[6]).length;\n        const sz = v.set(te[8], te[9], te[10]).length;\n\n        // if determine is negative, we need to inverse one scale\n        const det = src.determinant();\n        if (det < 0) sx = -sx;\n\n        location.x = te[12];\n        location.y = te[13];\n        location.z = te[14];\n\n        // scale the rotation part\n        m.copy(src);\n\n        const invSX = 1 / sx;\n        const invSY = 1 / sy;\n        const invSZ = 1 / sz;\n\n        m.elements[0] *= invSX;\n        m.elements[1] *= invSX;\n        m.elements[2] *= invSX;\n\n        m.elements[4] *= invSY;\n        m.elements[5] *= invSY;\n        m.elements[6] *= invSY;\n\n        m.elements[8] *= invSZ;\n        m.elements[9] *= invSZ;\n        m.elements[10] *= invSZ;\n\n        rotation.from_mat4(m);\n        pool_return(m);\n\n        scale.x = sx;\n        scale.y = sy;\n        scale.z = sz;\n\n        return src;\n    }\n\n    static FromQuaternion(q: Quaternion, dst: Mat4 = new Mat4()): Mat4 {\n        const te = dst.elements;\n\n        const x = q.x;\n        const y = q.y;\n        const z = q.z;\n        const w = q.w;\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        te[0] = 1 - (yy + zz);\n        te[4] = xy - wz;\n        te[8] = xz + wy;\n\n        te[1] = xy + wz;\n        te[5] = 1 - (xx + zz);\n        te[9] = yz - wx;\n\n        te[2] = xz - wy;\n        te[6] = yz + wx;\n        te[10] = 1 - (xx + yy);\n\n        // last column\n        te[3] = 0;\n        te[7] = 0;\n        te[11] = 0;\n\n        // bottom row\n        te[12] = 0;\n        te[13] = 0;\n        te[14] = 0;\n        te[15] = 1;\n        return dst;\n    }\n\n    static Inverse(src: Mat4, dst?: Mat4): Mat4 {\n        if (!dst) dst = new Mat4();\n\n        // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n        const te = dst.elements,\n            me = src.elements,\n            n11 = me[0],\n            n21 = me[1],\n            n31 = me[2],\n            n41 = me[3],\n            n12 = me[4],\n            n22 = me[5],\n            n32 = me[6],\n            n42 = me[7],\n            n13 = me[8],\n            n23 = me[9],\n            n33 = me[10],\n            n43 = me[11],\n            n14 = me[12],\n            n24 = me[13],\n            n34 = me[14],\n            n44 = me[15],\n            t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n            t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n            t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n            t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n        const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n        if (det === 0) {\n            return dst.identity();\n        }\n\n        const detInv = 1 / det;\n\n        te[0] = t11 * detInv;\n        te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;\n        te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;\n        te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;\n\n        te[4] = t12 * detInv;\n        te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;\n        te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;\n        te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;\n\n        te[8] = t13 * detInv;\n        te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;\n        te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;\n        te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;\n\n        te[12] = t14 * detInv;\n        te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;\n        te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;\n        te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;\n\n        return dst;\n    }\n\n    static Mul(a: Mat4, b: Mat4, dst?: Mat4): Mat4 {\n        if (dst === undefined) dst = new Mat4();\n        const ae = a.elements;\n        const be = b.elements;\n        const te = dst.elements;\n\n        const a11 = ae[0];\n        const a12 = ae[4];\n        const a13 = ae[8];\n        const a14 = ae[12];\n        const a21 = ae[1];\n        const a22 = ae[5];\n        const a23 = ae[9];\n        const a24 = ae[13];\n        const a31 = ae[2];\n        const a32 = ae[6];\n        const a33 = ae[10];\n        const a34 = ae[14];\n        const a41 = ae[3];\n        const a42 = ae[7];\n        const a43 = ae[11];\n        const a44 = ae[15];\n\n        const b11 = be[0];\n        const b12 = be[4];\n        const b13 = be[8];\n        const b14 = be[12];\n        const b21 = be[1];\n        const b22 = be[5];\n        const b23 = be[9];\n        const b24 = be[13];\n        const b31 = be[2];\n        const b32 = be[6];\n        const b33 = be[10];\n        const b34 = be[14];\n        const b41 = be[3];\n        const b42 = be[7];\n        const b43 = be[11];\n        const b44 = be[15];\n\n        te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n        te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n        te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n        te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n        te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n        te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n        te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n        te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n        te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n        te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n        te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n        te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n        te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n        te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n        te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n        te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n        return dst;\n    }\n\n    toString(): string {\n        let result = '[' + this.elements[0].toFixed(4);\n        for (let i = 1; i < this.elements.length; ++i) {\n            result += ', ' + this.elements[i].toFixed(4);\n        }\n        result += ']';\n        return result;\n    }\n}\n\nexport class Mat3 implements HeapPointer {\n    size: number = 9;\n    elements = new Float32Array(9);\n\n    constructor() {\n        this.identity();\n        footprint_alloc(9);\n    }\n\n    read(buffer: TypedArray | number[], offset: number = 0): this {\n        for (let i = 0; i < this.size; ++i) {\n            this.elements[i] = buffer[offset + i];\n        }\n        return this;\n    }\n\n    write(buffer: TypedArray | number[], offset: number = 0): this {\n        for (let i = 0; i < this.size; ++i) {\n            buffer[offset + i] = this.elements[i];\n        }\n        return this;\n    }\n\n    identity(): Mat3 {\n        this.elements.set([1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n        return this;\n    }\n\n    copy(m: Mat3): Mat3 {\n        this.elements.set(m.elements);\n        return this;\n    }\n\n    from_mat4(m: Mat4): Mat3 {\n        const te = this.elements;\n        const me = m.elements;\n        te[0] = me[0];\n        te[1] = me[1];\n        te[2] = me[2];\n        te[3] = me[4];\n        te[4] = me[5];\n        te[5] = me[6];\n        te[6] = me[8];\n        te[7] = me[9];\n        te[8] = me[10];\n        return this;\n    }\n\n    normal_matrix_from_mat4(m: Mat4): Mat3 {\n        this.from_mat4(m).inverse().transpose();\n        return this;\n    }\n\n    inverse(): Mat3 {\n        const te = this.elements;\n        const n11 = te[0];\n        const n21 = te[1];\n        const n31 = te[2];\n        const n12 = te[3];\n        const n22 = te[4];\n        const n32 = te[5];\n        const n13 = te[6];\n        const n23 = te[7];\n        const n33 = te[8];\n\n        const t11 = n33 * n22 - n32 * n23;\n        const t12 = n32 * n13 - n33 * n12;\n        const t13 = n23 * n12 - n22 * n13;\n\n        const det = n11 * t11 + n21 * t12 + n31 * t13;\n        if (det === 0) {\n            this.elements.fill(0);\n            return this;\n        }\n\n        const det_inv = 1 / det;\n\n        te[0] = t11 * det_inv;\n        te[1] = (n31 * n23 - n33 * n21) * det_inv;\n        te[2] = (n32 * n21 - n31 * n22) * det_inv;\n\n        te[3] = t12 * det_inv;\n        te[4] = (n33 * n11 - n31 * n13) * det_inv;\n        te[5] = (n31 * n12 - n32 * n11) * det_inv;\n\n        te[6] = t13 * det_inv;\n        te[7] = (n21 * n13 - n23 * n11) * det_inv;\n        te[8] = (n22 * n11 - n21 * n12) * det_inv;\n\n        return this;\n    }\n\n    transpose(): Mat3 {\n        const te = this.elements;\n        let tmp;\n\n        tmp = te[1];\n        te[1] = te[3];\n        te[3] = tmp;\n\n        tmp = te[2];\n        te[2] = te[6];\n        te[6] = tmp;\n\n        tmp = te[5];\n        te[5] = te[7];\n        te[7] = tmp;\n\n        return this;\n    }\n\n    toString(): string {\n        let result = '[' + this.elements[0].toFixed(4);\n        for (let i = 1; i < this.elements.length; ++i) {\n            result += ', ' + this.elements[i].toFixed(4);\n        }\n        result += ']';\n        return result;\n    }\n\n    static GetColumn(src: Mat3, index: number, dst: Float3) {\n        const elements = src.elements;\n        dst.x = elements[index];\n        dst.y = elements[index + 3];\n        dst.z = elements[index + 6];\n        return dst;\n    }\n\n    static Diagonal(x: number, y: number, z: number, dst: Mat3) {\n        dst.elements.set([x, 0, 0, 0, y, 0, 0, 0, z]);\n    }\n}\n", "import { HeapPointer } from '../memory';\nimport { footprint_alloc } from '../memory/footprint';\nimport { TypedArray } from '../std';\nimport { clamp, lerp } from './math';\nimport { Mat4 } from './simd_mat';\nimport { Quaternion } from './simd_quaternion';\n\nexport enum EulerOrder {\n    XYZ = 'XYZ',\n    YXZ = 'YXZ',\n    ZXY = 'ZXY',\n    ZYX = 'ZYX',\n    YZX = 'YZX',\n    XZY = 'XZY',\n}\n\nlet m: Mat4;\n\nexport class Euler implements HeapPointer {\n    size = 3;\n    elements = new Float32Array(3);\n\n    order = EulerOrder.XYZ;\n\n    get x(): number {\n        return this.elements[0];\n    }\n    set x(value: number) {\n        this.elements[0] = value;\n    }\n\n    get y(): number {\n        return this.elements[1];\n    }\n    set y(value: number) {\n        this.elements[1] = value;\n    }\n\n    get z(): number {\n        return this.elements[2];\n    }\n    set z(value: number) {\n        this.elements[2] = value;\n    }\n\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.set(x, y, z);\n        footprint_alloc(3);\n    }\n\n    read(buffer: TypedArray | number[], offset: number | undefined = 0): this {\n        this.elements[0] = buffer[offset];\n        this.elements[1] = buffer[offset + 1];\n        this.elements[2] = buffer[offset + 2];\n        return this;\n    }\n\n    write(buffer: TypedArray | number[], offset: number | undefined = 0): this {\n        buffer[offset] = this.elements[0];\n        buffer[offset + 1] = this.elements[1];\n        buffer[offset + 2] = this.elements[2];\n        return this;\n    }\n\n    set(x: number, y: number, z: number): Euler {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    }\n\n    copy(euler: Euler): Euler {\n        this.x = euler.x;\n        this.y = euler.y;\n        this.z = euler.z;\n        return this;\n    }\n\n    clone(): Euler {\n        return new Euler(this.x, this.y, this.z);\n    }\n\n    add(euler: Euler): Euler {\n        this.x += euler.x;\n        this.y += euler.y;\n        this.z += euler.z;\n        return this;\n    }\n\n    sub(euler: Euler): Euler {\n        this.x -= euler.x;\n        this.y -= euler.y;\n        this.z -= euler.z;\n        return this;\n    }\n\n    mul(n: number) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n        return this;\n    }\n\n    lerp(b: Euler, i: number): Euler {\n        return Euler.Lerp(this, b, i, this);\n    }\n\n    from_mat4(matrix: Mat4, order: EulerOrder = EulerOrder.XYZ): Euler {\n        return Euler.FromRotationMatrix(matrix, order, this);\n    }\n\n    from_quaternion(quaternion: Quaternion, order: EulerOrder = EulerOrder.XYZ): Euler {\n        return Euler.FromQuaternion(quaternion, order, this);\n    }\n\n    static FromRotationMatrix(matrix: Mat4, order: EulerOrder = EulerOrder.XYZ, dst: Euler): Euler {\n        if (dst === undefined) dst = new Euler();\n\n        const te = matrix.elements;\n        const m11 = te[0];\n        const m12 = te[4];\n        const m13 = te[8];\n        const m21 = te[1];\n        const m22 = te[5];\n        const m23 = te[9];\n        const m31 = te[2];\n        const m32 = te[6];\n        const m33 = te[10];\n\n        switch (order) {\n            case EulerOrder.XYZ:\n                dst.y = Math.asin(clamp(m13, -1, 1));\n\n                if (Math.abs(m13) < 0.9999999) {\n                    dst.x = Math.atan2(-m23, m33);\n                    dst.z = Math.atan2(-m12, m11);\n                } else {\n                    dst.x = Math.atan2(m32, m22);\n                    dst.z = 0;\n                }\n                break;\n            case EulerOrder.YXZ:\n                dst.x = Math.asin(-clamp(m23, -1, 1));\n\n                if (Math.abs(m23) < 0.9999999) {\n                    dst.y = Math.atan2(m13, m33);\n                    dst.z = Math.atan2(m21, m22);\n                } else {\n                    dst.y = Math.atan2(-m31, m11);\n                    dst.z = 0;\n                }\n                break;\n            case EulerOrder.ZXY:\n                dst.x = Math.asin(clamp(m32, -1, 1));\n\n                if (Math.abs(m32) < 0.9999999) {\n                    dst.y = Math.atan2(-m31, m33);\n                    dst.z = Math.atan2(-m12, m22);\n                } else {\n                    dst.y = 0;\n                    dst.z = Math.atan2(m21, m11);\n                }\n                break;\n            case EulerOrder.ZYX:\n                dst.y = Math.asin(-clamp(m31, -1, 1));\n\n                if (Math.abs(m31) < 0.9999999) {\n                    dst.x = Math.atan2(m32, m33);\n                    dst.z = Math.atan2(m21, m11);\n                } else {\n                    dst.x = 0;\n                    dst.z = Math.atan2(-m12, m22);\n                }\n                break;\n            case EulerOrder.YZX:\n                dst.z = Math.asin(clamp(m21, -1, 1));\n\n                if (Math.abs(m21) < 0.9999999) {\n                    dst.x = Math.atan2(-m23, m22);\n                    dst.y = Math.atan2(-m31, m11);\n                } else {\n                    dst.x = 0;\n                    dst.y = Math.atan2(m13, m33);\n                }\n                break;\n            case EulerOrder.XZY:\n                dst.z = Math.asin(-clamp(m12, -1, 1));\n\n                if (Math.abs(m12) < 0.9999999) {\n                    dst.x = Math.atan2(m32, m22);\n                    dst.y = Math.atan2(m13, m11);\n                } else {\n                    dst.x = Math.atan2(-m23, m33);\n                    dst.y = 0;\n                }\n                break;\n            default:\n                console.warn('unknown order: ' + order);\n        }\n        dst.order = order;\n        return dst;\n    }\n\n    static FromQuaternion(quaternion: Quaternion, order: EulerOrder = EulerOrder.XYZ, dst: Euler): Euler {\n        if (dst === undefined) dst = new Euler();\n\n        if (m === undefined) m = new Mat4();\n\n        m.from_quaternion(quaternion);\n        return Euler.FromRotationMatrix(m, order, dst);\n    }\n\n    static Lerp(a: Euler, b: Euler, i: number, dst: Euler): Euler {\n        dst.x = lerp(a.elements[0], b.x, i);\n        dst.y = lerp(a.elements[1], b.y, i);\n        dst.z = lerp(a.elements[2], b.z, i);\n        return dst;\n    }\n}\n", "export class Interpolation {\n    public static LinearInterpolate(start: number, end: number, t: number): number {\n        return (end - start) * t + start;\n    }\n}\n\nexport enum InterpolationMethod {\n    Linear,\n    Step,\n    CubicSpline,\n}\n", "import { Box3 } from './box';\nimport { Plane } from './plane';\nimport { Float3 } from './simd';\nimport { Mat4 } from './simd_mat';\nimport { Sphere } from './sphere';\n\nconst v = new Float3();\n\n// triangle tmp variable\nconst normal = new Float3();\nconst edge1 = new Float3();\nconst edge2 = new Float3();\nconst diff = new Float3();\n\nexport class Ray {\n    origin: Float3 = new Float3();\n    direction: Float3 = new Float3();\n\n    constructor(origin?: Float3, direction?: Float3) {\n        if (origin !== undefined) this.origin.copy(origin);\n        if (direction !== undefined) this.direction.copy(direction);\n    }\n\n    copy(r: Ray): Ray {\n        this.origin.copy(r.origin);\n        this.direction.copy(r.direction);\n        return this;\n    }\n\n    at(t: number, target: Float3 = v): Float3 {\n        return target.copy(this.direction).mul(t).add(this.origin) as Float3;\n    }\n\n    apply_mat4(m: Mat4): Ray {\n        this.origin.apply_mat4(m);\n        this.direction.apply_mat4_directional(m);\n        return this;\n    }\n\n    distance_to_point(point: Float3): number {\n        v.copy(point).sub(this.origin);\n        const distance = v.dot(this.direction);\n        if (distance < 0) {\n            return this.origin.distance(point);\n        }\n        v.copy(this.direction).mul(distance).add(this.origin);\n        return v.distance(point);\n    }\n\n    intersect_box(box: Box3, target: Float3 = v): Float3 | null {\n        let tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n        const invdirx = 1 / this.direction.x;\n        const invdiry = 1 / this.direction.y;\n        const invdirz = 1 / this.direction.z;\n\n        const origin = this.origin;\n\n        if (invdirx >= 0) {\n            tmin = (box.min.x - origin.x) * invdirx;\n            tmax = (box.max.x - origin.x) * invdirx;\n        } else {\n            tmin = (box.max.x - origin.x) * invdirx;\n            tmax = (box.min.x - origin.x) * invdirx;\n        }\n\n        if (invdiry >= 0) {\n            tymin = (box.min.y - origin.y) * invdiry;\n            tymax = (box.max.y - origin.y) * invdiry;\n        } else {\n            tymin = (box.max.y - origin.y) * invdiry;\n            tymax = (box.min.y - origin.y) * invdiry;\n        }\n\n        if (tmin > tymax || tymin > tmax) return null;\n\n        // These lines also handle the case where tmin or tmax is NaN\n        // (result of 0 * Infinity). x !== x returns true if x is NaN\n\n        if (tymin > tmin || tmin !== tmin) tmin = tymin;\n        if (tymax < tmax || tmax !== tmax) tmax = tymax;\n\n        if (invdirz >= 0) {\n            tzmin = (box.min.z - origin.z) * invdirz;\n            tzmax = (box.max.z - origin.z) * invdirz;\n        } else {\n            tzmin = (box.max.z - origin.z) * invdirz;\n            tzmax = (box.min.z - origin.z) * invdirz;\n        }\n\n        if (tmin > tzmax || tzmin > tmax) return null;\n        if (tzmin > tmin || tmin !== tmin) tmin = tzmin;\n        if (tzmax < tmax || tmax !== tmax) tmax = tzmax;\n\n        //return point closest to the ray (positive side)\n        if (tmax < 0) return null;\n        return this.at(tmin >= 0 ? tmin : tmax, target);\n    }\n\n    is_intersect_box(box: Box3): boolean {\n        return this.intersect_box(box) !== null;\n    }\n\n    intersect_sphere(sphere: Sphere, target: Float3 = v): Float3 | null {\n        v.copy(sphere.center).sub(this.origin);\n        const tca = v.dot(this.direction);\n        const d2 = v.dot(v) - tca * tca;\n        const radius2 = sphere.radius * sphere.radius;\n\n        if (d2 > radius2) return null;\n\n        const thc = Math.sqrt(radius2 - d2);\n\n        // t0 = first intersect point - entrance on front of sphere\n        const t0 = tca - thc;\n\n        // t1 = second intersect point - exit point on back of sphere\n        const t1 = tca + thc;\n\n        // test to see if both t0 and t1 are behind the ray - if so, return null\n        if (t0 < 0 && t1 < 0) return null;\n\n        // test to see if t0 is behind the ray:\n        // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n        // in order to always return an intersect point that is in front of the ray.\n        if (t0 < 0) return this.at(t1, target);\n\n        // else t0 is in front of the ray, so return the first collision point scaled by t0\n        return this.at(t0, target);\n    }\n\n    is_intersect_sphere(sphere: Sphere, target: Float3 = v): boolean {\n        return this.intersect_sphere(sphere, target) !== null;\n    }\n\n    intersect_triangle(a: Float3, b: Float3, c: Float3, double_side: boolean = false, target: Float3 = v): Float3 | null {\n        // Compute the offset origin, edges, and normal.\n\n        // from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n        edge1.copy(b).sub(a);\n        edge2.copy(c).sub(a);\n        Float3.Cross(edge1, edge2, normal);\n\n        // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n        // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n        //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n        //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n        //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n        let DdN = this.direction.dot(normal);\n        let sign;\n\n        if (DdN > 0) {\n            if (!double_side) return null;\n            sign = 1;\n        } else if (DdN < 0) {\n            sign = -1;\n            DdN = -DdN;\n        } else {\n            return null;\n        }\n\n        diff.copy(this.origin).sub(a);\n        Float3.Cross(diff, edge2, edge2);\n        const DdQxE2 = sign * this.direction.dot(edge2);\n\n        // b1 < 0, no intersection\n        if (DdQxE2 < 0) {\n            return null;\n        }\n\n        const DdE1xQ = sign * this.direction.dot(edge1.cross(diff));\n        // b2 < 0, no intersection\n        if (DdE1xQ < 0) {\n            return null;\n        }\n\n        // b1+b2 > 1, no intersection\n        if (DdQxE2 + DdE1xQ > DdN) {\n            return null;\n        }\n\n        // Line intersects triangle, check if ray does.\n        const QdN = -sign * diff.dot(normal);\n        // t < 0, no intersection\n        if (QdN < 0) {\n            return null;\n        }\n\n        // Ray intersects triangle.\n        return this.at(QdN / DdN, target);\n    }\n\n    is_triangle_intersect(a: Float3, b: Float3, c: Float3, double_side: boolean = false, target: Float3 = v): boolean {\n        return this.intersect_triangle(a, b, c, double_side, target) !== null;\n    }\n\n    intersect_plane(plane: Plane, target: Float3 = v): Float3 | null {\n        const denominator = plane.normal.dot(this.direction);\n        if (denominator === 0) {\n            // line is coplanar, return origin\n            if (plane.distance_to_point(this.origin) === 0) {\n                target.copy(this.origin);\n                return target;\n            }\n\n            // Null is preferable to undefined since undefined means.... it is undefined\n            return null;\n        }\n        const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;\n        if (t < 0) return null;\n        this.at(t, target);\n        // Return if the ray never intersects the plane\n        return target;\n    }\n\n    apply_matrix(mat: Mat4): Ray {\n        this.origin.apply_mat4(mat);\n        this.direction.apply_mat4_directional(mat);\n        return this;\n    }\n}\n", "import { footprint_alloc } from '../memory/footprint';\nimport { HeapPointer } from '../memory/heap_pointer';\nimport { TypedArray } from '../std/type';\nimport { clamp } from './math';\nimport { Float2 } from './simd';\n\nexport class Rect implements HeapPointer {\n    static ZERO = new Rect(0, 0, 0, 0);\n\n    size = 4;\n    elements = new Float32Array(4);\n\n    set x(n: number) {\n        this.elements[0] = n;\n    }\n    set y(n: number) {\n        this.elements[1] = n;\n    }\n    set w(n: number) {\n        this.elements[2] = n;\n    }\n    set h(n: number) {\n        this.elements[3] = n;\n    }\n\n    get x(): number {\n        return this.elements[0];\n    }\n    get y(): number {\n        return this.elements[1];\n    }\n    get w(): number {\n        return this.elements[2];\n    }\n    get h(): number {\n        return this.elements[3];\n    }\n\n    constructor(x: number = 0, y: number = 0, w: number = 0, h: number = 0) {\n        this.set(x, y, w, h);\n        footprint_alloc(4);\n    }\n\n    read(buffer: TypedArray | number[], offset: number = 0): this {\n        this.elements[0] = buffer[offset];\n        this.elements[1] = buffer[offset + 1];\n        this.elements[2] = buffer[offset + 2];\n        this.elements[3] = buffer[offset + 3];\n        return this;\n    }\n\n    write(buffer: TypedArray | number[], offset: number = 0): this {\n        buffer[offset] = this.elements[0];\n        buffer[offset + 1] = this.elements[1];\n        buffer[offset + 2] = this.elements[2];\n        buffer[offset + 3] = this.elements[3];\n        return this;\n    }\n\n    set(x: number, y: number, w: number, h: number): Rect {\n        this.elements[0] = x;\n        this.elements[1] = y;\n        this.elements[2] = w;\n        this.elements[3] = h;\n        return this;\n    }\n\n    copy(rect: Rect): Rect {\n        this.elements[0] = rect.x;\n        this.elements[1] = rect.y;\n        this.elements[2] = rect.w;\n        this.elements[3] = rect.h;\n        return this;\n    }\n\n    contains(point: Float2): boolean {\n        return point.x >= this.elements[0] && point.y >= this.elements[1] && point.x < this.elements[0] + this.elements[2] && point.y < this.elements[1] + this.elements[3];\n    }\n\n    equals(rect: Rect): boolean {\n        return this.elements[0] === rect.x && this.elements[1] === rect.y && this.elements[2] === rect.w && this.elements[3] === rect.h;\n    }\n\n    locate(rect: Rect): Rect {\n        this.elements[0] += rect.x;\n        this.elements[1] += rect.y;\n        return this;\n    }\n\n    mul(n: number): Rect {\n        this.elements[0] *= n;\n        this.elements[1] *= n;\n        this.elements[2] *= n;\n        this.elements[3] *= n;\n        return this;\n    }\n\n    scale(n: number): Rect {\n        this.elements[2] *= n;\n        this.elements[3] *= n;\n        return this;\n    }\n\n    translate(x: number, y: number): Rect {\n        this.elements[0] += x;\n        this.elements[1] += y;\n        return this;\n    }\n\n    shrink(offset: number, offset_horizontal?: number): Rect {\n        if (offset_horizontal === undefined) {\n            this.elements[0] += offset;\n            this.elements[1] += offset;\n            this.elements[2] = Math.max(0, this.elements[2] - offset * 2);\n            this.elements[3] = Math.max(0, this.elements[3] - offset * 2);\n        } else {\n            this.elements[0] += offset_horizontal;\n            this.elements[1] += offset;\n            this.elements[2] = Math.max(0, this.elements[2] - offset_horizontal * 2);\n            this.elements[3] = Math.max(0, this.elements[3] - offset * 2);\n        }\n        return this;\n    }\n\n    expand(offset: number, offset_horizontal?: number): Rect {\n        if (offset_horizontal === undefined) {\n            this.elements[0] -= offset;\n            this.elements[1] -= offset;\n            this.elements[2] += offset * 2;\n            this.elements[3] += offset * 2;\n        } else {\n            this.elements[0] -= offset_horizontal;\n            this.elements[1] -= offset;\n            this.elements[2] += offset_horizontal * 2;\n            this.elements[3] += offset * 2;\n        }\n        return this;\n    }\n\n    constrain(point: Float2): Float2 {\n        point.x = clamp(point.x, this.elements[0], this.elements[0] + this.elements[2]);\n        point.y = clamp(point.y, this.elements[1], this.elements[1] + this.elements[3]);\n        return point;\n    }\n\n    intersect(rect: Rect): Rect {\n        const l = this.elements[0] > rect.x ? this.elements[0] : rect.x;\n        const t = this.elements[1] > rect.y ? this.elements[1] : rect.y;\n        const r = this.elements[0] + this.elements[2] < rect.x + rect.w ? this.elements[0] + this.elements[2] : rect.x + rect.w;\n        const b = this.elements[1] + this.elements[3] < rect.y + rect.h ? this.elements[1] + this.elements[3] : rect.y + rect.h;\n        if (l >= r || t >= b) {\n            this.elements[0] = 0;\n            this.elements[1] = 0;\n            this.elements[2] = 0;\n            this.elements[3] = 0;\n        } else {\n            this.elements[0] = l;\n            this.elements[1] = t;\n            this.elements[2] = r - l;\n            this.elements[3] = b - t;\n        }\n        return this;\n    }\n\n    valid(): boolean {\n        return this.elements[2] > 0 && this.elements[3] > 0;\n    }\n\n    toString(): string {\n        return `Rect(${this.elements[0]}, ${this.elements[1]}, ${this.elements[2]}, ${this.elements[3]})`;\n    }\n}\n", "import { footprint_alloc } from '../memory/footprint';\nimport { HeapPointer } from '../memory/heap_pointer';\nimport { TypedArray } from '../std/type';\nimport { Euler, EulerOrder } from './euler';\nimport { Float3 } from './simd';\nimport { Mat3, Mat4 } from './simd_mat';\n\nexport function is_quaternion(obj: any): obj is Quaternion {\n    return obj && obj.is_quaternion;\n}\n\nexport class Quaternion implements HeapPointer {\n    static readonly IDENTITY = new Quaternion(0, 0, 0, 1);\n\n    is_quaternion: boolean = true;\n\n    size = 4;\n    elements = new Float32Array(4);\n\n    get x(): number {\n        return this.elements[0];\n    }\n    set x(value: number) {\n        this.elements[0] = value;\n    }\n\n    get y(): number {\n        return this.elements[1];\n    }\n    set y(value: number) {\n        this.elements[1] = value;\n    }\n\n    get z(): number {\n        return this.elements[2];\n    }\n    set z(value: number) {\n        this.elements[2] = value;\n    }\n\n    get w(): number {\n        return this.elements[3];\n    }\n    set w(value: number) {\n        this.elements[3] = value;\n    }\n\n    constructor(x: number = 0, y: number = 0, z: number = 0, w: number = 1) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n        footprint_alloc(4);\n    }\n\n    read(buffer: TypedArray | number[], offset: number = 0): this {\n        this.elements[0] = buffer[offset];\n        this.elements[1] = buffer[offset + 1];\n        this.elements[2] = buffer[offset + 2];\n        this.elements[3] = buffer[offset + 3];\n        return this;\n    }\n\n    write(buffer: TypedArray | number[], offset: number = 0): this {\n        buffer[offset] = this.elements[0];\n        buffer[offset + 1] = this.elements[1];\n        buffer[offset + 2] = this.elements[2];\n        buffer[offset + 3] = this.elements[3];\n        return this;\n    }\n\n    set(...args: number[]): Quaternion {\n        if (!args) this.elements.fill(0);\n        else this.elements.set(args);\n        return this;\n    }\n\n    copy(q: Quaternion): Quaternion {\n        this.x = q.x;\n        this.y = q.y;\n        this.z = q.z;\n        this.w = q.w;\n        return this;\n    }\n\n    clone(): Quaternion {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    }\n\n    length(): number {\n        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    }\n\n    normalize(): Quaternion {\n        return Quaternion.Normalize(this, this);\n    }\n\n    premul(q: Quaternion): Quaternion {\n        return Quaternion.Mul(q, this, this);\n    }\n\n    mul(q: Quaternion): Quaternion {\n        return Quaternion.Mul(this, q, this);\n    }\n\n    from_mat4(m: Mat4): Quaternion {\n        return Quaternion.FromMat4(m, this);\n    }\n\n    from_unit_vectors(src: Float3, dst: Float3): Quaternion {\n        return Quaternion.FromUnitVectors(src, dst, this);\n    }\n\n    from_euler(src: Euler, order = EulerOrder.XYZ): Quaternion {\n        return Quaternion.FromEuler(src, order, this);\n    }\n\n    from_axis_angle(axis: Float3, angle: number): Quaternion {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n        // assumes axis is normalized\n        const halfAngle = angle / 2;\n        const s = Math.sin(halfAngle);\n\n        this.x = axis.x * s;\n        this.y = axis.y * s;\n        this.z = axis.z * s;\n        this.w = Math.cos(halfAngle);\n\n        return this;\n    }\n\n    toString(): string {\n        return `[${this.x}, ${this.y}, ${this.z}, ${this.w}]`;\n    }\n\n    slerp(q: Quaternion, t: number): Quaternion {\n        Quaternion.Slerp(this, q, t, this);\n        return this;\n    }\n\n    conjugate(): Quaternion {\n        return Quaternion.Conjugate(this, this);\n    }\n\n    inverse(): Quaternion {\n        return Quaternion.Inverse(this, this);\n    }\n\n    static Conjugate(q: Quaternion, dst: Quaternion): Quaternion {\n        dst.x = -q.x;\n        dst.y = -q.y;\n        dst.z = -q.z;\n        dst.w = q.w;\n        return dst;\n    }\n\n    static Equals(a: Quaternion, b: Quaternion): boolean {\n        return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;\n    }\n\n    static Mul(a: Quaternion, b: Quaternion, dst?: Quaternion): Quaternion {\n        if (dst === undefined) dst = new Quaternion();\n        // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n        const qax = a.x,\n            qay = a.y,\n            qaz = a.z,\n            qaw = a.w;\n        const qbx = b.x,\n            qby = b.y,\n            qbz = b.z,\n            qbw = b.w;\n\n        dst.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n        dst.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n        dst.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n        dst.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n        return dst;\n    }\n\n    static FromUnitVectors(a: Float3, b: Float3, dst: Quaternion): Quaternion {\n        // assumes direction vectors vFrom and vTo are normalized\n        let r = a.dot(b) + 1;\n\n        if (r < Number.EPSILON) {\n            // vFrom and vTo point in opposite directions\n            r = 0;\n            if (Math.abs(a.x) > Math.abs(a.z)) {\n                dst.x = -a.y;\n                dst.y = a.x;\n                dst.z = 0;\n                dst.w = r;\n            } else {\n                dst.x = 0;\n                dst.y = -a.z;\n                dst.z = a.y;\n                dst.w = r;\n            }\n        } else {\n            // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n            dst.x = a.y * b.z - a.z * b.y;\n            dst.y = a.z * b.x - a.x * b.z;\n            dst.z = a.x * b.y - a.y * b.x;\n            dst.w = r;\n        }\n        return dst.normalize();\n    }\n\n    static FromMat4(m: Mat4, dst: Quaternion): Quaternion {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n        // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n        const te = m.elements;\n        const m11 = te[0];\n        const m12 = te[4];\n        const m13 = te[8];\n        const m21 = te[1];\n        const m22 = te[5];\n        const m23 = te[9];\n        const m31 = te[2];\n        const m32 = te[6];\n        const m33 = te[10];\n        const trace = m11 + m22 + m33;\n        let s;\n\n        if (trace > 0) {\n            s = 0.5 / Math.sqrt(trace + 1.0);\n            dst.w = 0.25 / s;\n            dst.x = (m32 - m23) * s;\n            dst.y = (m13 - m31) * s;\n            dst.z = (m21 - m12) * s;\n        } else if (m11 > m22 && m11 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n            dst.w = (m32 - m23) / s;\n            dst.x = 0.25 * s;\n            dst.y = (m12 + m21) / s;\n            dst.z = (m13 + m31) / s;\n        } else if (m22 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n            dst.w = (m13 - m31) / s;\n            dst.x = (m12 + m21) / s;\n            dst.y = 0.25 * s;\n            dst.z = (m23 + m32) / s;\n        } else {\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n            dst.w = (m21 - m12) / s;\n            dst.x = (m13 + m31) / s;\n            dst.y = (m23 + m32) / s;\n            dst.z = 0.25 * s;\n        }\n        return dst;\n    }\n\n    static FromMat3(m: Mat3, dst: Quaternion): Quaternion {\n        const te = m.elements;\n        const m11 = te[0];\n        const m12 = te[3];\n        const m13 = te[6];\n        const m21 = te[1];\n        const m22 = te[4];\n        const m23 = te[7];\n        const m31 = te[2];\n        const m32 = te[5];\n        const m33 = te[9];\n\n        const trace = m11 + m22 + m33;\n        let s;\n\n        if (trace > 0) {\n            s = 0.5 / Math.sqrt(trace + 1.0);\n            dst.w = 0.25 / s;\n            dst.x = (m32 - m23) * s;\n            dst.y = (m13 - m31) * s;\n            dst.z = (m21 - m12) * s;\n        } else if (m11 > m22 && m11 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n            dst.w = (m32 - m23) / s;\n            dst.x = 0.25 * s;\n            dst.y = (m12 + m21) / s;\n            dst.z = (m13 + m31) / s;\n        } else if (m22 > m33) {\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n            dst.w = (m13 - m31) / s;\n            dst.x = (m12 + m21) / s;\n            dst.y = 0.25 * s;\n            dst.z = (m23 + m32) / s;\n        } else {\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n            dst.w = (m21 - m12) / s;\n            dst.x = (m13 + m31) / s;\n            dst.y = (m23 + m32) / s;\n            dst.z = 0.25 * s;\n        }\n\n        return dst;\n    }\n\n    static Slerp(a: Quaternion, b: Quaternion, t: number, dst: Quaternion): Quaternion {\n        if (t === 0) {\n            dst.copy(a);\n            return dst;\n        }\n\n        if (t === 1) {\n            dst.copy(b);\n            return dst;\n        }\n\n        const x = a.x;\n        const y = a.y;\n        const z = a.z;\n        const w = a.w;\n\n        let cosHalfTheta = w * b.w + x * b.x + y * b.y + z * b.z;\n\n        if (cosHalfTheta < 0) {\n            dst.w = -b.w;\n            dst.x = -b.x;\n            dst.y = -b.y;\n            dst.z = -b.z;\n\n            cosHalfTheta = -cosHalfTheta;\n        } else {\n            dst.copy(b);\n        }\n\n        if (cosHalfTheta >= 1.0) {\n            dst.w = w;\n            dst.x = x;\n            dst.y = y;\n            dst.z = z;\n            return dst;\n        }\n\n        const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n        if (sqrSinHalfTheta <= Number.EPSILON) {\n            const s = 1 - t;\n            dst.w = s * w + t * a.w;\n            dst.x = s * x + t * a.x;\n            dst.y = s * y + t * a.y;\n            dst.z = s * z + t * a.z;\n            dst.normalize();\n            return dst;\n        }\n\n        const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\n        const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\n        const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;\n        const ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\n\n        dst.w = w * ratioA + b.w * ratioB;\n        dst.x = x * ratioA + b.x * ratioB;\n        dst.y = y * ratioA + b.y * ratioB;\n        dst.z = z * ratioA + b.z * ratioB;\n\n        return dst;\n    }\n\n    static Normalize(src: Quaternion, dst?: Quaternion): Quaternion {\n        if (dst === undefined) dst = new Quaternion();\n        let l = src.length();\n        if (l === 0) {\n            dst.x = 0;\n            dst.y = 0;\n            dst.z = 0;\n            dst.w = 1;\n        } else {\n            l = 1 / l;\n            dst.x *= l;\n            dst.y *= l;\n            dst.z *= l;\n            dst.w *= l;\n        }\n        return dst;\n    }\n\n    static Multiply(a: Quaternion, b: Quaternion, dst?: Quaternion): Quaternion {\n        if (dst === undefined) dst = new Quaternion();\n        const qax = a.x,\n            qay = a.y,\n            qaz = a.z,\n            qaw = a.w;\n        const qbx = b.x,\n            qby = b.y,\n            qbz = b.z,\n            qbw = b.w;\n        dst.x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n        dst.y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n        dst.z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n        dst.w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n        return dst;\n    }\n\n    static FromEuler(e: Euler, order: EulerOrder = EulerOrder.XYZ, dst: Quaternion): Quaternion {\n        const x = e.x;\n        const y = e.y;\n        const z = e.z;\n\n        // http://www.mathworks.com/matlabcentral/fileexchange/\n        // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n        //\tcontent/SpinCalc.m\n\n        const cos = Math.cos;\n        const sin = Math.sin;\n\n        const c1 = cos(x / 2);\n        const c2 = cos(y / 2);\n        const c3 = cos(z / 2);\n\n        const s1 = sin(x / 2);\n        const s2 = sin(y / 2);\n        const s3 = sin(z / 2);\n\n        switch (order) {\n            case EulerOrder.XYZ:\n                dst.x = s1 * c2 * c3 + c1 * s2 * s3;\n                dst.y = c1 * s2 * c3 - s1 * c2 * s3;\n                dst.z = c1 * c2 * s3 + s1 * s2 * c3;\n                dst.w = c1 * c2 * c3 - s1 * s2 * s3;\n                break;\n\n            case EulerOrder.YXZ:\n                dst.x = s1 * c2 * c3 + c1 * s2 * s3;\n                dst.y = c1 * s2 * c3 - s1 * c2 * s3;\n                dst.z = c1 * c2 * s3 - s1 * s2 * c3;\n                dst.w = c1 * c2 * c3 + s1 * s2 * s3;\n                break;\n\n            case EulerOrder.ZXY:\n                dst.x = s1 * c2 * c3 - c1 * s2 * s3;\n                dst.y = c1 * s2 * c3 + s1 * c2 * s3;\n                dst.z = c1 * c2 * s3 + s1 * s2 * c3;\n                dst.w = c1 * c2 * c3 - s1 * s2 * s3;\n                break;\n\n            case EulerOrder.ZYX:\n                dst.x = s1 * c2 * c3 - c1 * s2 * s3;\n                dst.y = c1 * s2 * c3 + s1 * c2 * s3;\n                dst.z = c1 * c2 * s3 - s1 * s2 * c3;\n                dst.w = c1 * c2 * c3 + s1 * s2 * s3;\n                break;\n\n            case EulerOrder.YZX:\n                dst.x = s1 * c2 * c3 + c1 * s2 * s3;\n                dst.y = c1 * s2 * c3 + s1 * c2 * s3;\n                dst.z = c1 * c2 * s3 - s1 * s2 * c3;\n                dst.w = c1 * c2 * c3 - s1 * s2 * s3;\n                break;\n\n            case EulerOrder.XZY:\n                dst.x = s1 * c2 * c3 - c1 * s2 * s3;\n                dst.y = c1 * s2 * c3 - s1 * c2 * s3;\n                dst.z = c1 * c2 * s3 + s1 * s2 * c3;\n                dst.w = c1 * c2 * c3 + s1 * s2 * s3;\n                break;\n\n            default:\n                console.warn('unknown order: ' + order);\n        }\n\n        return dst;\n    }\n\n    static Inverse(src: Quaternion, dst: Quaternion): Quaternion {\n        dst.x = -src.x;\n        dst.y = -src.y;\n        dst.z = -src.z;\n        dst.w = src.w;\n        return dst;\n    }\n}\n", "import { Constructor, TypedArray } from '../std/type';\n\ninterface Range {\n    start: number;\n    count: number;\n}\n\nexport interface Pointer<T> {\n    readonly range: Range;\n    readonly stride: number;\n    buffer: T;\n}\n\nexport class Heap {\n    private readonly buffer: ArrayBuffer;\n    tail: number;\n\n    released: Range[] = [];\n\n    // mega bytes\n    heap_size: number = 4096;\n\n    private life_cycle: number = 1024;\n    private life_index: number = 0;\n\n    constructor() {\n        this.buffer = new ArrayBuffer(this.heap_size);\n        this.tail = 0;\n    }\n\n    alloc<T extends TypedArray>(size: number, constructor: Constructor<T>): Pointer<T> {\n        const stride = (constructor as any).BYTES_PER_ELEMENT;\n        const start = this.tail;\n        const count = size * stride;\n\n        // 32 bit alignment\n        this.tail = this.tail + count + (4 - (count % 4));\n\n        return {\n            range: { start, count },\n            stride,\n            buffer: new constructor(this.buffer, start, size),\n        };\n    }\n\n    free<T>(pointer: Pointer<T>): void {\n        this.released.push(pointer.range);\n    }\n\n    manage = () => {\n        //TODO: move release memory & copy in used memory to the head of heap\n        this.life_index = this.life_index++ % this.life_cycle;\n    };\n}\n\nconst MemoryHeap = new Heap();\n\nexport function memcpy<T extends TypedArray>(dst: Pointer<T>, src: Pointer<T>): Pointer<T> {\n    dst.buffer.set(src.buffer);\n    return dst;\n}\n\nexport function malloc<T extends TypedArray>(size: number, constructor: Constructor<T>): Pointer<T> {\n    return MemoryHeap.alloc(size, constructor);\n}\n\nexport function free<T extends TypedArray>(pointer: Pointer<T>): void {\n    MemoryHeap.free(pointer);\n}\n\nexport function heapusage(): string {\n    return `${mem_format(MemoryHeap.tail)}/${mem_format(MemoryHeap.heap_size)}`;\n}\n\nexport function memusage(): string {\n    let total = MemoryHeap.tail;\n    if (performance && (performance as any).memory) {\n        total = (performance as any).memory.totalJSHeapSize;\n    }\n    return mem_format(total);\n}\n\nexport function memcycle(): void {\n    MemoryHeap.manage();\n}\n\nconst MAX_B = 1;\nconst MAX_KB = MAX_B * 1024;\nconst MAX_MB = MAX_KB * 1024;\nconst MAX_GB = MAX_MB * 1024;\nconst MAX_TB = MAX_GB * 1024;\nconst MAX_PB = MAX_TB * 1024;\nfunction mem_format(s: number): string {\n    if (s <= MAX_KB) {\n        return `${s}B`;\n    } else if (s <= MAX_MB) {\n        return `${Math.floor(s / MAX_KB)}K`;\n    } else if (s <= MAX_GB) {\n        return `${Math.floor(s / MAX_MB)}M`;\n    } else if (s <= MAX_TB) {\n        return `${Math.floor(s / MAX_GB)}G`;\n    } else if (s <= MAX_PB) {\n        return `${Math.floor(s / MAX_TB)}T`;\n    } else {\n        throw `wake up, you don't have memory that much.`;\n    }\n}\n", "import { footprint_alloc } from '../memory';\nimport { clamp, lerp } from './math';\nimport { Float3 } from './simd';\n\nexport class Spherical {\n    radius: number;\n    theta: number;\n    phi: number;\n\n    constructor(radius?: number, theta?: number, phi?: number) {\n        this.radius = radius || 1;\n        this.theta = theta || 0;\n        this.phi = phi || 0;\n        footprint_alloc(3);\n    }\n\n    from_float3(v: Float3): Spherical {\n        this.radius = v.length;\n        if (this.radius === 0) {\n            this.theta = 0;\n            this.phi = 0;\n        } else {\n            this.theta = Math.acos(clamp(v.y / this.radius, -1, 1));\n            this.phi = Math.atan2(v.x, v.z);\n        }\n        return this;\n    }\n\n    set(radius: number, theta: number, phi: number): Spherical {\n        this.radius = radius;\n        this.theta = theta;\n        this.phi = phi;\n        return this;\n    }\n\n    copy(s: Spherical): Spherical {\n        return this.set(s.radius, s.theta, s.phi);\n    }\n\n    clone(): Spherical {\n        return new Spherical(this.radius, this.theta, this.phi);\n    }\n\n    lerp(a: Spherical, i: number): Spherical {\n        return Spherical.Lerp(this, a, i, this);\n    }\n\n    static Lerp(start: Spherical, end: Spherical, i: number, dst: Spherical): Spherical {\n        if (dst === undefined) dst = new Spherical();\n        dst.radius = lerp(start.radius, end.radius, i);\n        dst.theta = lerp(start.theta, end.theta, i);\n        dst.phi = lerp(start.phi, end.phi, i);\n        return dst;\n    }\n}\n", "import { Box3 } from '../math/box';\nimport { DegreeToRadian } from '../math/math';\nimport { Float3 } from '../math/simd';\nimport { Mat4 } from '../math/simd_mat';\nimport { Quaternion } from '../math/simd_quaternion';\n\nconst rotate_matrix = new Mat4();\n\nexport enum CameraMode {\n    Perspective,\n    Orthographic,\n}\n\nexport class Camera {\n    private _mode: CameraMode = CameraMode.Perspective;\n    set mode(value: CameraMode) {\n        this._mode = value;\n        if (value === CameraMode.Perspective) {\n            this.perspective(this.vertical_fov, this.aspect, this.near, this.far);\n        } else {\n            this.orthographics(this.vertical_size, this.horizontal_size, this.near, this.far);\n        }\n    }\n    get mode(): CameraMode { return this._mode; }\n\n\n    location: Float3 = new Float3();\n    rotation: Quaternion = new Quaternion();\n    scale: Float3 = new Float3(1, 1, 1);\n\n    world_matrix: Mat4 = new Mat4();\n    local_matrix: Mat4 = new Mat4();\n\n    view_matrix: Mat4 = new Mat4();\n    projection_matrix: Mat4 = new Mat4();\n\n    view_projection_matrix: Mat4 = new Mat4();\n    inverse_projection_matrix: Mat4 = new Mat4();\n\n    up: Float3 = new Float3(0, 1, 0);\n\n    vertical_fov: number = 45;\n    aspect: number = 1.0;\n\n    vertical_size: number = 100.0;\n    horizontal_size: number = 100.0;\n\n    near: number = 1;\n    far: number = 10000;\n\n    constructor() {\n        this.perspective(this.vertical_fov, this.aspect, this.near, this.far);\n    }\n\n    update_world_matrix(): void {\n        this.world_matrix.compose(this.location, this.rotation, this.scale);\n    }\n\n    update_view_matrix(): void {\n        Mat4.Inverse(this.world_matrix, this.view_matrix);\n    }\n\n    perspective(fov: number, aspect: number, near: number, far: number) {\n        this.vertical_fov = fov;\n        this.aspect = aspect;\n        this.near = near;\n        this.far = far;\n        this.projection_matrix.perspective(fov, aspect, near, far);\n        return this.update_projection_matrix();\n    }\n\n    orthographics(size_vertical: number, size_horizontal: number, near: number, far: number) {\n        this.near = near;\n        this.far = far;\n        this.projection_matrix.orthographics(size_vertical, size_horizontal, near, far);\n        return this.update_projection_matrix();\n    }\n\n    look_at(target: Float3, up?: Float3): void {\n        up = up || this.up;\n        rotate_matrix.look_at(this.location, target, up);\n        this.rotation.from_mat4(rotate_matrix);\n        this.update_world_matrix();\n        this.update_view_matrix();\n    }\n\n    copy(camera: Camera): Camera {\n        this.location.copy(camera.location);\n        this.rotation.copy(camera.rotation);\n        this.scale.copy(camera.scale);\n        this.local_matrix.copy(camera.local_matrix);\n        this.world_matrix.copy(camera.world_matrix);\n\n        this.mode = camera.mode;\n        this.vertical_fov = camera.vertical_fov;\n        this.aspect = camera.aspect;\n\n        this.near = camera.near;\n        this.far = camera.far;\n\n        this.projection_matrix.copy(camera.projection_matrix);\n        this.view_matrix.copy(camera.view_matrix);\n        return this;\n    }\n\n    project(v: Float3): Float3 {\n        if (v.x === 0 && v.y === 0 && v.z === 0) return v.copy(this.location);\n        v.apply_mat4(this.view_matrix).apply_mat4(this.projection_matrix);\n        return v;\n    }\n\n    unproject(v: Float3): Float3 {\n        v.apply_mat4(this.inverse_projection_matrix).apply_mat4(this.world_matrix);\n        return v;\n    }\n\n    resize(width: number, height: number): Camera {\n        if (this.mode === CameraMode.Perspective) {\n            this.aspect = width / height;\n            this.perspective(this.vertical_fov, this.aspect, this.near, this.far);\n        } else {\n            this.vertical_size = height;\n            this.horizontal_size = width;\n            this.orthographics(this.vertical_size, this.horizontal_size, this.near, this.far);\n        }\n        return this;\n    }\n\n    update_projection_matrix() {\n        if (this._mode === CameraMode.Perspective) {\n            this.projection_matrix.perspective(this.vertical_fov, this.aspect, this.near, this.far);\n        } else {\n            this.projection_matrix.orthographics(this.vertical_size, this.horizontal_size, this.near, this.far);\n        }\n\n        this.inverse_projection_matrix.copy(this.projection_matrix).inverse();\n        return this;\n    }\n\n    fit_box(box: Box3) {\n        const distance = this.fit_distance(box);\n        this.location.sub(box.center).normalize().mul(distance);\n        this.look_at(box.center);\n    }\n\n    fit_distance(box: Box3): number {\n        const size = box.size;\n        const length = size.length;\n        return Math.atan(this.vertical_fov * DegreeToRadian * 0.5) * length;\n    }\n}\n\nconst view_box = new Box3();\nexport function camera_fix_box(camera: Camera, box: Box3): void {\n    if (box.invalid) return;\n\n    view_box.copy(box);\n    view_box.apply_mat4(camera.view_matrix);\n\n    camera.near = Math.max(0.01, -view_box.max.z);\n    camera.far = Math.max(-view_box.min.z, camera.near + 10);\n\n    if (isNaN(camera.near)) camera.near = 1.0;\n    if (isNaN(camera.far)) camera.far = 10000;\n\n    camera.update_projection_matrix();\n}\n\nexport interface CameraData {\n    mode: CameraMode;\n\n    near: number;\n    far: number;\n\n    vertical_fov: number;\n    aspect: number;\n\n    vertical_size: number;\n    horizontal_size: number;\n\n    location: number[];\n    rotation: number[];\n}\n\nexport function camera_serialize(camera: Camera): CameraData {\n    const data = {} as CameraData;\n    data.mode = camera.mode;\n    data.near = camera.near;\n    data.far = camera.far;\n    data.location = [camera.location.x, camera.location.y, camera.location.z];\n    data.rotation = [camera.rotation.x, camera.rotation.y, camera.rotation.z, camera.rotation.w];\n    data.vertical_fov = camera.vertical_fov;\n    data.aspect = camera.aspect;\n    data.vertical_size = camera.vertical_size;\n    data.horizontal_size = camera.horizontal_size;\n    return data;\n}\n\nexport function camera_deserialize(data: CameraData): Camera {\n    const camera = new Camera();\n    camera.mode = data.mode;\n    camera.near = data.near;\n    camera.far = data.far;\n    camera.vertical_fov = data.vertical_fov;\n    camera.aspect = data.aspect;\n    camera.vertical_size = data.vertical_size;\n    camera.horizontal_size = data.horizontal_size;\n\n    if (data.mode === CameraMode.Perspective) {\n        camera.perspective(data.vertical_fov, data.aspect, data.near, data.far);\n    } else {\n        camera.orthographics(data.vertical_size, data.horizontal_size, data.near, data.far);\n    }\n\n    camera.location.set(data.location[0], data.location[1], data.location[2]);\n    camera.rotation.set(data.rotation[0], data.rotation[1], data.rotation[2], data.rotation[3]);\n    camera.update_world_matrix();\n    camera.update_view_matrix();\n    camera.update_projection_matrix();\n\n    return camera;\n}\n", "export class TypedEvent<T = any> {\n    payload: T | undefined;\n    constructor(public key: string) {}\n}\n\nexport type Event = string;\n\ninterface Listener {\n    event: Event;\n    callback: Function;\n    scope: any;\n    once?: boolean;\n}\n\nexport class EventNode {\n    private listener_map: Map<Event, Listener[]> = new Map();\n\n    /**\n     * warn:\n     *  if event & callback has registered, new listener will replace one\n     */\n    on<T>(event: TypedEvent<T>, callback: (payload: T) => void, scope?: any, once: boolean = false): void {\n        const key = event.key;\n        const listener: Listener = {\n            event: key,\n            callback: callback,\n            scope: scope || this,\n            once: once,\n        };\n        const listeners = this.listener_map.get(key);\n        if (listeners === undefined) {\n            this.listener_map.set(key, [listener]);\n        } else {\n            let contain = false;\n            for (let i = 0, l = listeners.length; i < l; ++i) {\n                if (listeners[i].event === listener.event && listeners[i].callback === listener.callback) {\n                    contain = true;\n                    listeners[i] = listener;\n                }\n            }\n            if (!contain) {\n                listeners.push(listener);\n            }\n        }\n    }\n\n    once<T>(event: TypedEvent<T>, callback: (payload: T) => void, scope?: any): void {\n        this.on(event, callback, scope, true);\n    }\n\n    off<T>(event: TypedEvent<T>, callback: (payload: T) => void, scope?: any, once: boolean = false): void {\n        const key = event.key;\n        const listener: Listener = {\n            event: key,\n            callback: callback,\n            scope: scope || this,\n            once: once,\n        };\n        const listeners = this.listener_map.get(key);\n        if (listeners) {\n            for (let i = 0, l = listeners.length; i < l; ++i) {\n                if (listeners[i].event === listener.event && listeners[i].callback === listener.callback) {\n                    listeners.splice(i, 1);\n                }\n            }\n        }\n    }\n\n    fire<T>(event: TypedEvent<T>, payload?: T): void {\n        const key = event.key;\n        const listeners = this.listener_map.get(key);\n        if (listeners) {\n            for (let i = listeners.length - 1; i >= 0; --i) {\n                const listener = listeners[i];\n                if (key === listener.event) {\n                    listener.callback.bind(listener.scope || this);\n                    listener.callback(payload);\n                    if (listener.once) {\n                        listeners.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n\n    dispose() {\n        for (const key of this.listener_map.keys()) {\n            this.listener_map.delete(key);\n        }\n    }\n}\n\nexport class EventHub {\n    private static node = new EventNode();\n\n    static on<T>(event: TypedEvent<T>, callback: (payload: T) => void, scope?: any): void {\n        this.node.on(event, callback, scope);\n    }\n\n    static once<T>(event: TypedEvent<T>, callback: (payload: T) => void, scope?: any): void {\n        this.node.once(event, callback, scope);\n    }\n\n    static fire<T>(event: TypedEvent<T>, payload?: T): void {\n        this.node.fire(event, payload);\n    }\n\n    static off<T>(event: TypedEvent<T>, callback: (payload: T) => void, scope?: any) {\n        this.node.off(event, callback, scope);\n    }\n}\n", "import { Float2 } from '../math/simd';\nimport { TypedEvent } from './event';\n\nexport interface PointerEventPayload {\n    button: number;\n    point: Float2;\n    delta: Float2;\n    points?: Float2[];\n}\n\nexport interface MouseEventPayload extends PointerEventPayload {\n    event: MouseEvent;\n}\n\nexport interface KeyEventPayload {\n    keycode: number;\n    event: KeyboardEvent;\n}\n\nexport interface MouseWheelEventPayload {\n    delta: number;\n    delta_x: number;\n    delta_y: number;\n    event: WheelEvent;\n}\n\nexport interface ResizeEventPayload {\n    width: number;\n    height: number;\n}\n\nexport const GlobalEvent = {\n    ForceUpdate: new TypedEvent<MouseEventPayload>('force update'),\n    FileSystemChanged: new TypedEvent('file system changed'),\n\n    MouseMove: new TypedEvent<MouseEventPayload>('mousemove'),\n    MouseDrag: new TypedEvent<MouseEventPayload>('mousedrag'),\n    MouseDown: new TypedEvent<MouseEventPayload>('mousedown'),\n    MouseUp: new TypedEvent<MouseEventPayload>('mouseup'),\n\n    PointerDown: new TypedEvent<PointerEventPayload>('pointer down'),\n    PointerMove: new TypedEvent<PointerEventPayload>('pointer move'),\n    PointerUp: new TypedEvent<PointerEventPayload>('pointer up'),\n\n    TouchStart: new TypedEvent<PointerEventPayload>('touch start'),\n    TouchMove: new TypedEvent<PointerEventPayload>('touch move'),\n    TouchEnd: new TypedEvent<PointerEventPayload>('touch end'),\n\n    KeyDown: new TypedEvent<KeyEventPayload>('keydown'),\n    KeyUp: new TypedEvent<KeyEventPayload>('keyup'),\n    MouseWheel: new TypedEvent<MouseWheelEventPayload>('mousewheel'),\n    Resize: new TypedEvent<ResizeEventPayload>('resize'),\n    XRSessionEnd: new TypedEvent('xr session end'),\n};\n", "export enum Keycode {\n    Break = 3,\n    Backspace = 8,\n    Tab = 9,\n    Clear = 12,\n    Enter = 13,\n    Shift = 16,\n    Ctrl = 17,\n    Alt = 18,\n    Pause = 19,\n    CapsLock = 20,\n    Escape = 27,\n    Space = 32,\n    PageUp = 33,\n    PageDown = 34,\n    End = 35,\n    Home = 36,\n    Left = 37,\n    Up = 38,\n    Right = 39,\n    Down = 40,\n    Select = 41,\n    Print = 42,\n    Execute = 43,\n    PrintScreen = 44,\n    Insert = 45,\n    Delete = 46,\n    help = 47,\n    Key0 = 48,\n    Key1 = 49,\n    Key2 = 50,\n    Key3 = 51,\n    Key4 = 52,\n    Key5 = 53,\n    Key6 = 54,\n    Key7 = 55,\n    Key8 = 56,\n    Key9 = 57,\n    Colon = 58,\n    Less = 60,\n    At = 64,\n    a = 65,\n    b = 66,\n    c = 67,\n    d = 68,\n    e = 69,\n    f = 70,\n    g = 71,\n    h = 72,\n    i = 73,\n    j = 74,\n    k = 75,\n    l = 76,\n    m = 77,\n    n = 78,\n    o = 79,\n    p = 80,\n    q = 81,\n    r = 82,\n    s = 83,\n    t = 84,\n    u = 85,\n    v = 86,\n    w = 87,\n    x = 88,\n    y = 89,\n    z = 90,\n    LeftCommand = 91,\n    RightCommand = 93,\n    Sleep = 95,\n    Num0 = 96,\n    Num1 = 97,\n    Num2 = 98,\n    Num3 = 99,\n    Num4 = 100,\n    Num5 = 101,\n    Num6 = 102,\n    Num7 = 103,\n    Num8 = 104,\n    Num9 = 105,\n    Multiply = 106,\n    Add = 107,\n    Periodic = 108,\n    Subtract = 109,\n    Point = 110,\n    Divide = 111,\n    F1 = 112,\n    F2 = 113,\n    F3 = 114,\n    F4 = 115,\n    F5 = 116,\n    F6 = 117,\n    F7 = 118,\n    F8 = 119,\n    F9 = 120,\n    F10 = 121,\n    F11 = 122,\n    F12 = 123,\n    Semicolon = 186,\n    Equal = 187,\n    Comma = 188,\n    Minus = 189,\n    Period = 190,\n    Slash = 191,\n    BackQuote = 192,\n    BracketL = 219,\n    BackSlash = 220,\n    BracketR = 221,\n    Quote = 222,\n}\n\nexport enum MouseButton {\n    Left = 0,\n    Right = 2,\n    Middle = 1,\n}\n", "import { EventHub } from '../engine/event';\nimport { GlobalEvent } from '../engine/global_event';\nimport { MouseButton } from '../engine/keycode';\nimport { Float2 } from '../math/simd';\n\nexport class BrowserInput {\n    start: Float2 = new Float2();\n    drag_start: Float2 = new Float2();\n    end: Float2 = new Float2();\n    delta: Float2 = new Float2();\n\n    mouse_button: number = -1;\n\n    element?: HTMLElement;\n\n    constructor() {\n        this.bind(window as any);\n    }\n\n    bind(element: HTMLElement): void {\n        this.unbind();\n        element.addEventListener('mousedown', this.onmousedown, false);\n        element.addEventListener('mousemove', this.onmousemove, false);\n        element.addEventListener('mousewheel', this.onmousewheel, false);\n        element.addEventListener('DOMMouseScroll', this.onmousescroll, false);\n        document.addEventListener('keydown', this.onkeydown, false);\n        document.addEventListener('keyup', this.onkeyup, false);\n\n        element.addEventListener('touchstart', this.ontouchstart, false);\n        element.addEventListener('touchmove', this.ontouchmove, false);\n        element.addEventListener('touchend', this.ontouchend, false);\n        element.addEventListener('touchcancel', this.ontouchend, false);\n        this.element = element;\n    }\n\n    unbind() {\n        if (this.element) {\n            this.element.removeEventListener('mousedown', this.onmousedown);\n            this.element.removeEventListener('mousemove', this.onmousemove);\n            this.element.removeEventListener('mousewheel', this.onmousewheel);\n            document.removeEventListener('keydown', this.onkeydown);\n            document.removeEventListener('keyup', this.onkeyup);\n\n            this.element.removeEventListener('touchstart', this.ontouchstart);\n            this.element.removeEventListener('touchmove', this.ontouchmove);\n            this.element.removeEventListener('touchend', this.ontouchend);\n            this.element.removeEventListener('touchcancel', this.ontouchend);\n        }\n    }\n\n    onmousedown = (event: MouseEvent): void => {\n        window.addEventListener('mousemove', this.onmousedrag, false);\n        window.addEventListener('mouseup', this.onmouseup, false);\n\n        this.mouse_button = event.button;\n\n        this.start.set(event.clientX, event.clientY);\n        this.drag_start.copy(this.start);\n        EventHub.fire(GlobalEvent.MouseDown, {\n            button: event.button,\n            point: this.start,\n            delta: this.delta,\n            event,\n        });\n    };\n\n    onmousedrag = (event: MouseEvent): void => {\n        this.end.set(event.clientX, event.clientY);\n        this.delta.copy(this.end).sub(this.drag_start);\n        this.drag_start.copy(this.end);\n        EventHub.fire(GlobalEvent.MouseDrag, {\n            button: this.mouse_button,\n            point: this.end,\n            delta: this.delta,\n            event,\n        });\n    };\n\n    onmousemove = (event: MouseEvent): void => {\n        this.end.set(event.clientX, event.clientY);\n        this.delta.copy(this.end).sub(this.start);\n\n        this.start.copy(this.end);\n        EventHub.fire(GlobalEvent.MouseMove, {\n            button: this.mouse_button,\n            point: this.end,\n            delta: this.delta,\n            event,\n        });\n    };\n\n    onmouseup = (event: MouseEvent): void => {\n        window.removeEventListener('mousemove', this.onmousedrag);\n        window.removeEventListener('mouseup', this.onmouseup);\n        EventHub.fire(GlobalEvent.MouseUp, {\n            button: this.mouse_button,\n            point: this.end,\n            delta: this.delta,\n            event,\n        });\n        this.mouse_button = -1;\n    };\n\n    onmousewheel = (event: Event): void => {\n        const e = event as any;\n\n        let delta = 0;\n        if (e.wheelDelta !== void 0) {\n            delta = e.wheelDelta;\n        } else if (e.deltaY !== void 0) {\n            delta = -e.deltaY;\n        }\n        delta = delta > 0 ? 0.95 : 1.05;\n        EventHub.fire(GlobalEvent.MouseWheel, { delta, event, delta_y: e.deltaY, delta_x: e.deltaX });\n    };\n\n    onmousescroll = (event: any): void => {\n        let delta_x = 0;\n        let delta_y = 0;\n        let delta = 0;\n        delta = event.detail < 0 ? 0.95 : 1.05;\n        if (event.axis === 1) {\n            delta_x = -event.detail * 2;\n        } else if (event.axis === 2) {\n            delta_y = -event.detail * 2;\n        }\n        EventHub.fire(GlobalEvent.MouseWheel, { delta, event, delta_y, delta_x });\n    };\n\n    onkeydown = (event: KeyboardEvent): void => {\n        event.preventDefault();\n        EventHub.fire(GlobalEvent.KeyDown, { keycode: event.keyCode, event });\n    };\n\n    onkeyup = (event: KeyboardEvent): void => {\n        event.preventDefault();\n        EventHub.fire(GlobalEvent.KeyUp, { keycode: event.keyCode, event });\n    };\n\n    ontouchstart = (event: TouchEvent): void => {\n        const touch = event.touches.item(event.touches.length - 1)!;\n        this.start.set(touch.clientX, touch.clientY);\n        this.end.copy(this.start);\n        this.mouse_button = 0;\n        const payload = {\n            button: MouseButton.Left,\n            point: this.end,\n            delta: this.delta,\n        };\n        EventHub.fire(GlobalEvent.TouchStart, payload);\n    };\n\n    ontouchmove = (event: TouchEvent): void => {\n        const touch = event.touches.item(event.touches.length - 1)!;\n        this.end.set(touch.clientX, touch.clientY);\n        this.delta.copy(this.end).sub(this.start);\n\n        this.start.copy(this.end);\n        EventHub.fire(GlobalEvent.TouchMove, {\n            button: MouseButton.Left,\n            point: this.end,\n            delta: this.delta,\n        });\n    };\n\n    ontouchend = (event: TouchEvent): void => {\n        if (event.touches.length > 0) {\n            const touch = event.touches.item(event.touches.length - 1)!;\n            this.end.set(touch.clientX, touch.clientY);\n        }\n        const payload = {\n            button: MouseButton.Left,\n            point: this.end,\n            delta: this.delta,\n        };\n        EventHub.fire(GlobalEvent.TouchEnd, payload);\n    };\n}\n", "import { EventHub } from '../engine/event';\nimport { GlobalEvent } from '../engine/global_event';\nimport { StringMap } from '../std/type';\n\nexport enum InputAxis {\n    Horizontal = 0,\n    Vertical = 1,\n}\n\nexport enum InputButton {\n    Backspace = 8,\n    Tab = 9,\n    Enter = 13,\n    Shift = 16,\n    Ctrl = 17,\n    Alt = 18,\n    Escape = 27,\n    Left = 37,\n    Up,\n    Right,\n    Down,\n    A = 65,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X,\n    Y,\n    Z = 90,\n    Meta = 91,\n    Delete = 127,\n}\n\nexport class Input {\n    private static _instance?: Input;\n    static Instance(): Input {\n        return this._instance || (this._instance = new Input());\n    }\n\n    private axis_map: StringMap<number> = {};\n    private key_map: Set<InputButton> = new Set();\n\n    set_axis(axis: InputAxis, value: number): void {\n        this.axis_map[axis] = value;\n    }\n\n    get_axis(axis: InputAxis): number {\n        return this.axis_map[axis] || 0;\n    }\n\n    constructor() {\n        EventHub.on(GlobalEvent.KeyDown, this.onkeydown);\n        EventHub.on(GlobalEvent.KeyUp, this.onkeyup);\n    }\n\n    private onkeydown = (payload: { keycode: number }): void => {\n        const keycode = payload.keycode;\n        if (keycode === InputButton.Up) {\n            this.set_axis(InputAxis.Vertical, 1);\n        } else if (keycode === InputButton.Down) {\n            this.set_axis(InputAxis.Vertical, -1);\n        } else if (keycode === InputButton.Left) {\n            this.set_axis(InputAxis.Horizontal, -1);\n        } else if (keycode === InputButton.Right) {\n            this.set_axis(InputAxis.Horizontal, 1);\n        }\n\n        this.key_map.add(keycode);\n    };\n\n    private onkeyup = (payload: { keycode: number }): void => {\n        const keycode = payload.keycode;\n        if (keycode === InputButton.Up || keycode === InputButton.Down) {\n            this.set_axis(InputAxis.Vertical, 0);\n        } else if (keycode === InputButton.Left || keycode === InputButton.Right) {\n            this.set_axis(InputAxis.Horizontal, 0);\n        }\n\n        this.key_map.delete(keycode);\n    };\n\n    get_button(button: InputButton): boolean {\n        return this.key_map.has(button);\n    }\n}\n", "import { BrowserInput } from '../input/browser_input';\nimport { Input } from '../input/input';\nimport { memcycle } from '../memory/heap';\nimport { EventHub, TypedEvent } from './event';\nimport { GlobalEvent } from './global_event';\n\nexport const EngineEvent = {\n    BeforeTick: new TypedEvent('before tick'),\n    AfterTick: new TypedEvent('after tick'),\n    BeforeFrame: new TypedEvent('before frame'),\n    AfterFrame: new TypedEvent('after frame'),\n    Frame: new TypedEvent('frame'),\n};\n\nexport class Engine {\n    swap_chain: number = -1;\n\n    frame_index: number = 0;\n    time: number = performance.now() * 0.001;\n    last_time: number = performance.now() * 0.001;\n\n    // delta_time in seconds from last frame to this frame\n    delta_time: number = performance.now() * 0.001; \n\n    // delta_time in seconds from last frame to now\n    get abs_delta_time(): number {\n        return (performance.now() * 0.001) - this.last_time;\n    }\n\n    mouse_input: BrowserInput;\n    input: Input;\n\n    paused: boolean = true;\n\n    constructor() {\n        this.input = Input.Instance();\n        this.mouse_input = new BrowserInput();\n\n        EventHub.on(GlobalEvent.XRSessionEnd, () => {\n            if (this.paused) this.start();\n        });\n    }\n\n    start() {\n        this.tick();\n        this.paused = false;\n    }\n\n    tick = () => {\n        this.time = performance.now() * 0.001;\n        this.delta_time = this.time - this.last_time;\n        EventHub.fire(EngineEvent.BeforeTick);\n        EventHub.fire(EngineEvent.BeforeFrame);\n        EventHub.fire(EngineEvent.Frame);\n        EventHub.fire(EngineEvent.AfterFrame);\n        EventHub.fire(EngineEvent.AfterTick);\n        this.last_time = this.time;\n        memcycle();\n        this.swap_chain = requestAnimationFrame(this.tick);\n    };\n\n    pause() {\n        cancelAnimationFrame(this.swap_chain);\n        this.paused = true;\n    }\n\n    terminate() {}\n}\n", "import { PolyNode } from '../adt/ptree';\nimport { ColorRGBA } from '../math/color';\n\nexport class FrameCaptureNode<T = any> extends PolyNode<FrameCaptureNode<T>> {\n    name: string = 'anonymous';\n    start?: number;\n    end?: number;\n\n    color?: ColorRGBA;\n    description?: string;\n    data?: T;\n\n    type: FrameCaptureNodeType = FrameCaptureNodeType.None;\n}\n\nexport enum FrameCaptureNodeType {\n    None,\n    Pass,\n    Pipeline,\n    ConstantBuffer,\n    Draw,\n    Mesh\n}\n\nexport class Profiler<T = any> {\n    root: FrameCaptureNode<T>;\n    node: FrameCaptureNode<T>;\n\n    constructor() {\n        this.root = this.node = new FrameCaptureNode<T>();\n    }\n\n    trace_start(name: string, description?: string, data?: any, type: FrameCaptureNodeType = FrameCaptureNodeType.None) {\n        const start = performance.now();\n        const node = new FrameCaptureNode();\n\n        node.name = name;\n        node.start = start;\n        node.description = description;\n        node.data = data;\n        node.type = type;\n\n        this.node.add(node);\n        this.node = node;\n    }\n\n    trace_end(name: string) {\n        const nodes = [];\n        let top: FrameCaptureNode | undefined = this.node;\n        while (top && top.name !== name) {\n            nodes.push(top);\n            top = top.parent;\n        }\n\n        if (top === undefined) {\n            throw `invalid trace end ${name}`;\n        } else {\n            const end = performance.now();\n            for (let i = 0; i < nodes.length; i++) {\n                const node = nodes[i];\n                node.end = end;\n            }\n            top.end = end;\n            this.node = top.parent!;\n        }\n    }\n\n    reset() {\n        this.root = this.node = new FrameCaptureNode();\n        this.root.start = performance.now();\n    }\n}\n", "export interface GFXTextureHandle {\n\n}\n\nexport enum GFXRenderGroup {\n    Opaque = 0,\n    AlphaClip,\n    Transparent,\n    Overlay,\n}", "import { BufferRange } from '.';\n\nexport class BlockAllocator {\n\n    tail: number = 0;\n    heap_size: number = 0;\n\n    valid_set: Set<BufferRange> = new Set();\n    free_set: Set<BufferRange> = new Set();\n    free_size: number = 0;\n\n    constructor(public block_size: number) {}\n\n    allocate(count: number): BufferRange {\n        const byte_offset = this.tail;\n        const byte_length = count * this.block_size;\n        this.tail += byte_length;\n        this.heap_size = Math.max(this.heap_size, this.tail);\n        return { byte_offset, byte_length };\n    }\n\n    free(range: BufferRange) {\n        this.free_set.add(range);\n        this.free_size += range.byte_length;\n    }\n\n    rearrange() {\n        this.free_set.clear();\n        let offset = 0;\n        for (const range of this.valid_set) {\n            range.byte_offset = offset;\n            offset += range.byte_length;\n        }\n        this.tail = offset;\n        this.heap_size = Math.max(this.heap_size, this.tail);\n    }\n\n}", "// typescript\ntype TypedArray =\nUint8ClampedArray |\nUint8Array |\nInt8Array |\nUint16Array |\nInt16Array |\nUint32Array |\nInt32Array |\nFloat32Array |\nFloat64Array |\nBigInt64Array;\n\nexport interface Color {\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n}\n\n// metal\nexport interface StorageMode {}\nexport const Shared: StorageMode = 0;\nexport const Managed: StorageMode = 1;\nexport const Private: StorageMode = 2;\nexport const Memoryless: StorageMode = 3;\n\nexport interface CPUCacheMode {}\nexport const DefaultCacheMode: CPUCacheMode = 0;\nexport const WriteCombined: CPUCacheMode = 1;\n\nexport interface HazardTrackingMode {}\nexport const DefaultHazardTrackingMode : HazardTrackingMode = 0;\nexport const Untracked: HazardTrackingMode = 1;\nexport const Tracked: HazardTrackingMode = 2;\n\nexport const ResourceCPUCacheModeShift = 0;\nexport const ResourceStorageModeShift = 4;\nexport const ResourceHazardTrackingModeShift = 8;\n\nexport interface ResourceOption {}\nexport const ResourceStorageModeShared: ResourceOption = (Shared as number) << ResourceStorageModeShift;\nexport const ResourceStorageModeManaged: ResourceOption = (Managed as number) << ResourceStorageModeShift;\nexport const ResourceStorageModePrivate: ResourceOption = (Private as number) << ResourceStorageModeShift;\nexport const ResourceStorageModeMemoryLess: ResourceOption = (Memoryless as number) << ResourceStorageModeShift;\n\nexport const ResourceTrackingModeDefault: ResourceOption = (DefaultHazardTrackingMode as number) << ResourceHazardTrackingModeShift;\nexport const ResourceTrackingModeUntracked: ResourceOption = (Untracked as number) << ResourceHazardTrackingModeShift;\nexport const ResourceTrackingModeTracked: ResourceOption = (Tracked as number) << ResourceHazardTrackingModeShift;\n\nexport const ResourceCPUCacheModeDefault: ResourceOption = (DefaultCacheMode as number) << ResourceCPUCacheModeShift;\nexport const ResourceCPUCacheModeWriteCombined: ResourceOption = (WriteCombined as number) << ResourceCPUCacheModeShift;\n\nexport interface TextureType {}\nexport const Texture1D: TextureType = 0;\nexport const Texture1DArray: TextureType = 1;\nexport const Texture2D: TextureType = 2;\nexport const Texture2DArray: TextureType = 3;\nexport const Texture2DMultisample: TextureType = 4;\nexport const TextureCube: TextureType = 5;\nexport const TextureCubeArray: TextureType = 6;\nexport const Texture3D: TextureType = 7;\nexport const Texture2DMultisampleArray: TextureType = 8;\nexport const TextureBuffer: TextureType = 9;\n\nexport interface TextureUsage {}\nexport const Unknown: TextureUsage = 0;\nexport const ShaderRead: TextureUsage = 1;\nexport const ShaderWrite: TextureUsage = 2;\nexport const ShaderTarget: TextureUsage = 4;\nexport const PixelFormatView: TextureUsage = 8;\n\nexport interface PixelFormat {}\nexport const A8Unorm: PixelFormat = 1;\nexport const R8Unorm: PixelFormat = 10;\nexport const R8Unorm_sRGB: PixelFormat = 11;\nexport const R8Snorm: PixelFormat = 12;\nexport const R8Uint: PixelFormat = 13;\nexport const R8Sint: PixelFormat = 14;\nexport const R16Unorm: PixelFormat = 20;\nexport const R16Snorm: PixelFormat = 22;\nexport const R16Uint: PixelFormat = 23;\nexport const R16SInt: PixelFormat = 24;\nexport const R16Float: PixelFormat = 25;\nexport const RG8Unorm: PixelFormat = 30;\nexport const RG8Unorm_sRGB: PixelFormat = 31;\nexport const RG8Snorm: PixelFormat = 32;\nexport const RG8Uint: PixelFormat = 33;\nexport const RG8Sint: PixelFormat = 34;\n\nexport const B5G6R5Unorm: PixelFormat = 40;\nexport const A1BGR5Unorm: PixelFormat = 41;\nexport const ABGR4Unorm: PixelFormat = 42;\nexport const BGR5A1Unorm: PixelFormat = 43;\n\nexport const R32Uint: PixelFormat = 53;\nexport const R32Sint: PixelFormat = 54;\nexport const R32Float: PixelFormat = 55;\nexport const RG16Unorm: PixelFormat = 60;\nexport const RG16Snorm: PixelFormat = 62;\nexport const RG16Uint: PixelFormat = 63;\nexport const RG16SInt: PixelFormat = 64;\nexport const RG16Float: PixelFormat = 65;\n\nexport const RGBA8Unorm: PixelFormat = 70;\nexport const RGBA8Unorm_sRGB: PixelFormat = 71;\nexport const RGBA8Snorm: PixelFormat = 72;\nexport const RGBA8Uint: PixelFormat = 73;\nexport const RGBA8Sint: PixelFormat = 74;\nexport const BGRA8Unorm: PixelFormat = 80;\nexport const BGRA8Unorm_sRGB: PixelFormat = 81;\n\nexport const RGB10A2Unorm: PixelFormat = 90;\nexport const RGB10A2Uint: PixelFormat = 91;\n\nexport const RG11B10Float: PixelFormat = 92;\nexport const RGB9E5Float: PixelFormat = 93;\nexport const BGR10A2Unorm: PixelFormat = 94;\n\nexport const RG32Uint: PixelFormat = 103;\nexport const RG32Sint: PixelFormat = 104;\nexport const RG32Float: PixelFormat = 105;\n\nexport const RGBA16Unorm: PixelFormat = 110;\nexport const RGBA16Snorm: PixelFormat = 112;\nexport const RGBA16Uint: PixelFormat = 113;\nexport const RGBA16Sint: PixelFormat = 114;\nexport const RGBA16Float: PixelFormat = 115;\n\nexport const BGR10_XR: PixelFormat = 554;\nexport const RGB10_XR_sRGB: PixelFormat = 555;\n\nexport const RGBA32Uint: PixelFormat = 123;\nexport const RGBA32Sint: PixelFormat = 124;\nexport const RGBA32Float: PixelFormat = 125;\n\n// depth format\nexport interface DepthStencilFormat extends PixelFormat {}\nexport const Depth16Unorm: DepthStencilFormat = 250;\nexport const Depth32Float: DepthStencilFormat = 252;\nexport const Stencil8: DepthStencilFormat = 253;\nexport const Depth32Float_Stencil8: DepthStencilFormat = 260;\nexport const X32_Stencil8: DepthStencilFormat = 260;\n\n// TODO: compressed format export\n\nexport interface DepthCompareFunction {}\nexport const Never: DepthCompareFunction = 0;\nexport const Less: DepthCompareFunction = 1;\nexport const Equal: DepthCompareFunction = 2;\nexport const LessEqual: DepthCompareFunction = 3;\nexport const Greater: DepthCompareFunction = 4;\nexport const NotEqual: DepthCompareFunction = 5;\nexport const GreaterEqual: DepthCompareFunction = 6;\nexport const Always: DepthCompareFunction = 7;\n\nexport interface CullMode {}\nexport const NoneCull: CullMode = 0;\nexport const Front: CullMode = 1;\nexport const Back: CullMode = 2;\n\nexport interface Winding {}\nexport const Clockwise: Winding = 0;\nexport const CounterClockwise: Winding = 1;\n\nexport interface DepthClipMode {}\nexport const DepthClip: DepthClipMode = 0;\nexport const DepthClamp: DepthClipMode = 1;\n\nexport interface PrimitiveType {}\nexport const Point: PrimitiveType = 0;\nexport const Line: PrimitiveType = 1;\nexport const LineStrip: PrimitiveType = 2;\nexport const Triangle: PrimitiveType = 3;\nexport const TriangleStripe: PrimitiveType = 4;\n\nexport interface IndexType {}\nexport const Uint16Index: IndexType = 0;\nexport const Uint32Index: IndexType = 1;\n\nexport interface LoadAction {}\nexport interface StoreAction {}\nexport const DontCare: LoadAction & StoreAction = 0;\nexport const Load: LoadAction = 1;\nexport const Clear: LoadAction = 2;\nexport const Store: StoreAction = 1;\nexport const MultisampleResolve: StoreAction = 2;\nexport const StoreAndMultisampleResolve: StoreAction = 3;\nexport const StoreUnknown: StoreAction = 4;\nexport const CustomSampleDepthStore: StoreAction = 5;\n\nexport interface BlendFactor {}\nexport const Zero: BlendFactor = 0;\nexport const One: BlendFactor = 1;\n\nexport const SrcColor: BlendFactor = 2;\nexport const OneMinusSrcColor: BlendFactor = 3;\nexport const SrcAlpha: BlendFactor = 4;\nexport const OneMinusSrcAlpha: BlendFactor = 5;\n\nexport const DstColor: BlendFactor = 6;\nexport const OneMinusDstColor: BlendFactor = 7;\nexport const DstAlpha: BlendFactor = 8;\nexport const OneMinusDstAlpha: BlendFactor = 9;\n\nexport const SrcAlphaSaturated: BlendFactor = 10;\n\nexport const BlendColor: BlendFactor = 11;\nexport const OneMinusBlendColor: BlendFactor = 12;\nexport const BlendAlpha: BlendFactor = 13;\nexport const OneMinusBlendAlpha: BlendFactor = 14;\n\nexport interface BlendOperation {}\nexport const Add: BlendOperation = 0;\nexport const Subtract: BlendOperation = 1;\nexport const ReverseSubtract: BlendOperation = 2;\nexport const Min: BlendOperation = 3;\nexport const Max: BlendOperation = 4;\n\nexport interface DispatchType {}\nexport const Serial: DispatchType = 0;\nexport const Concurrent: DispatchType = 1;\n\nexport interface RenderCommandEncoder {\n    label: string;\n\n    set_viewport(x: number, y: number, width: number, height: number, near: number, far: number): void;\n    set_cull_mode(mode: CullMode): void;\n    set_depth_clip_mode(mode: DepthClipMode): void;\n    set_front_facing(facing: Winding): void;\n    set_render_pipeline_state(pipeline_state: RenderPipelineState): void;\n    set_depth_stencil_state(depth_stencil_state: DepthStencilState): void;\n\n    push_debug_group(name: string): void;\n    pop_debug_group(): void;\n\n    set_vertex_buffer(buffer: GPUBuffer, offset: number, index: number): void;\n    set_vertex_texture(texture: GPUTexture, index: number): void;\n    set_fragment_buffer(buffer: GPUBuffer, offset: number, index: number): void;\n    set_fragment_texture(texture: GPUTexture, index: number): void;\n\n    draw_primitive(type: PrimitiveType, start: number, count: number): void;\n    draw_primitive(type: PrimitiveType, start: number, count: number, instance_count: number): void;\n    draw_primitive_indexed(type: PrimitiveType, index_count: number, index_type: IndexType, buffer: GPUBuffer, buffer_offset: number): void;\n    draw_primitive_indexed(type: PrimitiveType, index_count: number, index_type: IndexType, buffer: GPUBuffer, buffer_offset: number, instance_count: number): void;\n\n    // TODO indirect buffer draw\n    end_encoding(): void;\n}\n\nexport interface ComputeCommandEncoder {\n    label: string;\n}\n\nexport interface CommandBuffer {\n    create_render_command_encoder(render_pass_descriptor: RenderPassDescriptor): RenderCommandEncoder;\n    // create_compute_command_encoder(): ComputeCommandEncoder;\n\n    present(drawable: Drawable): void;\n    commit(): void;\n}\n\nexport interface CommandQueue {\n    create_command_buffer(): CommandBuffer;\n}\n\nexport interface GPUBuffer {\n    upload(data: TypedArray): void;\n}\n\nexport interface GPUProgram {}\n\nexport interface GPUTexture {\n    upload(data: TypedArray): void;\n}\n\nexport interface Library {\n    create_function(name: string): GPUProgram;\n}\n\nexport interface RenderPassAttachmentDescriptor {\n    texture: GPUTexture;\n    level: number;\n    slice: number;\n    load_action: LoadAction;\n    store_action: StoreAction;\n}\n\nexport interface RenderPassColorAttachmentDescriptor extends RenderPassAttachmentDescriptor {\n    clear_color: Color;\n}\n\nexport interface RenderPassDepthAttachmentDescriptor extends RenderPassAttachmentDescriptor {\n    clear_depth: number;\n}\n\nexport interface RenderPassStencilAttachmentDescriptor extends RenderPassAttachmentDescriptor {\n    clear_stencil: number;\n}\n\nexport interface RenderPassDescriptor {\n    color_attachment_at(index: number): RenderPassColorAttachmentDescriptor;\n    depth_attachment: RenderPassDepthAttachmentDescriptor;\n    stencil_attachment: RenderPassStencilAttachmentDescriptor;\n}\n\nexport interface CounterSampleBuffer {\n    label: string;\n    sample_count: number;\n}\n\nexport interface ComputePassSampleBufferAttachmentDescriptor {\n    sample_buffer: CounterSampleBuffer;\n    encoder_sample_start_index: number;\n    encoder_sample_end_index: number;\n}\n\nexport interface ComputePassDescriptor {\n    dispatch_type: DispatchType;\n    get_sample_buffer_attachment_at(index: number): ComputePassSampleBufferAttachmentDescriptor;\n}\n\nexport interface ComputePipelineDescriptor {\n    label: string;\n    compute_function: GPUProgram;\n    // thread_group_size_is_multiple_of_thread_execution_width: boolean;\n    // max_total_threads_per_thread_group: number;\n}\n\n// this might be unnecessary requirement\nexport interface VertexDescriptor {}\n\nexport interface RenderPipelineColorAttachmentDescriptor {\n    pixel_format: PixelFormat;\n    blend_enable: boolean;\n\n    src_rgb_blend_factor: BlendFactor;\n    src_alpha_blend_factor: BlendFactor;\n\n    dst_rgb_blend_factor: BlendFactor;\n    dst_alpha_blend_factor: BlendFactor;\n\n    rgb_blend_operation: BlendOperation;\n    alpha_blend_operation: BlendOperation;\n\n    // color_write: boolean; // is color mask int metal\n}\n\nexport interface ComputePipelineDescriptor {}\n\nexport interface  RenderPipelineDescriptor {\n    label: string;\n\n    sample_count: number;\n    vertex_function: GPUProgram;\n    fragment_function: GPUProgram;\n\n    color_attachment_at(index: number): RenderPipelineColorAttachmentDescriptor;\n    depth_attachment_pixel_format: DepthStencilFormat;\n    stencil_attachment_pixel_format: DepthStencilFormat\n}\n\nexport interface DepthStencilDescriptor {\n    depth_write: boolean;\n    compare_function: DepthCompareFunction;\n}\n\nexport interface TextureDescriptor {\n    type: TextureType;\n    pixel_format: PixelFormat;\n    width: number;\n    height: number;\n    depth: number;\n    mipmap_level_count: number;\n    sample_count: number;\n    array_length: number;\n\n    options: ResourceOption;\n    cpu_cache_mode: CPUCacheMode;\n    storage_mode: StorageMode;\n    hazard_tracking_mode: HazardTrackingMode;\n\n    usage: TextureUsage;\n    allow_gpu_optimized_contents: boolean;\n}\n\nexport interface RenderPipelineState {}\nexport interface ComputePipelineState {}\nexport interface DepthStencilState {}\n\nexport interface MetalScriptDevice {\n    create_command_queue(): CommandQueue;\n    create_buffer(size: number, options: ResourceOption): GPUBuffer;\n    create_texture(descriptor: TextureDescriptor): GPUTexture;\n    create_library_from_source(source: string): Library | null;\n\n    create_render_pipeline_state(descriptor: RenderPipelineDescriptor): RenderPipelineState | null;\n    create_depth_stencil_state(descriptor: DepthStencilDescriptor): DepthStencilState | null;\n    // create_compute_pipeline_state(descriptor: ComputePipelineDescriptor): ComputePipelineState | null;\n\n    create_texture_descriptor(): TextureDescriptor;\n    create_render_pipeline_descriptor(): RenderPipelineDescriptor;\n    create_depth_stencil_descriptor(): DepthStencilDescriptor;\n    // create_compute_pipeline_descriptor(): RenderPipelineDescriptor;\n\n    // prefer_frame_per_second(fps: number): void;\n}\n\nexport interface Drawable {}\nexport interface BackBuffer {\n    render_pass_descriptor: RenderPassDescriptor;\n    drawable: Drawable;\n    command_buffer: CommandBuffer;\n    color_pixel_format: PixelFormat;\n    depth_stencil_pixel_format: DepthStencilFormat;\n}", "import { Camera, MaterialBlock, SubMesh } from '../engine';\nimport { GFXDeviceOptions, GPUAction } from '../gfx';\nimport { GFXEncoder } from '../gfx/gfx_encoder';\nimport { ColorRGBA } from '../math';\nimport { GPUPass, Pipeline, WebGLDraw } from '../webgl';\nimport { GPUMesh } from '../webgl/mesh';\n\nexport class MetalEncoder implements GFXEncoder {\n    constructor(options: GFXDeviceOptions) {}\n    set_display_size(width: number, height: number): void {}\n    set_viewport(x: unknown, y: unknown, width: unknown, height: unknown): void {}\n    set_camera(camera: Camera): void {}\n    set_time(t: number): void {}\n    set_pass(pass?: GPUPass | undefined, description?: string | undefined): void {}\n    set_clear_color(color: ColorRGBA): void {}\n    clear(action?: GPUAction | undefined): void {}\n    set_pipeline(pipeline: Pipeline): void {}\n    set_scissor(x?: number | undefined, y?: number | undefined, width?: number | undefined, height?: number | undefined): void {}\n    set_material(material: any, description?: string | undefined): void {}\n    set_material_block(material: MaterialBlock, description?: string): void {}\n    set_draw(draw: WebGLDraw, chunk?: any, description?: string | undefined): void {}\n    set_mesh(mesh: GPUMesh): void {}\n    draw_mesh(mesh: GPUMesh, description?: string | undefined): void {}\n    draw_submesh(submesh: SubMesh, description?: string | undefined): void {}\n    commit(): void {}\n}", "import { TypedArray } from '../std/type';\nimport { WebGLDrawDescriptor } from '../webgl/draw';\nimport { GPUPassDescriptor } from '../webgl/pass';\nimport { GPUPipelineDescriptor } from '../webgl/pipeline';\nimport { WebGLTextureDescriptor } from '../webgl/texture';\nimport { GFXDeviceOptions } from './gfx_device';\nimport { RenderResourceType } from './render.resource';\n\nexport enum RenderCommandType {\n    CreateDevice = 0,\n    DeviceResize,\n    GetExtension,\n    CreateTexture,\n    CreateBuffer,\n    CreateDraw,\n    CreatePipeline,\n    CreatePass,\n    ShareBuffer,\n    UpdateTexture,\n    UpdateBuffer,\n    ExecuteCommandBuffer,\n    ExecuteCommandQueue,\n}\n\nexport interface RenderResource {\n    type: RenderResourceType;\n}\n\nexport interface RenderCommand {\n    type: RenderCommandType;\n}\n\nexport interface RCreateDevice extends RenderCommand {\n    canvas: OffscreenCanvas; // must call transferControlToOffscreen before passing to worker\n    options: GFXDeviceOptions;\n}\n\nexport interface RDeviceResize extends RenderCommand {\n    width: number;\n    height: number;\n    pixel_width: number;\n    pixel_height: number;\n}\n\nexport interface RGetExtension extends RenderCommand {\n    extension: string;\n}\n\nexport interface RCreateTexture extends RenderCommand {\n    resource_id: number;\n    descriptor: WebGLTextureDescriptor;\n}\n\nexport interface RCreateBuffer extends RenderCommand {\n    buffer: TypedArray;\n}\n\nexport interface RShareBuffer extends RenderCommand {\n    resource_id: number;\n    buffer: SharedArrayBuffer;\n}\n\nexport interface RCreateDraw extends RenderCommand {\n    resource_id: number;\n    descriptor: WebGLDrawDescriptor;\n}\n\nexport interface RCreatePipeline extends RenderCommand {\n    resource_id: number;\n    descriptor: GPUPipelineDescriptor;\n}\n\nexport interface RCreatePass extends RenderCommand {\n    resource_id: number;\n    descriptor: GPUPassDescriptor;\n}\n\nexport interface RUpdateTexture extends RenderCommand {\n    resource_id: number; // shared buffer id\n    offset: number;\n    size: number;\n\n    x?: number;\n    y?: number;\n    width?: number;\n    height?: number;\n}\n\nexport interface RDisposeResource extends RenderCommand {\n    resource_id: number;\n}\n\nexport interface RExecuteCommandBuffer extends RenderCommand {\n    buffer: ArrayBuffer;\n}\n\nexport interface RExecuteCommandQueue extends RenderCommand {\n    buffer: ArrayBuffer;\n}\n\nexport type RenderCommandHandler<T extends RenderCommand> = (command: T) => void;\nconst command_handlers = new Map<RenderCommandType, RenderCommandHandler<any>>();\n\nexport function render_register_command_handler<T extends RenderCommand>(type: RenderCommandType, handler: RenderCommandHandler<T>) {\n    command_handlers.set(type, handler);\n}\n\nexport function render_command_handler_get<T extends RenderCommand>(type: RenderCommandType): RenderCommandHandler<T> | undefined {\n    return command_handlers.get(type);\n}\n", "import { WorkerResponse } from '../worker/web_worker';\nimport { RenderCommand, RenderCommandType, render_command_handler_get } from './render.command';\n\nfunction post_message(task_id: number, data: any, message?: string) {\n    const event = { task_id, success: true, message, data } as WorkerResponse;\n    self.postMessage(event);\n}\n\nfunction post_message_error(task_id: number, data: any, message?: string) {\n    const event = { task_id, success: false, message, data } as WorkerResponse;\n    self.postMessage(event);\n}\n\nexport function render_worker_command_message(message: MessageEvent) {\n    const task_id = message.data.task_id;\n    const command = message.data as RenderCommand;\n    const handler = render_command_handler_get(command.type);\n    if (handler) {\n        console.log(`<RenderThreadWebGL> execute id: ${task_id} type: ${RenderCommandType[command.type]}`);\n        handler(command);\n    } else {\n        const { type } = command;\n        post_message_error(task_id, { type }, `Command handler for type ${command.type} not found.`);\n    }\n}\n", "import { render_worker_command_message } from '../gfx/render.worker';\n\ninterface GPUAdapter {\n    requestDevice(): Promise<GFXDevice | undefined>;\n}\ninterface GFXDevice {}\n\ninterface GPUContext {\n    adapter: GPUAdapter;\n    device: GFXDevice;\n}\n\nexport async function webgpu_device_create(): Promise<GPUContext | undefined> {\n    const gpu = (navigator as any).gpu;\n    if (!gpu) return;\n    const adapter: GPUAdapter = await gpu.requestAdapter();\n    if (!adapter) return;\n    const device = await adapter.requestDevice();\n    if (!device) return;\n    return { adapter, device } as GPUContext;\n}\n\nself.onmessage = render_worker_command_message;\n", "import { MaterialBlock, SubMesh } from '../engine';\nimport { Camera } from '../engine/camera';\nimport { GFXDeviceOptions } from '../gfx';\nimport { GPUAction } from '../gfx/gfx_device';\nimport { GFXEncoder } from '../gfx/gfx_encoder';\nimport { ColorRGBA } from '../math/color';\nimport { WebGLDraw } from '../webgl/draw';\nimport { GPUMesh } from '../webgl/mesh';\nimport { GPUPass } from '../webgl/pass';\nimport { Pipeline } from '../webgl/pipeline';\n\nexport class WebGPUEncoder implements GFXEncoder {\n    constructor(options: GFXDeviceOptions) {}\n    set_display_size(width: number, height: number): void {}\n    set_viewport(x: number, y: number, width: number, height: number): void {}\n    set_camera(camera: Camera): void {}\n    set_action(action: GPUAction): void {}\n    set_pass(pass?: GPUPass, description?: string): void {}\n    set_clear_color(color: ColorRGBA): void {}\n    clear(action?: GPUAction): void {}\n    set_pipeline(pipeline: Pipeline): void {}\n    set_scissor(x?: number, y?: number, width?: number, height?: number): void {}\n    set_material(material: any, description?: string): void {}\n    set_material_block(material: MaterialBlock, description?: string): void {}\n    set_draw(draw: WebGLDraw, chunk?: any, description?: string): void {}\n    set_mesh(mesh: GPUMesh): void {}\n    draw_mesh(mesh: GPUMesh, description?: string | undefined): void {}\n    draw_submesh(submesh: SubMesh, description?: string | undefined): void {}\n    commit(): void {}\n}", "import '@union_native/metal.js';\nimport { EventHub, GlobalEvent } from '../engine';\nimport { ColorRGBA } from '../math';\nimport { MetalEncoder } from '../metal/encoder';\nimport { WebGLEncoder, create_block_global } from '../webgl';\nimport { WebGPUEncoder } from '../webgpu';\nimport { GFXEncoder } from './gfx_encoder';\n\nexport enum GFXBackend {\n    WebGL = 'public/src/worker/webgl.render/wgl.worker.js',\n    WebGPU = 'public/src/worker/webgpu.render/wgpu.worker.js',\n    Metal = 'public/src/worker/metal.render/mtl.worker.js',\n}\n\nexport type GL = WebGL2RenderingContext;\n\nexport interface GFXDeviceOptions extends WebGLContextAttributes {\n    canvas?: HTMLCanvasElement\n    display_ratio?: number;\n    preserve_buffer?: boolean;\n    multi_thread_rendering?: boolean;\n    backend?: GFXBackend;\n    xr_enabled?: boolean;\n}\n\nexport enum GPUActionType {\n    ClearColor = 1 << 0,\n    ClearDepth = 1 << 1,\n    ClearStencil = 1 << 2,\n    ClearAll = ClearColor | ClearDepth | ClearStencil,\n    Ignore,\n}\n\nexport interface GPUAction {\n    type: GPUActionType;\n    clear_color: ColorRGBA;\n    clear_depth: number;\n}\n\nconst default_clear_action = {\n    type: GPUActionType.ClearAll,\n    clear_color: new ColorRGBA(0, 0, 0, 0),\n    clear_depth: 1,\n} as GPUAction;\n\nexport enum GPUStorageMode {\n    Shared,\n    GPUOnly,\n    Memoryless,\n}\n\nexport class GFXDevice {\n    private static current_device: GFXDevice;\n    static CurrentDevice(): GFXDevice {\n        return GFXDevice.current_device;\n    }\n\n    width: number = 1;\n    height: number = 1;\n\n    display_ratio: number = 1;\n\n    display_width: number = 1;\n    display_height: number = 1;\n\n    backend: GFXBackend = GFXBackend.WebGL;\n    encoder: GFXEncoder;\n\n    constructor(options: GFXDeviceOptions = {}) {\n        GFXDevice.current_device = this;\n        this.display_ratio = options.display_ratio ?? 1;\n        this.backend = options.backend ?? GFXBackend.WebGL;\n        if (options.backend === GFXBackend.Metal) {\n            this.encoder = new MetalEncoder(options);\n        } else if (options.backend === GFXBackend.WebGPU) {\n            this.encoder = new WebGPUEncoder(options);\n        } else {\n            this.encoder = new WebGLEncoder(options);\n            this.set_size(window.innerWidth, window.innerHeight);\n        }\n        console.log(`<GPUDevice> active backend: ${this.backend}`);\n        this.encoder.set_viewport(0, 0, this.width, this.height);\n        create_block_global();\n    }\n\n    set_size(width: number, height: number): this {\n        this.display_width = width;\n        this.display_height = height;\n\n        const pixel_width = Math.floor(width * this.display_ratio);\n        const pixel_height = Math.floor(height * this.display_ratio);\n\n        this.width = pixel_width;\n        this.height = pixel_height;\n\n        this.encoder.set_display_size(pixel_width, pixel_height);\n        this.encoder.set_viewport(0, 0, pixel_width, pixel_height);\n\n        EventHub.fire(GlobalEvent.Resize, { width, height });\n        return this;\n    }\n}\n\nexport function gfx_device_get(): GFXDevice {\n    return GFXDevice.CurrentDevice();\n}\n\nexport function gfx_encoder_get<T extends GFXEncoder>(): T {\n    return gfx_device_get().encoder as T;\n}\n", "export type Optional<T> = T | null;\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type StringMap<V = any> = { [key: string]: V };\nexport type NumberMap<V = any> = { [key: number]: V };\nexport type EnumMap<T extends string, V> = { [key in T]: V };\n\nexport type TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array;\n\nexport function is_string(obj: any): obj is string {\n    return typeof obj === 'string' || obj instanceof String;\n}\n\nexport function is_number(obj: any): obj is number {\n    return typeof obj === 'number' && isFinite(obj);\n}\n\nexport function has_suffix(input: string, suffix: string[]): string | false {\n    const name = input.split(/\\./g).pop();\n    if (!name) return false;\n    return suffix.indexOf(name) !== -1 ? name : false;\n}\n\nexport function default_value<T>(value: T | undefined, default_value: T): T {\n    return value === undefined ? default_value : value;\n}\n\nexport function deref<T extends object>(ref: WeakRef<T>): T | undefined {\n    if (ref === undefined) return undefined;\n    return ref.deref();\n}\n", "export enum WorkerState {\n    Idle,\n    Running,\n}\n\nexport type WorkerMessage = { task_id: number } & any;\n\nexport interface WorkerResponse {\n    task_id: number;\n    success: boolean;\n    message: string | undefined;\n    data: any;\n}\n\nexport interface WorkerRequest {\n    message: any;\n    buffers?: ArrayBuffer[];\n    callback?: any;\n}\n\nexport class WebWorker {\n    private state = WorkerState.Idle;\n    private queue: WorkerRequest[] = [];\n    public worker_name: string = 'anonymous';\n    private task_id = 0;\n\n    private callbacks = new Map<number, Function>();\n\n    get available(): boolean {\n        return this.state === WorkerState.Idle;\n    }\n\n    constructor(private worker: Worker, private auto_terminate: boolean = false) {\n        this.worker.onmessage = this.onmessage;\n    }\n\n    send(message: WorkerMessage, buffers?: ArrayBuffer[], callback?: (data: any) => void): boolean {\n        const task_id = this.task_id++;\n        message.task_id = task_id;\n        if (this.state !== WorkerState.Idle) {\n            this.queue.push({ message, buffers, callback });\n            return false;\n        }\n        this.worker.postMessage(message, buffers);\n        this.worker.onmessage = this.onmessage;\n        if (callback) this.callbacks.set(task_id, callback);\n        return true;\n    }\n\n    send_async<T>(message: WorkerMessage, buffers: ArrayBuffer[] = []): Promise<T> {\n        return new Promise((resolve) => {\n            this.send(message, buffers, resolve);\n        });\n    }\n\n    on_response?: (response: WorkerResponse) => void;\n\n    private onmessage = (event: MessageEvent) => {\n        this.state = WorkerState.Idle;\n        const response = event.data as WorkerResponse;\n        const { task_id } = response;\n        if (!response.success) {\n            console.error(`<WebWorker> error: ${response.message || 'undefined worker error'}`);\n        } else {\n            console.log(`<WebWorker> worker ${this.worker_name} execute success.`);\n        }\n        if (this.on_response) this.on_response(response);\n        if (task_id !== undefined && this.callbacks.has(task_id)) {\n            const callback = this.callbacks.get(task_id)!;\n            if (response.success) callback(response.data);\n            this.callbacks.delete(task_id);\n        }\n        if (this.queue.length > 0) {\n            const request = this.queue.shift()!;\n            this.send(request.message, request.buffers, request.callback);\n        } else {\n            if (this.auto_terminate) {\n                this.worker.terminate();\n            }\n        }\n    };\n}\n", "import { is_string, TypedArray } from '../std/type';\nimport { WebGLTextureDescriptor } from '../webgl/texture';\nimport { WebWorker } from '../worker/web_worker';\nimport { GFXBackend, GFXDeviceOptions } from './gfx_device';\nimport { RCreateDevice, RDeviceResize, RenderCommandType } from './render.command';\n\nexport class GFXDeviceClient {\n    private resource_id = 0;\n    private get_resource_id() {\n        return this.resource_id++;\n    }\n    private render_thread: WebWorker;\n\n    constructor(public backend: GFXBackend) {\n        const worker = new Worker(backend as string, { name: 'RenderThread' });\n        this.render_thread = new WebWorker(worker);\n    }\n\n    create_device(canvas: HTMLCanvasElement, options: GFXDeviceOptions): number {\n        const offscreen_canvas = canvas.transferControlToOffscreen();\n        const resource_id = this.get_resource_id();\n        const command = { resource_id, type: RenderCommandType.CreateDevice, canvas: offscreen_canvas, options } as RCreateDevice;\n        this.render_thread.send(command, [offscreen_canvas as any]);\n        return resource_id;\n    }\n\n    create_texture(descriptor: WebGLTextureDescriptor): number {\n        const resource_id = this.get_resource_id();\n        const command = { resource_id, type: RenderCommandType.CreateTexture, descriptor };\n        const buffers = texture_descriptor_collect_buffer(descriptor);\n        this.render_thread.send(command, buffers);\n        return resource_id;\n    }\n\n    update_texture(resource_id: number) {}\n\n    resize(width: number, height: number, pixel_width: number, pixel_height: number) {\n        const type = RenderCommandType.DeviceResize;\n        const command = { type, width, height, pixel_width, pixel_height } as RDeviceResize;\n        this.render_thread.send(command);\n    }\n}\n\nfunction texture_descriptor_collect_buffer(descriptor: WebGLTextureDescriptor): ArrayBuffer[] {\n    const { source, mipmaps } = descriptor;\n    const buffers: ArrayBuffer[] = [];\n    const buffer_set = new Set();\n\n    if (source && !is_string(source)) {\n        buffers.push((source as TypedArray).buffer);\n        buffer_set.add((source as TypedArray).buffer);\n    }\n\n    for (const mipmap of mipmaps) {\n        if (mipmap && !is_string(mipmap) && !buffer_set.has(mipmap.data.buffer)) {\n            buffers.push(mipmap.data.buffer);\n            buffer_set.add(mipmap.data.buffer);\n        }\n    }\n\n    return buffers;\n}\n", "export enum RenderResourceType {\n    Device = 0,\n    Buffer,\n    SharedBuffer,\n    Texture,\n    Draw,\n    Pipeline,\n    Pass,\n}\n\nexport type RenderResourceDisposeHandler = (type: RenderResourceType) => void;\n\nconst resources = new Map<number, any>();\nconst resource_types = new WeakMap<any, RenderResourceType>();\nconst resource_dispose_handler = new Map<RenderResourceType, RenderResourceDisposeHandler>();\n\nexport function render_resource_set(id: number, resource: any) {\n    resources.set(id, resource);\n}\n\nexport function render_resource_get(id: number) {\n    return resources.get(id);\n}\n\nexport function render_resource_dispose(id: number) {\n    const resource = resources.get(id);\n    const type = resource_types.get(resource);\n    if (type === undefined) {\n        console.error(`<RenderThread> Resource type not found for resource ${id}`);\n    } else {\n        const disposer = resource_dispose_handler.get(type);\n        if (disposer) disposer(resource);\n    }\n    resources.delete(id);\n}\n\nexport function render_resource_type_set(resource: any, type: RenderResourceType) {\n    resource_types.set(resource, type);\n}\n\nexport function render_resource_type_get(resource: any) {\n    return resource_types.get(resource);\n}\n\nexport function render_register_resource_dispose_handler(type: RenderResourceType, handler: RenderResourceDisposeHandler) {\n    resource_dispose_handler.set(type, handler);\n}\n", "import { BufferRange, FlexBufferView } from '../adt';\nimport { BlockAllocator } from '../adt/block_allocator';\nimport { gfx_device_get } from '../gfx';\nimport { WebGLEncoder } from './encoder';\nimport { Pipeline, StructUniform } from './pipeline';\n\nexport enum RenderBlockType {\n    Frame = 0,\n    Object,\n    Material\n}\n\nexport enum RenderBlockName {\n    Frame = 'frame_block',\n    Object = 'object_block',\n    Material = 'material_block'\n}\n\nexport interface RenderBlock {\n    name: string;\n    type: RenderBlockType;\n    range: BufferRange;\n    view: FlexBufferView;\n}\n\n\ninterface TypedBlock {\n    buffer: WebGLBuffer;\n    data: FlexBufferView;\n    allocator: BlockAllocator;\n}\n\ninterface BlockContext {\n    blocks: Map<RenderBlockType, TypedBlock>;\n}\n\nconst BLOCK_MINOR_BUFFER_SIZE = 4 * 1024;\nconst BLOCK_MAJOR_BUFFER_SIZE = 16 * 1024;\n\nexport const BLOCK_SIZE_OBJECT = 64;\n\nlet block_context: BlockContext | undefined;\nexport function create_block_global() {\n    const device = gfx_device_get().encoder as WebGLEncoder;\n    const gl = device.gl!;\n\n    function create_unform_buffer(size: number): WebGLBuffer {\n        const buffer = gl.createBuffer();\n        gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);\n        gl.bufferData(gl.UNIFORM_BUFFER, size, gl.DYNAMIC_DRAW);\n        gl.bindBuffer(gl.UNIFORM_BUFFER, null);\n        return buffer!;\n    }\n\n    const map = new Map<RenderBlockType, TypedBlock>();\n    const block_stride = device.UNIFORM_BUFFER_ALIGNMENT;\n\n    const frame_block = {\n        buffer: create_unform_buffer(BLOCK_MINOR_BUFFER_SIZE),\n        data: new FlexBufferView(new ArrayBuffer(BLOCK_MINOR_BUFFER_SIZE)),\n        allocator: new BlockAllocator(block_stride),\n    }\n    map.set(RenderBlockType.Frame, frame_block);\n\n    const object_block = {\n        buffer: create_unform_buffer(BLOCK_MINOR_BUFFER_SIZE),\n        data: new FlexBufferView(new ArrayBuffer(BLOCK_MINOR_BUFFER_SIZE)),\n        allocator: new BlockAllocator(block_stride),\n    }\n    map.set(RenderBlockType.Object, object_block);\n\n    const material_block = {\n        buffer: create_unform_buffer(BLOCK_MAJOR_BUFFER_SIZE),\n        data: new FlexBufferView(new ArrayBuffer(BLOCK_MAJOR_BUFFER_SIZE)),\n        allocator: new BlockAllocator(block_stride),\n    }\n    map.set(RenderBlockType.Material, material_block);\n\n    block_context = {\n        blocks: map,\n    };\n}\n\nexport function upload_block_global() {\n    if (!block_context) throw 'create_block_global has not been called';\n    const encoder = gfx_device_get().encoder as WebGLEncoder;\n    const gl = encoder.gl;\n\n    for (const [_, block] of block_context.blocks) {\n        gl.bindBuffer(gl.UNIFORM_BUFFER, block.buffer);\n        gl.bufferSubData(gl.UNIFORM_BUFFER, 0, block.data.u8_view, 0, block.data.u8_view.byteLength);\n    }\n    gl.bindBuffer(gl.UNIFORM_BUFFER, null);\n}\n\nexport function create_block(type: RenderBlockType, size: number, name: string): RenderBlock {\n    if (!block_context) throw 'create_block_global has not been called';\n    const block = block_context.blocks.get(type)!;\n    const block_count = Math.ceil(size / block.allocator.block_size);\n    const range = block_context.blocks.get(type)!.allocator.allocate(block_count);\n    const view = block_context.blocks.get(type)!.data.sub_view(range);\n    return { range, type, view, name } as RenderBlock;\n}\n\nexport function upload_block(block: RenderBlock) {\n    if (!block_context) throw 'create_block_global has not been called';\n    if (!block) return;\n    const encoder = gfx_device_get().encoder as WebGLEncoder;\n    const gl = encoder.gl;\n    const block_data = block_context.blocks.get(block.type)!;\n    gl.bindBuffer(gl.UNIFORM_BUFFER, block_data.buffer);\n    gl.bufferSubData(gl.UNIFORM_BUFFER, block.range.byte_offset, block.view.u8_view, 0, block.view.u8_view.byteLength);\n}\n\nexport function block_bind(pipeline: Pipeline, block: RenderBlock) {\n    const encoder = gfx_device_get().encoder as WebGLEncoder;\n    const gl = encoder.gl;\n    const block_type = block.type;\n    const block_data = block_context!.blocks.get(block_type)!;\n    const struct_uniform = pipeline.uniform_block[block.name] as StructUniform;\n    gl.uniformBlockBinding(pipeline.program, struct_uniform.struct_index, struct_uniform.struct_index);\n    gl.bindBufferRange(gl.UNIFORM_BUFFER, struct_uniform.struct_index, block_data.buffer, block.range.byte_offset, block.range.byte_length);\n}\n\nexport function destroy_block(block: RenderBlock) {\n    if (!block_context) throw 'create_block_global has not been called';\n    block_context.blocks.get(block.type)!.allocator.free(block.range);\n}", "// Filters\nexport enum WebGLTextureFilter {}\nexport const NearestFilter: WebGLTextureFilter = 9728;\nexport const NearestMipmapNearestFilter: WebGLTextureFilter = 9984;\nexport const NearestMipmapLinearFilter: WebGLTextureFilter = 9986;\nexport const LinearFilter: WebGLTextureFilter = 9729;\nexport const LinearMipmapNearestFilter: WebGLTextureFilter = 9985;\nexport const LinearMipmapLinearFilter: WebGLTextureFilter = 9987;\n\n//WebGLTextureWrapping modes\nexport enum WebGLTextureWrapping {}\nexport const RepeatWrapping:WebGLTextureWrapping = 10497;\nexport const ClampToEdgeWrapping:WebGLTextureWrapping = 33071;\nexport const MirroredRepeatWrapping:WebGLTextureWrapping = 33648;\n\n// Data types\nexport enum WebGLDataType {}\nexport const UnsignedByteType: WebGLDataType = 5121;\nexport const ByteType: WebGLDataType = 5120;\nexport const ShortType: WebGLDataType = 5122;\nexport const UnsignedShortType: WebGLDataType = 5123;\nexport const IntType: WebGLDataType = 5124;\nexport const UnsignedIntType: WebGLDataType = 5125;\nexport const FloatType: WebGLDataType = 5126;\nexport const HalfFloatType: WebGLDataType = 5131;\nexport const UnsignedShort4444Type: WebGLDataType = 32819;\nexport const UnsignedShort5551Type: WebGLDataType = 32820;\nexport const UnsignedShort565Type: WebGLDataType = 33635;\nexport const UnsignedInt248Type: WebGLDataType = 34042;\n\n// Pixel formats\nexport enum WebGLPixelFormat {}\nexport const AlphaFormat: WebGLPixelFormat = 6406;\nexport const RGBFormat: WebGLPixelFormat = 6407;\nexport const RGBAFormat: WebGLPixelFormat = 6408;\nexport const LuminanceFormat: WebGLPixelFormat = 6409;\nexport const LuminanceAlphaFormat: WebGLPixelFormat = 6410;\n// export const RGBEFormat: WebGLPixelFormat = 1026;\nexport const DepthFormat: WebGLPixelFormat = 6402;\nexport const DepthStencilFormat: WebGLPixelFormat = 34041;\nexport const DepthFormatFloat32: WebGLPixelFormat = 36012;\nexport const DepthFormat16: WebGLPixelFormat = 33189;\nexport const DepthFormat24: WebGLPixelFormat = 33190;\nexport const RedFormat: WebGLPixelFormat = 6403;\nexport const RedIntegerFormat: WebGLPixelFormat = 36244;\nexport const RGFormat: WebGLPixelFormat = 33319;\nexport const RGIntegerFormat: WebGLPixelFormat = 33320;\nexport const RGBIntegerFormat: WebGLPixelFormat = 36248;\nexport const RGBAIntegerFormat: WebGLPixelFormat = 36249;\n\n// Compressed texture formats\n// DDS / ST3C Compressed texture formats\nexport enum WebGLCompressedWebGLPixelFormat {}\nexport const RGB_S3TC_DXT1_Format: WebGLCompressedWebGLPixelFormat = 33776;\nexport const RGBA_S3TC_DXT1_Format: WebGLCompressedWebGLPixelFormat = 33777;\nexport const RGBA_S3TC_DXT3_Format: WebGLCompressedWebGLPixelFormat = 33778;\nexport const RGBA_S3TC_DXT5_Format: WebGLCompressedWebGLPixelFormat = 33779;\n\n// PVRTC compressed './texture formats\nexport const RGB_PVRTC_4BPPV1_Format: WebGLCompressedWebGLPixelFormat = 35840;\nexport const RGB_PVRTC_2BPPV1_Format: WebGLCompressedWebGLPixelFormat = 35841;\nexport const RGBA_PVRTC_4BPPV1_Format: WebGLCompressedWebGLPixelFormat = 35842;\nexport const RGBA_PVRTC_2BPPV1_Format: WebGLCompressedWebGLPixelFormat = 35843;\n\n// ETC compressed texture formats\nexport const RGB_ETC1_Format: WebGLCompressedWebGLPixelFormat = 36196;\n\n// ASTC compressed texture formats\nexport const RGBA_ASTC_4x4_Format: WebGLCompressedWebGLPixelFormat = 37808;\nexport const RGBA_ASTC_5x4_Format: WebGLCompressedWebGLPixelFormat = 37809;\nexport const RGBA_ASTC_5x5_Format: WebGLCompressedWebGLPixelFormat = 37810;\nexport const RGBA_ASTC_6x5_Format: WebGLCompressedWebGLPixelFormat = 37811;\nexport const RGBA_ASTC_6x6_Format: WebGLCompressedWebGLPixelFormat = 37812;\nexport const RGBA_ASTC_8x5_Format: WebGLCompressedWebGLPixelFormat = 37813;\nexport const RGBA_ASTC_8x6_Format: WebGLCompressedWebGLPixelFormat = 37814;\nexport const RGBA_ASTC_8x8_Format: WebGLCompressedWebGLPixelFormat = 37815;\nexport const RGBA_ASTC_10x5_Format: WebGLCompressedWebGLPixelFormat = 37816;\nexport const RGBA_ASTC_10x6_Format: WebGLCompressedWebGLPixelFormat = 37817;\nexport const RGBA_ASTC_10x8_Format: WebGLCompressedWebGLPixelFormat = 37818;\nexport const RGBA_ASTC_10x10_Format: WebGLCompressedWebGLPixelFormat = 37819;\nexport const RGBA_ASTC_12x10_Format: WebGLCompressedWebGLPixelFormat = 37820;\nexport const RGBA_ASTC_12x12_Format: WebGLCompressedWebGLPixelFormat = 37821;\n\n// Internal Pixel Formats\nexport enum TextureStoreFormat {}\nexport const R8: TextureStoreFormat = 33321;\nexport const RG8: TextureStoreFormat = 33323;\nexport const R16F: TextureStoreFormat = 33325;\nexport const R32F: TextureStoreFormat = 33326;\nexport const R32UI: TextureStoreFormat = 0x8236;\nexport const RG16F: TextureStoreFormat = 33327;\nexport const RG32F: TextureStoreFormat = 33328;\nexport const R8UI: TextureStoreFormat = 33330;\nexport const RGB8: TextureStoreFormat = 32849;\nexport const SRGB8: TextureStoreFormat = 35905;\nexport const RGB565: TextureStoreFormat = 36194;\nexport const R11F_G11F_B10F: TextureStoreFormat = 35898;\nexport const RGB9_E5: TextureStoreFormat = 35901;\nexport const RGB16F: TextureStoreFormat = 34843;\nexport const RGB32F: TextureStoreFormat = 34837;\nexport const RGB8UI: TextureStoreFormat = 36221;\nexport const RGBA8: TextureStoreFormat = 32856;\nexport const RGB5_A1: TextureStoreFormat = 32855;\nexport const RGBA4: TextureStoreFormat = 32854;\nexport const RGBA16F: TextureStoreFormat = 34842;\nexport const RGBA32F: TextureStoreFormat = 34836;\nexport const RGBA8UI: TextureStoreFormat = 36220;\nexport const RGBA32UI: TextureStoreFormat = 36208;\nexport const RGB32UI: TextureStoreFormat = 36209;\n\n// Texture Type\nexport enum WebGLTextureType {}\nexport const TEXTURE_2D: WebGLTextureType = 3553;\nexport const TEXTURE_3D: WebGLTextureType = 32879;\nexport const TEXTURE_CUBE: WebGLTextureType = 34067;\nexport const TEXTURE_2D_ARRAY: WebGLTextureType = 35866;\n\nexport enum WebGLBufferType {}\nexport const ARRAY_BUFFER: WebGLBufferType = 34962;\nexport const ELEMENT_ARRAY_BUFFER: WebGLBufferType = 34963;\nexport const COPY_READ_BUFFER: WebGLBufferType = 36662;\nexport const COPY_WRITE_BUFFER: WebGLBufferType = 36663;\nexport const PIXEL_PACK_BUFFER: WebGLBufferType = 35051; // The buffer will be used for reading from WebGL textures\nexport const PIXEL_UNPACK_BUFFER: WebGLBufferType = 35052; // The buffer will be used for writing to WebGL textures\nexport const UNIFORM_BUFFER: WebGLBufferType = 35345;\nexport const TRANSFORM_FEEDBACK_BUFFER: WebGLBufferType = 35982;\n\nexport enum WebGLBufferUsage {}\nexport const STATIC_DRAW: WebGLBufferUsage = 35044;\nexport const STATIC_READ: WebGLBufferUsage = 35045;\nexport const STATIC_COPY: WebGLBufferUsage = 35046;\nexport const DYNAMIC_DRAW: WebGLBufferUsage = 35048;\nexport const DYNAMIC_READ: WebGLBufferUsage = 35049;\nexport const DYNAMIC_COPY: WebGLBufferUsage = 35050;\nexport const STREAM_DRAW: WebGLBufferUsage = 35040;\nexport const STREAM_READ: WebGLBufferUsage = 35041;\nexport const STREAM_COPY: WebGLBufferUsage = 35042;", "import { GPUStorageMode, gfx_device_get } from '../gfx/gfx_device';\nimport { Box3 } from '../math/box';\nimport { TangentGenerator } from '../math/tangent';\nimport { StringMap, TypedArray, default_value } from '../std/type';\nimport { WebGLEncoder } from './encoder';\nimport { PrimitiveType, UniformValue } from './pipeline';\nimport { Attribute, GLAttribute, IndexRange, Primitive, primitive_compute_box, primitive_get_attribute } from './primitive';\nimport { ByteType, FloatType, HalfFloatType, IntType, ShortType, UnsignedByteType, UnsignedIntType, UnsignedShortType, WebGLBufferUsage, WebGLDataType } from './type';\n\nexport interface WebGLDrawDescriptor {\n    primitive: Primitive;\n\n    uniforms: StringMap<UniformValue>;\n    type: PrimitiveType;\n    range: IndexRange;\n\n    // instancing\n    instance_attributes?: Attribute[];\n    force_update: Set<string>;\n\n    storage_mode: GPUStorageMode;\n}\n\nexport interface WebGLDraw {\n    primitive: Primitive;\n\n    webgl_vao: WebGLVertexArrayObject;\n    attributes: GLAttribute[];\n    attribute_map: StringMap<GLAttribute>;\n    box: Box3;\n    index_buffer: WebGLBuffer | null;\n    indexed: boolean;\n    type: PrimitiveType;\n\n    range: IndexRange;\n    max_vertex_count: number;\n\n    uniforms: StringMap<UniformValue>;\n    force_update: Set<string>;\n\n    storage_mode: GPUStorageMode;\n}\n\nconst default_attribute_slot: StringMap<number> = {\n    position: 0,\n    uv: 1,\n    normal: 2,\n    tangent: 3,\n    color: 4,\n    skin: 5,\n    weight: 6,\n    uv2: 7,\n};\nconst default_max_slot = 4;\n\nexport function get_gl_buffer_type(buffer: TypedArray): WebGLDataType {\n    if (buffer instanceof Float32Array) {\n        return FloatType;\n    } else if (buffer instanceof Int16Array) {\n        return ShortType;\n    } else if (buffer instanceof Int32Array) {\n        return IntType;\n    } else if (buffer instanceof Int8Array) {\n        return ByteType;\n    } else if (buffer instanceof Uint16Array) {\n        return UnsignedShortType;\n    } else if (buffer instanceof Uint32Array) {\n        return UnsignedIntType;\n    } else if (buffer instanceof Uint8Array) {\n        return UnsignedByteType;\n    }\n    throw `invalid buffer type ${typeof buffer}.`;\n}\n\nexport function create_draw(descriptor: Partial<WebGLDrawDescriptor>): WebGLDraw {\n    let webgl_vao: WebGLVertexArrayObject;\n    let indexed = false;\n    let max_vertex_count = 0;\n    let dynamic = false;\n    const encoder = gfx_device_get().encoder as WebGLEncoder;\n    const gl = encoder.gl;\n\n    const primitive = descriptor.primitive;\n    if (!primitive) throw 'Fatal error, create draw without primitive';\n\n    const type = default_value(descriptor.type, 4);\n    const uniforms = default_value(descriptor.uniforms, {});\n    const force_update = default_value(descriptor.force_update, new Set());\n    const storage_mode = default_value(descriptor.storage_mode, GPUStorageMode.GPUOnly);\n\n    const box = primitive_compute_box(primitive);\n    if (primitive_get_attribute(primitive, 'tangent')) TangentGenerator.generate(primitive);\n\n    webgl_vao = gl.createVertexArray()!;\n    gl.bindVertexArray(webgl_vao);\n\n    const attribute_map: StringMap<GLAttribute> = {};\n    const attributes: GLAttribute[] = [];\n    let max_vertex_slot = default_max_slot;\n    for (let i = 0; i < primitive.attributes.length; ++i) {\n        const attr = primitive.attributes[i];\n        if (attr.name === 'generic') continue;\n\n        const buffer = gl.createBuffer();\n        if (buffer === null) throw new Error('WebGL Buffer Create Failed.');\n\n        let usage: WebGLBufferUsage = gl.STATIC_DRAW;\n        if (attr.dynamic) {\n            usage = gl.DYNAMIC_DRAW;\n            dynamic = true;\n        }\n        const type = get_gl_buffer_type(attr.buffer);\n        const stride = attr.stride;\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, attr.buffer, usage);\n\n        let slot = attr.slot !== undefined ? attr.slot : default_attribute_slot[attr.name || 'position'];\n        slot = slot !== undefined ? slot : max_vertex_slot++;\n\n        if (type === FloatType || type === HalfFloatType) {\n            gl.vertexAttribPointer(slot as number, attr.stride, type, false, 0, 0);\n        } else {\n            gl.vertexAttribIPointer(slot as number, attr.stride, type, 0, 0);\n        }\n        const attribute = {\n            stride,\n            buffer,\n            name: attr.name || 'position',\n            dynamic,\n            source_buffer: dynamic ? attr.buffer : undefined,\n        } as GLAttribute;\n        attributes.push(attribute);\n        attribute_map[attribute.name] = attribute;\n        gl.enableVertexAttribArray(slot as number);\n        if (attr.name === 'position') {\n            max_vertex_count = attr.buffer.length / stride;\n        }\n    }\n\n    let index_buffer: WebGLBuffer | null = null;\n    if (primitive.index !== undefined) {\n        index_buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, index_buffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, primitive.index, gl.STATIC_DRAW);\n        max_vertex_count = primitive.index.length;\n        indexed = true;\n    }\n\n    const range = default_value(descriptor.range, { start: 0, count: max_vertex_count });\n\n    gl.bindVertexArray(null);\n    return {\n        webgl_vao,\n        indexed,\n        max_vertex_count,\n        primitive,\n        box,\n        attributes,\n        attribute_map,\n        index_buffer,\n\n        type,\n        range,\n\n        uniforms,\n        force_update,\n        storage_mode,\n    } as WebGLDraw; \n}\n\nexport function update_draw(draw: WebGLDraw, primitive: Primitive): void {\n    const encoder = gfx_device_get().encoder as WebGLEncoder;\n    const gl = encoder.gl;\n\n    let max_vertex_count = 0;\n    if (!draw.attribute_map || !draw.attributes) return;\n\n    gl.bindVertexArray(draw.webgl_vao!);\n\n    let max_vertex_slot = default_max_slot;\n    for (let i = 0; i < primitive.attributes.length; ++i) {\n        const attr = primitive.attributes[i];\n        const gl_attr = draw.attribute_map[attr.name || 'position'];\n\n        if (!gl_attr) continue;\n\n        const usage = attr.dynamic === true ? gl.STREAM_DRAW : gl.STATIC_DRAW;\n        const type = get_gl_buffer_type(attr.buffer);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, gl_attr.buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, attr.buffer, usage);\n\n        let slot = attr.slot !== undefined ? attr.slot : default_attribute_slot[attr.name || 'position'];\n        slot = slot !== undefined ? slot : max_vertex_slot++;\n\n        if (type === FloatType || type === HalfFloatType) {\n            gl.vertexAttribPointer(slot as number, attr.stride, type, false, 0, 0);\n        } else {\n            gl.vertexAttribIPointer(slot as number, attr.stride, type, 0, 0);\n        }\n\n        gl.enableVertexAttribArray(slot as number);\n\n        if (attr.name === 'position') {\n            max_vertex_count = attr.buffer.length / attr.stride;\n        }\n    }\n\n    if (primitive.index !== undefined) {\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, draw.index_buffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, primitive.index, gl.STATIC_DRAW);\n        max_vertex_count = primitive.index.length;\n        draw.indexed = true;\n    }\n\n    gl.bindVertexArray(null);\n    draw.max_vertex_count = max_vertex_count;\n}\n\nexport function draw_update(draw: WebGLDraw): void {\n    const encoder = gfx_device_get().encoder as WebGLEncoder;\n    const gl = encoder.gl;\n\n    if (!draw.attribute_map || !draw.attributes) return;\n\n    gl.bindVertexArray(draw.webgl_vao!);\n    for (let i = 0; i < draw.attributes.length; ++i) {\n        const attr = draw.attributes[i];\n        if (!attr.dynamic) continue;\n        gl.bindBuffer(gl.ARRAY_BUFFER, attr.buffer);\n        gl.bufferSubData(gl.ARRAY_BUFFER, 0, attr.source_buffer!, 0, attr.update_length ?? attr!.source_buffer!.length);\n    }\n    gl.bindVertexArray(null);\n}\n\nexport function draw_destroy(draw: WebGLDraw): void {\n    const encoder = gfx_device_get().encoder as WebGLEncoder;\n    const gl = encoder.gl;\n\n    if (!draw.attributes) return;\n    gl.deleteVertexArray(draw.webgl_vao!);\n    for (let i = 0; i < draw.attributes.length; ++i) {\n        const attr = draw.attributes[i];\n        gl.deleteBuffer(attr.buffer);\n    }\n    if (draw.index_buffer) {\n        gl.deleteBuffer(draw.index_buffer);\n    }\n}\n", "const extensions = {} as any;\n\nexport function get_extension<T extends any>(gl: WebGL2RenderingContext, name: string): T | null {\n    if (extensions[name] !== undefined) {\n        return extensions[name];\n    }\n\n    let extension;\n    switch (name) {\n        case 'WEBGL_depth_texture':\n            extension = gl.getExtension('WEBGL_depth_texture') || gl.getExtension('MOZ_WEBGL_depth_texture') || gl.getExtension('WEBKIT_WEBGL_depth_texture');\n            break;\n        case 'EXT_texture_filter_anisotropic':\n            extension = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('MOZ_EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');\n            break;\n        case 'WEBGL_compressed_texture_s3tc':\n            extension = gl.getExtension('WEBGL_compressed_texture_s3tc') || gl.getExtension('MOZ_WEBGL_compressed_texture_s3tc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');\n            break;\n        case 'WEBGL_compressed_texture_pvrtc':\n            extension = gl.getExtension('WEBGL_compressed_texture_pvrtc') || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n            break;\n        default:\n            extension = gl.getExtension(name);\n    }\n\n    if (extension === null) {\n        console.log(`<WebGLExtension> Extension: ${name} not supported.`);\n    } else {\n        console.log(`<WebGLExtension> Extension: ${name} found.`);\n    }\n    extensions[name] = extension;\n    return extension;\n}\n", "import { GPUAction, GPUActionType, gfx_device_get } from '../gfx/gfx_device';\nimport { ColorRGBA } from '../math/color';\nimport { default_value } from '../std/type';\nimport { WebGLEncoder } from './encoder';\nimport { WebGLTextureHandle } from './texture';\n\nexport interface ColorAttachmentDescriptor {\n    texture: WebGLTextureHandle;\n    layer?: number;\n}\n\nexport interface DepthAttachmentDescriptor {\n    texture: WebGLTextureHandle;\n    layer?: number;\n}\n\nexport enum PassLoadAction {\n    DontCare,\n    Clear,\n}\n\nexport interface GPUPass {\n    id: number;\n    name: string;\n    webgl_framebuffer: WebGLFramebuffer | null;\n    width: number;\n    height: number;\n    color_targets: ColorAttachmentDescriptor[];\n    depth_target?: DepthAttachmentDescriptor;\n    color_load_action: PassLoadAction;\n    depth_load_action: PassLoadAction;\n    clear_color?: ColorRGBA;\n    clear_depth?: number;\n}\n\nexport interface GPUPassDescriptor {\n    name: string;\n    width: number;\n    height: number;\n    color_targets: ColorAttachmentDescriptor[];\n    depth_target?: DepthAttachmentDescriptor;\n    window_pass?: boolean;\n    color_load_action: PassLoadAction;\n    depth_load_action: PassLoadAction;\n    clear_color?: ColorRGBA;\n    clear_depth?: number;\n}\n\nlet _pass_id = 0;\n\nfunction get_pass_id(): number {\n    return _pass_id++;\n}\n\nexport function create_pass(descriptor: Partial<GPUPassDescriptor>): GPUPass {\n    const encoder = gfx_device_get().encoder as WebGLEncoder;\n    const gl = encoder.gl;\n\n    const name = default_value(descriptor.name, 'unnamed pass');\n    const width = default_value(descriptor.width, encoder.width);\n    const height = default_value(descriptor.height, encoder.height);\n    const depth_target = descriptor.depth_target;\n    const color_targets = default_value(descriptor.color_targets, []);\n    const color_load_action = default_value(descriptor.color_load_action, PassLoadAction.DontCare);\n    const depth_load_action = default_value(descriptor.depth_load_action, PassLoadAction.DontCare);\n    const clear_color = descriptor.clear_color ?? new ColorRGBA();\n    const clear_depth = default_value(descriptor.clear_depth, 1);\n\n    encoder.set_pass();\n    const webgl_framebuffer = gl.createFramebuffer()!;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, webgl_framebuffer);\n\n    // depth buffer\n    if (depth_target === undefined) {\n        const renderBuffer = gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT32F, width, height);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\n    } else {\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depth_target.texture.webgl_texture!, 0);\n    }\n\n    if (color_targets) {\n        // init draw buffers\n        const drawBuffers = [];\n        for (let i = 0; i < color_targets.length; ++i) {\n            drawBuffers.push(gl.COLOR_ATTACHMENT0 + i);\n        }\n\n        // set draw buffers\n        gl.drawBuffers(drawBuffers);\n\n        // attach draw buffers\n        for (let i = 0; i < color_targets.length; ++i) {\n            const target = color_targets[i];\n            const texture = target.texture;\n            const layer = default_value(target.layer, 0);\n            gl.bindTexture(texture.texture_type, texture.webgl_texture!);\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, drawBuffers[i], texture.texture_type, texture.webgl_texture!, layer);\n        }\n        gl.bindTexture(gl.TEXTURE_2D, null);\n    }\n\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status != gl.FRAMEBUFFER_COMPLETE) {\n        throw 'fb status: ' + status.toString(16);\n    }\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    return {\n        name,\n        color_targets,\n        depth_target,\n        id: get_pass_id(),\n        webgl_framebuffer,\n        width,\n        height,\n        color_load_action,\n        depth_load_action,\n        clear_color,\n        clear_depth,\n    };\n}\n\nexport function pass_destroy(pass: GPUPass | undefined): void {\n    if (pass && pass.webgl_framebuffer) {\n        const encoder = gfx_device_get().encoder as WebGLEncoder;\n        encoder.gl.deleteFramebuffer(pass.webgl_framebuffer);\n    }\n}\n\nlet pass_clear_action: GPUAction;\n\nexport function pass_clear(pass: GPUPass | undefined, action: GPUAction = pass_clear_action): void {\n    if (action === undefined) {\n        pass_clear_action = {\n            type: GPUActionType.ClearAll,\n            clear_color: new ColorRGBA(0, 0, 0, 0),\n            clear_depth: 1,\n        } as GPUAction;\n        action = pass_clear_action;\n    }\n\n    if (pass) {\n        const device = gfx_device_get();\n        const encoder = device.encoder as WebGLEncoder;\n        const last_pass = encoder.current_pass;\n        encoder.set_pass(pass);\n        encoder.clear(action);\n        encoder.set_pass(last_pass);\n    }\n}\n", "export function count_decimal_bit(n: number): number {\n    let c = 1;\n    while (Math.abs(n) >= 10) {\n        n /= 10;\n        c++;\n    }\n    return c;\n}\n\nexport function encode_uint16_to_uint32(a: number, b: number): number {\n    return ((a & 0xffff) << 16) | (b & 0xffff);\n}\n", "import { WebGLTextureHandle } from './texture';\n\nlet webgl_texture_slot_index = 0;\nconst webgl_texture_slot_cache = new Map<number, number>();\n\nexport function webgl_texture_slot_reset() {\n    webgl_texture_slot_index = 0;\n    webgl_texture_slot_cache.clear();\n}\n\nexport function webgl_texture_slot_request(texture: WebGLTextureHandle): number {\n    const id = texture.id;\n    if (webgl_texture_slot_cache.has(id)) {\n        return webgl_texture_slot_cache.get(id)!;\n    } else {\n        const slot = webgl_texture_slot_index++;\n        webgl_texture_slot_cache.set(id, slot);\n        return slot;\n    }\n}", "import { GL, gfx_device_get, gfx_encoder_get } from '../gfx';\nimport { ColorRGBA } from '../math/color';\nimport { Float2, Float3, Float4 } from '../math/simd';\nimport { Mat3, Mat4 } from '../math/simd_mat';\nimport { count_decimal_bit } from '../std/numeric';\nimport { StringMap, default_value } from '../std/type';\nimport { RenderBlock, RenderBlockName, RenderBlockType, create_block } from './block';\nimport { WebGLEncoder } from './encoder';\nimport { WebGLTextureHandle } from './texture';\nimport { webgl_texture_slot_request } from './texture_slot';\n\nlet _pipeline_id = 0;\nfunction get_pipeline_id(): number {\n    return _pipeline_id++;\n}\n\nexport type UniformValue = undefined | number | Float2 | Float3 | Float4 | Mat3 | Mat4 | Float32Array | WebGLTextureHandle;\n\nexport interface UniformDescriptor {\n    name: string;\n    type: UniformType;\n    default_value?: UniformValue;\n    visible?: boolean;\n}\n\nexport interface Uniform extends UniformDescriptor {\n    slot?: number;\n    upload: Function;\n    gl_buffer?: WebGLBuffer;\n    buffer?: Float32Array;\n}\n\nexport interface StructUniform extends Uniform {\n    struct_index: number;\n    struct_size: number;\n    items: StringMap<StructUniformItem>;\n}\n\nexport interface StructUniformItem {\n    name: string;\n    type: UniformType;\n    default_value?: UniformValue;\n    byte_offset: number;\n    byte_size: number;\n}\n\nexport type UniformBlock = StringMap<Uniform>;\n\nexport interface Pipeline {\n    id: number;\n    valid: boolean;\n    name: string;\n\n    program: WebGLProgram;\n    vertex_shader: string;\n    fragment_shader: string;\n\n    uniform_block: UniformBlock;\n    uniforms: Uniform[];\n\n    cull_mode: CullMode;\n    depth_compare_func: DepthCompareFunc;\n    depth_write: boolean;\n    blend: BlendDescriptor;\n    vertex_order: VertexOrder;\n\n    frame_block?: RenderBlock;\n}\n\nexport enum PrimitiveType {\n    Points = 0,\n    Lines = 1,\n    LineLoop = 2,\n    LineStrip = 3,\n    Triangles = 4,\n    TriangleStrip = 5,\n    TriangleFan = 6,\n}\n\nexport interface GPUPipelineDescriptor {\n    name?: string;\n\n    defines?: string[];\n    vertex_shader?: string;\n    fragment_shader?: string;\n    combined_shader?: string;\n\n    libraries?: StringMap<string>;\n\n    primitive_type?: PrimitiveType;\n    uniforms?: UniformDescriptor[];\n    cull_mode: CullMode;\n    depth_compare_func: DepthCompareFunc;\n    depth_write: boolean;\n    blend: Partial<BlendDescriptor>;\n    vertex_order: VertexOrder;\n}\n\nexport enum UniformType {\n    Bool,\n    Float,\n    Float2,\n    Float3,\n    Float4,\n    UnsignedInteger,\n    Integer,\n    ColorRGBA,\n    Mat3,\n    Mat4,\n    Texture2D,\n    TextureCube,\n    Texture2DArray,\n    Texture3D,\n    Struct,\n}\n\nexport enum CullMode {\n    None,\n    Front = 1028,\n    Back = 1029,\n}\n\nexport enum DepthCompareFunc {\n    Never,\n    Less = 512,\n    Equal = 514,\n    LessEqual = 515,\n    Greater = 516,\n    NotEqual = 517,\n    GreaterEqual = 518,\n    Always = 519,\n}\n\nexport enum BlendFactor {\n    SrcAlpha = 770,\n    SrcColor = 768,\n    DstAlpha = 772,\n    DstColor = 774,\n    One = 1,\n    Zero = 0,\n    OneMinusSrcAlpha = 771,\n    OneMinusSrcColor = 769,\n    OneMinusDstAlpha = 773,\n    OneMinusDstColor = 775,\n    OneMinusConstAlpha = 32772,\n    OneMinusConstColor = 32770,\n    ConstColor = 32769,\n    ConstAlpha = 32771,\n    SrcAlphaSaturate = 776,\n}\n\nexport enum BlendFunc {\n    Add = 32774,\n    Subtract = 32778,\n    ReverseSubtract = 32779,\n}\n\nexport interface BlendDescriptor {\n    enabled: boolean;\n    src_color_factor: BlendFactor;\n    src_alpha_factor: BlendFactor;\n    dst_color_factor: BlendFactor;\n    dst_alpha_factor: BlendFactor;\n    color_func: BlendFunc;\n    alpha_func: BlendFunc;\n    color: ColorRGBA;\n}\n\nexport enum VertexOrder {\n    ClockWise = 2304,\n    CounterClockWise = 2305,\n}\n\nconst version = '#version 300 es\\nprecision highp float;\\n';\n\nconst version_reg = /#version/;\nconst skip_internal_precision_define = /#define skip_global_precision/;\nconst usampler_reg = /uniform usampler2D/;\nconst sampler_2d_reg = /uniform sampler2D/;\nconst sampler_2d_shadow_reg = /uniform sampler2DShadow/;\nconst sampler_cube_reg = /uniform samplerCube/;\nconst include_reg = /#pragma include ([A-z]{1}[A-z0-9]+)/g;\n\nfunction precision_declaration(source: string): string {\n    let output = '';\n    if (source.search(skip_internal_precision_define) > -1) {\n        return output;\n    }\n\n    if (source.search(usampler_reg) > -1) {\n        output += 'precision highp usampler2D;\\n';\n    }\n    if (source.search(sampler_2d_reg) > -1) {\n        output += 'precision highp sampler2D;\\n';\n    }\n    if (source.search(sampler_2d_shadow_reg) > -1) {\n        output += 'precision highp sampler2DShadow;\\n';\n    }\n    if (source.search(sampler_cube_reg) > -1) {\n        output += 'precision highp samplerCube;\\n';\n    }\n    return output;\n}\n\nfunction parse_include(source: string, libraries: StringMap<string>): string {\n    let matches;\n    const replacers: Array<{ block: string; lib: string }> = [];\n    while ((matches = include_reg.exec(source)) != null) {\n        replacers.push({ block: matches[0], lib: matches[1] });\n    }\n\n    for (const replacer of replacers) {\n        const library = libraries[replacer.lib] ?? `// module not found ${replacer.lib}`;\n        source = source.replace(replacer.block, library);\n    }\n\n    return source;\n}\n\nexport function create_pipeline(descriptor: Partial<GPUPipelineDescriptor>): Pipeline | null {\n    // console.log(`create pipeline ${completeDesc.name}`);\nconst gl = gfx_encoder_get<WebGLEncoder>().gl;\n\n    let vertex_shader = default_value(descriptor.vertex_shader, '');\n    let fragment_shader = default_value(descriptor.fragment_shader, '');\n    let libraries = default_value(descriptor.libraries, {});\n    let name = default_value(descriptor.name, 'unnamed pipeline');\n    console.log(`create pipeline ${name}`);\n\n    let blend = default_value(descriptor.blend, {}) as BlendDescriptor;\n    blend.enabled = default_value(blend.enabled, false);\n    blend.src_alpha_factor = default_value(blend.src_alpha_factor, BlendFactor.One);\n    blend.dst_alpha_factor = default_value(blend.dst_alpha_factor, BlendFactor.OneMinusSrcAlpha);\n    blend.src_color_factor = default_value(blend.src_color_factor, BlendFactor.SrcAlpha);\n    blend.dst_color_factor = default_value(blend.dst_color_factor, BlendFactor.OneMinusSrcAlpha);\n    blend.color_func = default_value(blend.color_func, BlendFunc.Add);\n    blend.alpha_func = default_value(blend.alpha_func, BlendFunc.Add);\n\n    let depth_compare_func = default_value(descriptor.depth_compare_func, DepthCompareFunc.LessEqual);\n    let depth_write = default_value(descriptor.depth_write, true);\n    let vertex_order = default_value(descriptor.vertex_order, VertexOrder.CounterClockWise);\n    let cull_mode = default_value(descriptor.cull_mode, CullMode.Back);\n\n    if (descriptor.combined_shader) {\n        const parts = descriptor.combined_shader.split(/#define SPLITTER/);\n        vertex_shader += parts[0];\n        fragment_shader += parts[1];\n    }\n\n    if (!vertex_shader) throw 'invalid vertex shader source.';\n    if (!fragment_shader) throw 'invalid fragment shader source.';\n\n    let vertex_header = vertex_shader.search(version_reg) > -1 ? '' : version;\n    let fragment_header = fragment_shader.search(version_reg) > -1 ? '' : version;\n    const defines = descriptor.defines || [];\n    for (let i = 0; i < defines.length; ++i) {\n        vertex_header += `#define ${defines[i]} 1\\n`;\n        fragment_header += `#define ${defines[i]} 1\\n`;\n    }\n\n    vertex_shader = parse_include(vertex_shader, libraries);\n    fragment_shader = parse_include(fragment_shader, libraries);\n\n    vertex_header += precision_declaration(vertex_shader);\n    fragment_header += precision_declaration(fragment_shader);\n\n    vertex_shader = vertex_header + vertex_shader;\n    fragment_shader = fragment_header + fragment_shader;\n\n    const program = gl.createProgram()!;\n    if (program === null) {\n        console.warn(`pipeline ${name} create error`);\n        return null;\n    }\n\n    const vertex_shader_handle = build_shader(gl, vertex_shader, gl.VERTEX_SHADER);\n    if (vertex_shader_handle === null) {\n        console.warn(`pipeline ${name} vertex shader compile error`);\n        return null;\n    }\n    const fragment_shader_handle = build_shader(gl, fragment_shader, gl.FRAGMENT_SHADER);\n    if (fragment_shader_handle === null) {\n        console.warn(`pipeline ${name} fragment shader compile error`);\n        return null;\n    }\n\n    gl.attachShader(program, vertex_shader_handle);\n    gl.attachShader(program, fragment_shader_handle);\n    gl.linkProgram(program);\n\n    // get uniform location\n    const uniforms: Uniform[] = [];\n    const pipeline = {\n        name,\n        valid: true,\n        id: get_pipeline_id(),\n\n        vertex_shader,\n        fragment_shader,\n        program,\n\n        uniform_block: {},\n        uniforms,\n        cull_mode,\n        depth_compare_func,\n        depth_write,\n        vertex_order,\n        blend,\n    };\n\n    pipeline_bind_uniform(pipeline, descriptor.uniforms ?? []);\n    return pipeline;\n}\n\nexport function pipeline_bind_uniform(pipeline: Pipeline, descriptors: UniformDescriptor[]) {\n    const struct_uniform_map = new Map<string, UniformDescriptor[]>();\n    const { uniform_block, uniforms, program } = pipeline;\n\n    const encoder = gfx_device_get().encoder as WebGLEncoder;\n    const gl = encoder.gl;\n\n    if (uniforms) {\n        for (let i = 0; i < descriptors.length; ++i) {\n            const uniform_desc = descriptors[i];\n            const { name, type, visible, default_value } = uniform_desc;\n\n            // is structured uniform\n            if (name.search(/\\./) > -1) {\n                const struct_name = name.split(/\\./)[0]!;\n                let struct_uniforms = struct_uniform_map.get(struct_name);\n                if (!struct_uniforms) {\n                    struct_uniforms = [uniform_desc];\n                    struct_uniform_map.set(struct_name, struct_uniforms);\n                } else {\n                    struct_uniforms.push(uniform_desc);\n                }\n                continue;\n            }\n\n            const location = gl.getUniformLocation(program, name);\n            if (!location) {\n                continue;\n            }\n\n            let upload: Function;\n            switch (type) {\n                case UniformType.Float:\n                    upload = upload_float.bind(undefined, gl, location);\n                    break;\n                case UniformType.Float2:\n                    upload = upload_float2.bind(undefined, gl, location);\n                    break;\n                case UniformType.Float3:\n                    upload = upload_float3.bind(undefined, gl, location);\n                    break;\n                case UniformType.UnsignedInteger:\n                    upload = upload_uint.bind(undefined, gl, location);\n                    break;\n                case UniformType.Integer:\n                    upload = upload_int.bind(undefined, gl, location);\n                case UniformType.ColorRGBA:\n                case UniformType.Float4:\n                    upload = upload_float4.bind(undefined, gl, location);\n                    break;\n                case UniformType.Mat3:\n                    upload = upload_mat3.bind(undefined, gl, location);\n                    break;\n                case UniformType.Mat4:\n                    upload = upload_mat4.bind(undefined, gl, location);\n                    break;\n                case UniformType.Texture2DArray:\n                case UniformType.Texture2D:\n                    upload = upload_texture2d.bind(undefined, gl, location);\n                    break;\n                case UniformType.TextureCube:\n                    upload = upload_texture_cube.bind(undefined, gl, location);\n                    break;\n                default:\n                    throw new Error(`invalid uniform type: ${type}`);\n            }\n\n            const gl_uniform = { name, upload, type } as Uniform;\n            gl_uniform.visible = visible ?? false;\n            if (default_value !== undefined) gl_uniform.default_value = default_value;\n\n            uniform_block[name] = gl_uniform;\n            uniforms.push(gl_uniform);\n        }\n    }\n\n    // process ubo\n    for (const [struct_name, struct_uniforms] of struct_uniform_map) {\n        if (struct_uniforms.length <= 0) continue;\n        const struct_index = gl.getUniformBlockIndex(program, struct_name);\n        const struct_size = gl.getActiveUniformBlockParameter(program, struct_index, gl.UNIFORM_BLOCK_DATA_SIZE);\n\n        const names = struct_uniforms.map((uniform) => uniform.name.split(/\\./)[1]!);\n        const indices = gl.getUniformIndices(program, names)!.filter((value, index) => {\n            if (value > gl.ACTIVE_UNIFORMS) {\n                console.warn(`struct uniform ${struct_name}.${names[index]} not found.`);\n                return false;\n            }\n            return true;\n        });\n\n        const struct_uniform = {\n            name: struct_name,\n            type: UniformType.Struct,\n            visible: false,\n            struct_index: struct_index,\n            struct_size: struct_size,\n            items: {},\n        } as StructUniform;\n\n        const offsets = gl.getActiveUniforms(program, indices, gl.UNIFORM_OFFSET)! as number[];\n        for (let i = 0; i < struct_uniforms.length; ++i) {\n            const { name, type, visible, default_value } = struct_uniforms[i];\n            const byte_offset = offsets[i];\n            const byte_size = uniform_byte_size(type);\n            const item_name = name.split(/\\./)[1]!;\n            const item = { name: item_name, type, visible, default_value, byte_offset, byte_size  } as StructUniformItem;\n            struct_uniform.items[item_name] = item as any;\n        }\n\n        uniform_block[struct_name] = struct_uniform;\n        uniforms.push(struct_uniform);\n    }\n\n    const frame_block = uniform_block[RenderBlockName.Frame] as StructUniform;\n    if (frame_block) {\n        const encoder = gfx_device_get().encoder as WebGLEncoder;\n        const ubo_alignment = encoder.UNIFORM_BUFFER_ALIGNMENT;\n        const size = Math.ceil(frame_block.struct_size / ubo_alignment) * ubo_alignment;\n        pipeline.frame_block = create_block(RenderBlockType.Frame, size, RenderBlockName.Frame);\n    }\n}\n\nexport function pipeline_destroy(pipeline: Pipeline) {\n    if (!pipeline.valid) return;\n    pipeline.valid = false;\n    const encoder = gfx_device_get().encoder as WebGLEncoder;\n    const gl = encoder.gl;\n\n    for (const uniform of pipeline.uniforms) {\n        if (uniform.type === UniformType.Struct) {\n            gl.deleteBuffer(uniform.gl_buffer!);\n        }\n    }\n\n    gl.deleteProgram(pipeline.program);\n    pipeline.uniform_block = {};\n    pipeline.uniforms = [];\n}\n\nconst unroll_pattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\nfunction loop_replacer(_: string, start: string, end: string, snippet: string) {\n    let string = '';\n    for (let i = parseInt(start); i < parseInt(end); i++) {\n        string += snippet.replace(/\\[\\s*i\\s*\\]/g, '[' + i + ']').replace(/UNROLLED_LOOP_INDEX/g, i.toString());\n    }\n    return string;\n}\n\nfunction build_shader(gl: GL, source: string, type: any): WebGLShader | null {\n    source = source.replace(unroll_pattern, loop_replacer);\n    const shader = gl.createShader(type)!;\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    const shaderInfo = gl.getShaderInfoLog(shader);\n    if (shaderInfo != '') {\n        const lines = source.split('\\n');\n        const line_count = lines.length;\n        const max_bit = count_decimal_bit(line_count);\n        console.warn(\n            lines\n                .map((l, i) => {\n                    return `${' '.repeat(max_bit - count_decimal_bit(i + 1))}${i + 1}|${l}`;\n                })\n                .join('\\n')\n        );\n        console.warn(`shader error info:\\n${shaderInfo}`);\n        return null!;\n    }\n    return shader;\n}\n\nfunction uniform_byte_size(type: UniformType): number {\n    switch (type) {\n        case UniformType.Bool:\n        case UniformType.Float:\n        case UniformType.UnsignedInteger:\n        case UniformType.Integer:\n            return 4;\n        case UniformType.Float2:\n            return 8;\n        case UniformType.Float3:\n            return 12;\n        case UniformType.ColorRGBA:\n        case UniformType.Float4:\n            return 16;\n        case UniformType.Mat3:\n            return 36;\n        case UniformType.Mat4:\n            return 64;\n        case UniformType.Texture2D:\n        case UniformType.TextureCube:\n        case UniformType.Texture2DArray:\n        case UniformType.Texture3D:\n            return 4;\n        default:\n            throw new Error(`invalid uniform type: ${type}`);\n    }\n}\n\nfunction upload_float(gl: GL, location: WebGLUniformLocation, value: number | Float32Array): void {\n    if (value instanceof Float32Array) {\n        gl.uniform1fv(location, value);\n    } else {\n        gl.uniform1f(location, value);\n    }\n}\n\nfunction upload_float2(gl: GL, location: WebGLUniformLocation, value: Float2 | Float32Array): void {\n    if (value instanceof Float32Array) {\n        gl.uniform2fv(location, value);\n    } else {\n        gl.uniform2fv(location, value.elements);\n    }\n}\n\nfunction upload_float3(gl: GL, location: WebGLUniformLocation, value: Float3): void {\n    if (value instanceof Float32Array) {\n        gl.uniform3fv(location, value);\n    } else {\n        gl.uniform3fv(location, value.elements);\n    }\n}\n\nfunction upload_float4(gl: GL, location: WebGLUniformLocation, value: Float4 | Float32Array): void {\n    if (value instanceof Float32Array) {\n        gl.uniform4fv(location, value);\n    } else {\n        gl.uniform4fv(location, value.elements);\n    }\n}\n\nfunction upload_uint(gl: GL, location: WebGLUniformLocation, value: number): void {\n    gl.uniform1ui(location, value);\n}\n\nfunction upload_int(gl: GL, location: WebGLUniformLocation, value: number): void {\n    gl.uniform1i(location, value);\n}\n\nfunction upload_mat3(gl: GL, location: WebGLUniformLocation, value: Mat3 | Float32Array): void {\n    if (value instanceof Float32Array) {\n        gl.uniformMatrix3fv(location, false, value);\n    } else {\n        gl.uniformMatrix3fv(location, false, value.elements);\n    }\n}\n\nfunction upload_mat4(gl: GL, location: WebGLUniformLocation, value: Mat4 | Float32Array): void {\n    if (value instanceof Float32Array) {\n        gl.uniformMatrix4fv(location, false, value);\n    } else {\n        gl.uniformMatrix4fv(location, false, value.elements);\n    }\n}\n\nfunction upload_texture2d(gl: GL, location: WebGLUniformLocation, texture: WebGLTextureHandle): void {\n    if (!texture) return;\n    const slot = webgl_texture_slot_request(texture);\n    gl.activeTexture(gl.TEXTURE0 + slot);\n    gl.bindTexture(texture.texture_type, texture.webgl_texture!);\n    gl.uniform1i(location, slot);\n}\n\nfunction upload_texture_cube(gl: GL, location: WebGLUniformLocation, texture: WebGLTextureHandle): void {\n    if (!texture) return;\n    const slot = webgl_texture_slot_request(texture);\n    gl.activeTexture(gl.TEXTURE0 + slot);\n    gl.bindTexture(texture.texture_type, texture.webgl_texture!);\n    gl.uniform1i(location, slot);\n}", "import { MaterialBlock, SubMesh } from '../engine';\nimport { Camera } from '../engine/camera';\nimport { FrameCaptureNodeType, Profiler } from '../engine/frame_capture';\nimport { Material } from '../engine/material';\nimport { GFXDeviceClient } from '../gfx';\nimport { GFXBackend, GFXDeviceOptions, GL, GPUAction, GPUActionType } from '../gfx/gfx_device';\nimport { GFXEncoder, RenderObject } from '../gfx/gfx_encoder';\nimport { ColorRGBA } from '../math/color';\nimport { Rect } from '../math/rect';\nimport { RenderBlockName, block_bind, upload_block } from './block';\nimport { WebGLDraw } from './draw';\nimport { get_extension } from './extensions';\nimport { GPUMesh } from './mesh';\nimport { GPUPass, PassLoadAction } from './pass';\nimport { CullMode, DepthCompareFunc, Pipeline, PrimitiveType, StructUniform, UniformValue } from './pipeline';\nimport { webgl_texture_slot_reset } from './texture_slot';\n\nexport class WebGLEncoder implements GFXEncoder {\n    canvas: HTMLCanvasElement;\n    client: GFXDeviceClient | undefined;\n\n    pipeline?: Pipeline;\n    current_pass?: GPUPass;\n\n    gl: GL;\n\n    last_pass?: GPUPass;\n    last_viewport: Rect = new Rect();\n    viewport: Rect = new Rect();\n\n    profiler: Profiler = new Profiler();\n    recording: boolean = false;\n\n    clear_action = {\n        type: GPUActionType.ClearAll,\n        clear_color: new ColorRGBA(0, 0, 0, 0),\n        clear_depth: 1,\n    };\n\n    uniform_cache: Map<string, UniformValue> = new Map<string, UniformValue>();\n    camera?: Camera;\n\n    MAX_TEXTURE_SIZE: number;\n    MAX_TEXTURE_IMAGE_UNITS: number;\n    MAX_RENDERBUFFER_SIZE: number;\n    UNIFORM_BUFFER_ALIGNMENT: number;\n    UNIFORM_BUFFER_SIZE: number;\n\n    width: number = 1;\n    height: number = 1;\n\n    multi_thread_rendering: boolean = false;\n\n    constructor(options: GFXDeviceOptions) {\n        const gl_options = {} as WebGLContextAttributes;\n        gl_options.preserveDrawingBuffer = options.preserve_buffer === true || options.preserveDrawingBuffer === true;\n        gl_options.antialias = options.antialias === true;\n        gl_options.powerPreference = options.powerPreference ?? 'high-performance';\n        (gl_options as any).xrCompatible = options.xr_enabled === true;\n        const canvas = options.canvas ?? document.getElementsByTagName('canvas')[0] as HTMLCanvasElement;\n        if (!canvas) throw new Error('canvas not found.');\n        this.canvas = canvas!;\n        this.multi_thread_rendering = options.multi_thread_rendering === true;\n\n        let gl = canvas.getContext('webgl2', gl_options) as WebGL2RenderingContext;\n        if (gl === null) throw `webgl2 wasn't supported.`;\n\n        this.gl = gl;\n\n        get_extension(gl, 'OES_texture_float_linear');\n        get_extension(gl, 'EXT_color_buffer_float');\n        get_extension(gl, 'WEBGL_multi_draw');\n\n        this.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        this.MAX_TEXTURE_IMAGE_UNITS = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        this.MAX_RENDERBUFFER_SIZE = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\n        this.UNIFORM_BUFFER_ALIGNMENT = gl.getParameter(gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT);\n        this.UNIFORM_BUFFER_SIZE = gl.getParameter(gl.MAX_UNIFORM_BLOCK_SIZE);\n        if (gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS) < 1) throw `vertex texture not supported.`;\n\n        if (options.multi_thread_rendering && 'OffscreenCanvas' in window && 'SharedArrayBuffer' in window) {\n            const backend = options.backend ?? GFXBackend.WebGL;\n            this.client = new GFXDeviceClient(backend);\n            this.client.create_device(document.getElementById('render') as HTMLCanvasElement, options);\n        }\n    }\n\n    set_display_size(width: number, height: number): void {\n        this.width = width;\n        this.height = height;\n        this.canvas.width = width;\n        this.canvas.height = height;\n    }\n\n    set_camera(camera: Camera): void {\n        this.camera = camera;\n        this.uniform_cache.clear();\n        this.update_frame_uniform();\n    }\n\n    set_pass(pass?: GPUPass, description?: string): void {\n        // undefined pass as fullscreen pass\n\n        this.last_viewport.copy(this.viewport);\n        const gl = this.gl;\n        if (!pass) {\n            if (this.current_pass === undefined) return;\n\n            // if pass changed record last pass end\n            if (this.recording) {\n                if (this.current_pass) this.profiler.trace_end('set pass');\n            }\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            this.set_viewport(0, 0, this.width, this.height);\n            this.current_pass = undefined;\n            return;\n        }\n\n        if (this.current_pass === pass) {\n            return;\n        }\n\n        // if pass changed record last pass end\n        if (this.current_pass !== undefined && this.recording) this.profiler.trace_end('set pass');\n\n        if (this.recording) this.profiler.trace_start('set pass', description || pass.name, pass, FrameCaptureNodeType.Pass);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, pass.webgl_framebuffer);\n        this.set_viewport(0, 0, pass.width, pass.height);\n\n        // setup pass load action\n        let mask = 0;\n        if (pass.color_load_action === PassLoadAction.Clear) {\n            const color = pass.clear_color!;\n            gl.clearColor(color.r, color.g, color.b, color.a);\n            mask |= gl.COLOR_BUFFER_BIT;\n        }\n        if (pass.depth_load_action === PassLoadAction.Clear) {\n            gl.clearDepth(pass.clear_depth!);\n            mask |= gl.DEPTH_BUFFER_BIT;\n        }\n        if (mask !== 0) gl.clear(mask);\n\n        this.last_pass = this.current_pass;\n\n        this.current_pass = pass;\n        this.uniform_cache.clear();\n    }\n\n    set_clear_color(color: ColorRGBA) {\n        this.clear_action.clear_color.copy(color);\n    }\n\n    clear(action?: GPUAction): void {\n        if (!action) action = this.clear_action;\n\n        if (action.type === GPUActionType.Ignore) return;\n\n        if ((action.type & GPUActionType.ClearColor) !== 0) {\n            this.gl.clearColor(action.clear_color.r, action.clear_color.g, action.clear_color.b, action.clear_color.a);\n        }\n\n        this.gl.clearDepth(action.clear_depth);\n\n        let mask = 0;\n        if ((action.type & GPUActionType.ClearColor) !== 0) mask |= this.gl.COLOR_BUFFER_BIT;\n        if ((action.type & GPUActionType.ClearDepth) !== 0) mask |= this.gl.DEPTH_BUFFER_BIT;\n        if ((action.type & GPUActionType.ClearStencil) !== 0) mask |= this.gl.STENCIL_BUFFER_BIT;\n\n        this.gl.clear(mask);\n    }\n\n    set_viewport(x: number, y: number, width: number, height: number): void {\n        width = Math.max(0, width);\n        height = Math.max(0, height);\n        this.last_viewport.copy(this.viewport);\n        this.viewport.set(x, y, width, height);\n        this.gl.viewport(x, y, width, height);\n    }\n\n    set_pipeline(pipeline: Pipeline): void {\n        if (!pipeline.valid) {\n            console.error(`using invalid pipeline ${pipeline.name ?? ''}`);\n            return;\n        }\n\n        webgl_texture_slot_reset();\n\n        if (this.pipeline === pipeline) {\n            return;\n        }\n\n        // update pipeline\n        const gl = this.gl;\n        if (this.recording) this.profiler.trace_start('set pipeline', pipeline.name, pipeline, FrameCaptureNodeType.Pipeline);\n        gl.useProgram(pipeline.program);\n\n        const { cull_mode, depth_write, depth_compare_func, vertex_order, blend } = pipeline;\n\n        if (this.pipeline === undefined || cull_mode !== this.pipeline.cull_mode) {\n            if (depth_compare_func === DepthCompareFunc.Never || cull_mode == CullMode.None) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n                gl.cullFace(cull_mode);\n            }\n        }\n\n        if (this.pipeline === undefined || depth_compare_func !== this.pipeline.depth_compare_func) {\n            if (depth_compare_func === DepthCompareFunc.Never) {\n                gl.disable(gl.DEPTH_TEST);\n            } else {\n                gl.enable(gl.DEPTH_TEST);\n                gl.depthFunc(depth_compare_func);\n            }\n        }\n\n        if (this.pipeline === undefined || depth_write !== this.pipeline.depth_write) {\n            gl.depthMask(depth_write);\n        }\n\n        if (this.pipeline === undefined || vertex_order !== this.pipeline.vertex_order) {\n            gl.frontFace(vertex_order);\n        }\n\n        if (this.pipeline === undefined || blend.enabled !== this.pipeline.blend.enabled) {\n            if (blend && blend.enabled) {\n                gl.enable(gl.BLEND);\n            } else {\n                gl.disable(gl.BLEND);\n            }\n        }\n\n        if (\n            this.pipeline === undefined ||\n            blend.src_color_factor !== this.pipeline.blend.src_color_factor ||\n            blend.dst_color_factor !== this.pipeline.blend.dst_color_factor ||\n            blend.src_alpha_factor !== this.pipeline.blend.src_alpha_factor ||\n            blend.dst_alpha_factor !== this.pipeline.blend.dst_alpha_factor ||\n            blend.color_func !== this.pipeline.blend.color_func ||\n            blend.alpha_func !== this.pipeline.blend.alpha_func\n        ) {\n            gl.blendFuncSeparate(blend.src_color_factor, blend.dst_color_factor, blend.src_alpha_factor, blend.dst_alpha_factor);\n            gl.blendEquationSeparate(blend.color_func, blend.alpha_func);\n        }\n\n        this.pipeline = pipeline;\n        this.uniform_cache.clear();\n\n        const frame_block = pipeline.uniform_block[RenderBlockName.Frame] as StructUniform;\n        if (frame_block && pipeline.frame_block) {\n            block_bind(pipeline, pipeline.frame_block);\n        }\n\n        for (const uniform of pipeline.uniforms) {\n            const name = uniform.name;\n            const uniform_value = uniform.default_value;\n            if (uniform_value !== undefined) uniform.upload(uniform_value);\n            this.uniform_cache.set(name, uniform_value);\n        } \n\n        if (this.recording) this.profiler.trace_end('set pipeline');\n    }\n\n    private update_frame_uniform() {\n        if (!this.camera || !this.pipeline) return;\n        const frame_block = this.pipeline.frame_block;\n        const frame_struct = this.pipeline.uniform_block[RenderBlockName.Frame] as StructUniform;\n        if (!frame_block || !frame_struct) return;\n        this.camera.view_matrix.write(frame_block?.view.f32_view, frame_struct.items['view_matrix'].byte_offset / 4);\n        this.camera.projection_matrix.write(frame_block?.view.f32_view, frame_struct.items['projection_matrix'].byte_offset / 4);\n        if (this.pipeline.frame_block)\n        {\n            upload_block(frame_block);\n            block_bind(this.pipeline, this.pipeline.frame_block);\n        }\n    }\n\n    set_scissor(x?: number, y?: number, width?: number, height?: number, description?: string) {\n        const gl = this.gl;\n        if (x === undefined) {\n            gl.disable(gl.SCISSOR_TEST);\n        } else {\n            gl.enable(gl.SCISSOR_TEST);\n            gl.scissor(x, y!, width!, height!);\n        }\n    }\n\n    set_material(material: Material, description?: string) {\n        // if (material.)\n    };\n\n    set_draw = (draw: WebGLDraw, object?: RenderObject, description?: string): void => {\n        if (this.recording) this.profiler.trace_start('set draw', description, draw, FrameCaptureNodeType.Draw);\n\n        const gl = this.gl;\n        if (this.pipeline === undefined) throw new Error('No active pipeline');\n\n        const pipeline = this.pipeline!;\n        const pip_uniforms = pipeline.uniforms;\n        for (let i = 0; i < pip_uniforms.length; ++i) {\n            const pip_uniform = pip_uniforms[i];\n            const name = pip_uniform.name;\n            let uniform: UniformValue;\n            if (object?.material_block?.has_property(name)) {\n                uniform = object.material_block.get_property(name);\n            } else {\n                uniform = draw.uniforms[name] || pipeline.uniform_block[name].default_value;\n            }\n\n            // Check whether this uniform has been uploaded.\n            const cached_uniform = this.uniform_cache.get(name);\n            if (cached_uniform === uniform && !draw.force_update.has(name)) continue;\n\n            // Upload uniform & cache\n            if (this.recording) this.profiler.trace_start('upload uniform', `${name} ${uniform}`, uniform, FrameCaptureNodeType.ConstantBuffer);\n            if (uniform !== undefined) pip_uniform.upload(uniform);\n            if (this.recording) this.profiler.trace_end('upload uniform');\n            this.uniform_cache.set(name, uniform);\n        }\n\n        const struct_uniform = pipeline.uniform_block[RenderBlockName.Object] as StructUniform;\n        const render_object = object?.render_block;\n        if (render_object && struct_uniform) {\n            block_bind(pipeline, render_object);\n        }\n\n        if (draw.webgl_vao === undefined) return;\n        gl.bindVertexArray(draw.webgl_vao);\n\n        if (draw.range !== undefined) {\n            if (draw.indexed) {\n                gl.drawElements(draw.type, draw.range.count, gl.UNSIGNED_INT, draw.range.start);\n            } else {\n                gl.drawArrays(draw.type, draw.range.start, draw.range.count);\n            }\n        } else {\n            if (draw.indexed) {\n                gl.drawElements(draw.type, draw.max_vertex_count, gl.UNSIGNED_INT, 0);\n            } else {\n                gl.drawArrays(draw.type, 0, draw.max_vertex_count);\n            }\n        }\n\n        if (this.recording) this.profiler.trace_end('set draw');\n    };\n\n    set_material_block(material: MaterialBlock, description?: string) {\n        if (this.pipeline === undefined) return;\n        if (this.recording) this.profiler.trace_start('set material block', description);\n\n        const pipeline = this.pipeline!;\n        const pip_uniforms = pipeline.uniforms;\n        for (let i = 0; i < pip_uniforms.length; ++i) {\n            const pip_uniform = pip_uniforms[i];\n            const name = pip_uniform.name;\n            if (!material.has_property(name)) continue;\n            const uniform = material.get_property(name);\n\n            // Upload uniform & cache\n            if (this.recording) this.profiler.trace_start('upload uniform', `${name} ${uniform}`, uniform, FrameCaptureNodeType.ConstantBuffer);\n            if (uniform !== undefined) pip_uniform.upload(uniform);\n            if (this.recording) this.profiler.trace_end('upload uniform');\n            this.uniform_cache.set(name, uniform);\n        }\n\n        if (this,this.recording) this.profiler.trace_end('set material block');\n    }\n\n    set_mesh(mesh: GPUMesh, description?: string) {\n        const gl = this.gl;\n        if (this.recording) this.profiler.trace_start('set mesh', description);\n        gl.bindVertexArray(mesh.vao);\n        if (this.recording) this.profiler.trace_end('set mesh');\n    }\n\n    draw_mesh(mesh: GPUMesh, description?: string) {\n        const gl = this.gl;\n        if (this.recording) this.profiler.trace_start('draw mesh', description, mesh, FrameCaptureNodeType.Mesh);\n        gl.bindVertexArray(mesh.vao);\n        for (let i = 0; i < mesh.sub_meshes.length; ++i) {\n            if (mesh.indexed) {\n                gl.drawElements(PrimitiveType.Triangles, mesh.index_count, gl.UNSIGNED_INT, 0);\n            } else {\n                gl.drawArrays(PrimitiveType.Triangles, 0, mesh.vertex_count);\n            }\n        }\n        if (this.recording) this.profiler.trace_end('draw mesh');\n    }\n\n    draw_submesh(mesh: SubMesh) {\n        const gl = this.gl;\n        if (this.recording) this.profiler.trace_start('draw sub mesh');\n        if (mesh.indexed) {\n            gl.drawElements(PrimitiveType.Triangles, mesh.index_count, gl.UNSIGNED_INT, mesh.index_start);\n        } else {\n            gl.drawArrays(PrimitiveType.Triangles, mesh.index_start, mesh.index_count);\n        }\n    }\n\n    commit(): void {\n        this.pipeline = undefined;\n        webgl_texture_slot_reset();\n        this.uniform_cache.clear();\n    }\n}\n", "import { pool_get, pool_return } from '../adt';\nimport { clamp } from '../math/math';\nimport { Float2, Float3 } from '../math/simd';\nimport { Spherical } from '../math/spherical';\nimport { Camera } from './camera';\n\nexport class SphericalControl {\n    enabled: boolean = true;\n    movable: boolean = true;\n\n    interpolated_spherical: Spherical = new Spherical();\n    current_spherical: Spherical = new Spherical();\n\n    center: Float3 = new Float3();\n    interpolated_center: Float3 = new Float3();\n\n    damping: number = 0.45; // ms\n\n    location: Float3 = new Float3();\n    interpolated_location: Float3 = new Float3();\n\n    rotate_speed: number = Math.PI * 2;\n    zoom_speed: number = 1.0;\n    move_speed: number = 2.0;\n\n    min_polar_angle: number = 1e-3;\n    max_polar_angle: number = Math.PI;\n\n    changed = false;\n\n    constructor(public camera: Camera) {\n        this.set_target(camera.location);\n        camera.look_at(this.center);\n    }\n\n    set_target(location: Float3): void {\n        this.location.copy(location);\n        this.current_spherical.from_float3(this.location);\n        this.interpolated_spherical.copy(this.current_spherical);\n        this.interpolated_center.copy(this.center);\n        this.changed = true;\n    }\n\n    set_center(location: Float3): void {\n        this.center.copy(location);\n    }\n\n    rotate_horizontal(angle: number): void {\n        this.current_spherical.phi += angle * this.rotate_speed;\n        if (angle !== 0) this.changed = true;\n    }\n\n    rotate_vertical(angle: number): void {\n        this.current_spherical.theta = clamp(this.current_spherical.theta - angle * this.rotate_speed, this.min_polar_angle, this.max_polar_angle);\n        if (angle !== 0) this.changed = true;\n    }\n\n    move(delta: Float2): void {\n        if (!this.movable) return;\n        const vector = pool_get(Float3);\n        vector.set(delta.x, delta.y, 0).mul(this.current_spherical.radius * this.move_speed);\n        this.center.add(vector.apply_quaternion(this.camera.rotation));\n        if (delta.x !== 0 || delta.y !== 0) this.changed = true;\n        pool_return(vector);\n    }\n\n    zoom(scale: number): void {\n        this.current_spherical.radius *= scale * this.zoom_speed;\n        if (scale !== 1) this.changed = true;\n    }\n\n    update(): boolean {\n        if (!this.enabled) return false;\n\n        this.interpolated_spherical.lerp(this.current_spherical, this.damping);\n        this.interpolated_location.from_spherical(this.interpolated_spherical);\n\n        this.interpolated_center.lerp(this.center, this.damping);\n\n        this.interpolated_location.add(this.interpolated_center);\n        this.location.copy(this.interpolated_location);\n\n        this.camera.location.copy(this.location);\n        this.camera.look_at(this.interpolated_center);\n\n        let changed = this.changed;\n        this.changed = false;\n        return changed;\n    }\n}\n", "import { pool_get } from '../adt';\nimport { Box3 } from '../math';\nimport { Float3 } from '../math/simd';\nimport { Mat4 } from '../math/simd_mat';\n\nexport interface VertexData {\n    position?: Float32Array;\n    index?: Uint16Array | Uint32Array;\n    normal?: Float32Array;\n    tangent?: Float32Array;\n    uv?: Float32Array;\n    uv2?: Float32Array;\n    uv3?: Float32Array;\n    uv4?: Float32Array;\n    uv5?: Float32Array;\n    uv6?: Float32Array;\n    color?: Float32Array;\n    joint?: Uint32Array;\n    weight?: Float32Array;\n}\n\nexport function vertex_data_transform(data: VertexData, matrix: Mat4): VertexData {\n    if (data.position) _transform_position(data.position, matrix);\n    if (data.normal) _transform_normal(data.normal, matrix);\n    if (data.tangent) _transform_tangent(data.tangent, matrix);\n    if (data.index && matrix.determinant() < 0) _flip_face(data.index);\n    return data;\n}\n\nexport function vertex_data_compute_box(data: VertexData, box?: Box3): Box3 {\n    box = box ?? new Box3();\n    const v = pool_get(Float3);\n    if (data.position) {\n        const buffer = data.position;\n        const end = buffer.length;\n        for (let i = 0; i < end; i += 3) {\n            v.set(buffer[i], buffer[i + 1], buffer[i + 2]);\n            box.expand_point(v);\n        }\n    }\n    return box;\n}\n\nconst _vertex_v = new Float3();\n\nfunction _transform_position(positions: Float32Array, matrix: Mat4, offset: number = 0, count?: number) {\n    let end = offset + (count ?? positions.length);\n    for (let i = offset; i < end; i += 3) {\n        _vertex_v.set(positions[i], positions[i + 1], positions[i + 2]);\n        _vertex_v.apply_mat4(matrix);\n        positions[i] = _vertex_v.x;\n        positions[i + 1] = _vertex_v.y;\n        positions[i + 2] = _vertex_v.z;\n    }\n}\n\nfunction _transform_normal(normals: Float32Array, matrix: Mat4, offset: number = 0, count?: number) {\n    let end = offset + (count ?? normals.length);\n    for (let i = offset; i < end; i += 3) {\n        _vertex_v.set(normals[i], normals[i + 1], normals[i + 2]);\n        _vertex_v.apply_mat4_directional(matrix);\n        normals[i] = _vertex_v.x;\n        normals[i + 1] = _vertex_v.y;\n        normals[i + 2] = _vertex_v.z;\n    }\n}\n\nfunction _transform_tangent(tangnets: Float32Array, matrix: Mat4, offset: number = 0, count?: number) {\n    let end = offset + (count ?? tangnets.length);\n    for (let i = offset; i < end; i += 4) {\n        _vertex_v.set(tangnets[i], tangnets[i + 1], tangnets[i + 2]);\n        _vertex_v.apply_mat4_directional(matrix);\n        tangnets[i] = _vertex_v.x;\n        tangnets[i + 1] = _vertex_v.y;\n        tangnets[i + 2] = _vertex_v.z;\n    }\n}\n\nfunction _flip_face(indice: Uint16Array | Uint32Array) {\n    let end = indice.length;\n    for (let i = 0; i < end; i += 3) {\n        let t = indice[i];\n        indice[i] = indice[i + 1];\n        indice[i + 1] = t;\n    }\n}", "import { Mesh, SubMesh, vertex_data_compute_box } from '../engine';\nimport { gfx_device_get } from '../gfx';\nimport { Box3 } from '../math';\nimport { TypedArray } from '../std';\nimport { get_gl_buffer_type } from './draw';\nimport { WebGLEncoder } from './encoder';\nimport { FloatType, HalfFloatType } from './type';\n\nexport interface GPUMesh {\n    vao: WebGLVertexArrayObject;\n    sub_meshes: SubMesh[];\n    vertex_count: number;\n    index_count: number;\n    indexed: boolean;\n    box: Box3;\n}\n\nexport enum GenericAttributeName {\n    position = 'position',\n    uv = 'uv',\n    normal = 'normal',\n    tangent = 'tangent',\n    joint = 'joint',\n    weight = 'weight',\n    color = 'color',\n    uv2 = 'uv2',\n    uv3 = 'uv3',\n    uv4 = 'uv4',\n    uv5 = 'uv5',\n    uv6 = 'uv6',\n}\n\nexport function get_generic_attribute_slot(name: GenericAttributeName): number {\n    switch (name) {\n        case GenericAttributeName.position: return 0;\n        case GenericAttributeName.uv: return 1;\n        case GenericAttributeName.normal: return 2;\n        case GenericAttributeName.tangent: return 3;\n        case GenericAttributeName.joint: return 4;\n        case GenericAttributeName.weight: return 5;\n        case GenericAttributeName.color: return 6;\n        case GenericAttributeName.uv2: return 7;\n        case GenericAttributeName.uv3: return 8;\n        case GenericAttributeName.uv4: return 9;\n        case GenericAttributeName.uv5: return 10;\n        case GenericAttributeName.uv6: return 11;\n    }\n}\n\nconst gpu_meshes = new WeakMap<Mesh, GPUMesh>();\n\nexport function create_gpu_mesh(mesh: Mesh) {\n    const cached = gpu_meshes.get(mesh);\n    if (cached) return cached;\n\n    const encoder = gfx_device_get().encoder as WebGLEncoder;\n    const gl = encoder.gl;\n\n    const vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    const { vertex_data, sub_meshes } = mesh;\n\n    function upload_buffer(data: TypedArray, slot: number, size: number) {\n        const type = get_gl_buffer_type(data);\n        const buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n        if (type === FloatType || type === HalfFloatType) {\n            gl.vertexAttribPointer(slot, size, type, false, 0, 0);\n        } else {\n            gl.vertexAttribIPointer(slot, size, type, 0, 0);\n        }\n        gl.enableVertexAttribArray(slot);\n    }\n\n    const box = vertex_data_compute_box(vertex_data);\n\n    if (vertex_data.position) upload_buffer(vertex_data.position, get_generic_attribute_slot(GenericAttributeName.position), 3);\n    if (vertex_data.uv) upload_buffer(vertex_data.uv, get_generic_attribute_slot(GenericAttributeName.uv), 2);\n    if (vertex_data.normal) upload_buffer(vertex_data.normal, get_generic_attribute_slot(GenericAttributeName.normal), 3);\n    if (vertex_data.tangent) upload_buffer(vertex_data.tangent, get_generic_attribute_slot(GenericAttributeName.tangent), 4);\n    if (vertex_data.joint) upload_buffer(vertex_data.joint, get_generic_attribute_slot(GenericAttributeName.joint), 4);\n    if (vertex_data.weight) upload_buffer(vertex_data.weight, get_generic_attribute_slot(GenericAttributeName.weight), 4);\n    if (vertex_data.color) upload_buffer(vertex_data.color, get_generic_attribute_slot(GenericAttributeName.color), 4);\n    if (vertex_data.uv2) upload_buffer(vertex_data.uv2, get_generic_attribute_slot(GenericAttributeName.uv2), 2);\n    if (vertex_data.uv3) upload_buffer(vertex_data.uv3, get_generic_attribute_slot(GenericAttributeName.uv3), 2);\n    if (vertex_data.uv4) upload_buffer(vertex_data.uv4, get_generic_attribute_slot(GenericAttributeName.uv4), 2);\n    if (vertex_data.uv5) upload_buffer(vertex_data.uv5, get_generic_attribute_slot(GenericAttributeName.uv5), 2);\n    if (vertex_data.uv6) upload_buffer(vertex_data.uv6, get_generic_attribute_slot(GenericAttributeName.uv6), 2);\n\n    let indexed = false;\n    if (vertex_data.index) {\n        const buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffer);\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, vertex_data.index, gl.STATIC_DRAW);\n        indexed = true;\n    }\n\n    const vertex_count = vertex_data.position ? vertex_data.position.length / 3 : 0;\n    const index_count = vertex_data.index ? vertex_data.index.length : vertex_count;\n\n    gl.bindVertexArray(null);\n    const gpu_mesh = { vao, sub_meshes, indexed, box, vertex_count, index_count } as GPUMesh;\n    gpu_meshes.set(mesh, gpu_mesh);\n    return gpu_mesh;\n}\n", "import { Box3 } from '../math/box';\nimport { Float3 } from '../math/simd';\nimport { Sphere } from '../math/sphere';\nimport { Triangle } from '../math/triangle';\nimport { Optional, TypedArray } from '../std/type';\nimport { GenericAttributeName } from './mesh';\nimport { Pipeline } from './pipeline';\n\nexport interface IndexRange {\n    start: number;\n    count: number;\n}\n\nexport interface GLAttribute {\n    name: string;\n    buffer: WebGLBuffer;\n    slot?: WeakMap<Pipeline, number> | number;\n    stride: number;\n    dynamic: boolean;\n    source_buffer?: TypedArray;\n    update_length?: number\n}\n\nexport interface Attribute<T extends TypedArray = any> {\n    name: string;\n    stride: number;\n    buffer: T;\n    slot?: number;\n    dynamic?: boolean;\n}\n\nexport interface Primitive {\n    name?: string;\n    attributes: Attribute<TypedArray>[];\n    index?: Uint32Array;\n    ranges?: IndexRange[];\n    compressed_data?: ArrayBuffer;\n}\n\nexport function primitive_get_attribute<T extends TypedArray>(primitive: Primitive, name: string = GenericAttributeName.position): Optional<Attribute<T>> {\n    if (primitive.attributes === undefined || primitive.attributes.length < 1) {\n        return null;\n    }\n\n    for (let i = 0; i < primitive.attributes.length; ++i) {\n        const attr = primitive.attributes[i];\n        if (attr.name === name) {\n            return attr as Attribute<T>;\n        }\n    }\n\n    return null;\n}\n\nexport function set_attribute<T extends TypedArray>(primitive: Primitive, attribute: Attribute<T>): void {\n    if (attribute === undefined) {\n        return;\n    }\n    const old = primitive_get_attribute(primitive, attribute.name);\n    if (old === null) {\n        primitive.attributes.push(attribute);\n    } else {\n        old!.name = attribute.name;\n        old!.stride = attribute.stride;\n        old!.buffer = attribute.buffer;\n    }\n}\n\nconst primitive_v = new Float3();\nconst primitive_b = new Box3();\n\nexport function primitive_compute_box(primitive: Primitive, box?: Box3): Box3 {\n    box = box ?? new Box3();\n    box.reset();\n    const position = primitive_get_attribute(primitive);\n    if (position) {\n        const buffer = position.buffer;\n        for (let i = 0; i < buffer.length; i += 3) {\n            primitive_v.read(buffer, i);\n            box.expand_point(primitive_v);\n        }\n    }\n    return box;\n}\n\nexport function primitive_compute_sphere(primitive: Primitive, sphere?: Sphere, box?: Box3): Sphere {\n    sphere = sphere ?? new Sphere();\n    if (box === undefined) {\n        primitive_compute_box(primitive, primitive_b);\n        sphere.center.copy(primitive_b.center);\n    } else {\n        sphere.center.copy(box.center);\n    }\n\n    const position = primitive_get_attribute(primitive);\n    let max_radius_sq = 0;\n    if (position) {\n        const buffer = position.buffer;\n        for (let i = 0; i < buffer.length; i += 3) {\n            primitive_v.read(buffer, i);\n            max_radius_sq = Math.max(max_radius_sq, primitive_v.distance_squared(sphere.center));\n        }\n    }\n    sphere.radius = Math.sqrt(max_radius_sq);\n    return sphere;\n}\n\nexport function primitive_get_triangle(primitive: Primitive, index: number, triangle?: Triangle): Triangle {\n    triangle = triangle ?? new Triangle();\n    const index_buffer = primitive.index;\n    const position = primitive_get_attribute(primitive);\n    if (!position) return triangle;\n\n    if (index_buffer) {\n        triangle.a.read(position.buffer, index_buffer[index * 3] * 3);\n        triangle.b.read(position.buffer, index_buffer[index * 3 + 1] * 3);\n        triangle.c.read(position.buffer, index_buffer[index * 3 + 2] * 3);\n    } else {\n        triangle.a.read(position.buffer, index * 9);\n        triangle.a.read(position.buffer, index * 9 + 3);\n        triangle.a.read(position.buffer, index * 9 + 6);\n    }\n\n    return triangle;\n}\n\nexport function* primitive_triangle_iterator(primitive: Primitive, triangle?: Triangle): Iterable<Triangle> {\n    triangle = triangle ?? new Triangle();\n    const index_buffer = primitive.index;\n    const position = primitive_get_attribute(primitive);\n    if (position === undefined) return;\n\n    const position_buffer = position!.buffer;\n    if (index_buffer) {\n        const max_vertex_count = index_buffer.length / 3;\n        for (let i = 0; i < max_vertex_count; ++i) {\n            triangle.a.read(position_buffer, index_buffer[i * 3] * 3);\n            triangle.b.read(position_buffer, index_buffer[i * 3 + 1] * 3);\n            triangle.c.read(position_buffer, index_buffer[i * 3 + 2] * 3);\n            yield triangle;\n        }\n    } else {\n        const max_vertex_count = position_buffer.length / 9;\n        for (let i = 0; i < max_vertex_count; ++i) {\n            triangle.a.read(position_buffer, i * 9);\n            triangle.a.read(position_buffer, i * 9 + 3);\n            triangle.a.read(position_buffer, i * 9 + 6);\n            yield triangle;\n        }\n    }\n}\n\nexport function primitive_flip_coordinate_system(primitive: Primitive): Primitive {\n    // flip to left-hand coordinate system\n    const position = primitive_get_attribute(primitive);\n    if (position !== undefined) {\n        const buffer = position!.buffer;\n        for (let i = 0; i < buffer.length; i += 3) {\n            buffer[i] = -buffer[i];\n        }\n    }\n    return primitive;\n}\n", "import { Primitive, primitive_get_attribute, set_attribute } from '../webgl/primitive';\nimport { Float2, Float3 } from './simd';\n\n// tmp let for compute\nlet v1: Float3 = new Float3();\nlet v2: Float3 = new Float3();\n\nlet V: Float3 = new Float3();\n\nlet P1: Float3 = new Float3();\nlet P2: Float3 = new Float3();\nlet P3: Float3 = new Float3();\n\nlet N1: Float3 = new Float3();\nlet N2: Float3 = new Float3();\nlet N3: Float3 = new Float3();\n\nlet B1: Float3 = new Float3();\nlet B2: Float3 = new Float3();\nlet B3: Float3 = new Float3();\n\nlet T1: Float3 = new Float3();\nlet T2: Float3 = new Float3();\nlet T3: Float3 = new Float3();\n\nlet uv1: Float2 = new Float2();\nlet uv2: Float2 = new Float2();\nlet uv3: Float2 = new Float2();\n\nlet tmpVec: Float3 = new Float3();\nlet tmpFloat2: Float3 = new Float3();\n\nlet dst: Float3 = new Float3();\n\n// tmp let for generate\nlet t: Float3 = new Float3();\nlet b: Float3 = new Float3();\nlet n: Float3 = new Float3();\nlet tmp0: Float3 = new Float3();\nlet tmp1: Float3 = new Float3();\nlet tmp2: Float3 = new Float3();\n\n/**\n * https://github.com/cedricpinson/osgjs/blob/master/sources/osgUtil/TangentSpaceGenerator.js\n */\nexport class TangentGenerator {\n    private static T: Float32Array | undefined;\n    private static B: Float32Array | undefined;\n    private static N: Float32Array | undefined;\n\n    private static prepare(primitive: Primitive): void {\n        const vx = primitive_get_attribute(primitive, 'position')!.buffer as Float32Array;\n        const nx = primitive_get_attribute(primitive, 'normal')!.buffer as Float32Array;\n        const tx = primitive_get_attribute(primitive, 'uv')!.buffer as Float32Array;\n        const index = primitive.index;\n\n        let nVx;\n        if (index) {\n            nVx = index.length;\n            const array = index;\n            for (let i = 0; i < nVx; i += 3) {\n                const i1 = array[i];\n                const i2 = array[i + 1];\n                const i3 = array[i + 2];\n                this.compute(vx, nx, tx, i1, i2, i3);\n            }\n        } else {\n            nVx = vx.length / 3;\n            for (let i = 0; i < nVx; i += 3) {\n                this.compute(vx, nx, tx, i, i + 1, i + 2);\n            }\n        }\n    }\n\n    private static compute(vx: Float32Array, nx: Float32Array, tx: Float32Array, i1: number, i2: number, i3: number): void {\n        if (v1 === undefined) {\n            v1 = new Float3();\n            v2 = new Float3();\n\n            V = new Float3();\n\n            P1 = new Float3();\n            P2 = new Float3();\n            P3 = new Float3();\n\n            N1 = new Float3();\n            N2 = new Float3();\n            N3 = new Float3();\n\n            B1 = new Float3();\n            B2 = new Float3();\n            B3 = new Float3();\n            T1 = new Float3();\n            T2 = new Float3();\n            T3 = new Float3();\n\n            uv1 = new Float2();\n            uv2 = new Float2();\n            uv3 = new Float2();\n\n            tmpVec = new Float3();\n            tmpFloat2 = new Float3();\n\n            dst = new Float3();\n        }\n\n        P1.read(vx, i1 * 3);\n        P2.read(vx, i2 * 3);\n        P3.read(vx, i3 * 3);\n\n        N1.read(nx, i1 * 3);\n        N2.read(nx, i2 * 3);\n        N3.read(nx, i3 * 3);\n\n        uv1.read(tx, i1 * 2);\n        uv2.read(tx, i2 * 2);\n        uv3.read(tx, i3 * 2);\n\n        let vy;\n        let vz;\n\n        T1.set(0, 0, 0);\n        T2.set(0, 0, 0);\n        T3.set(0, 0, 0);\n        B1.set(0, 0, 0);\n        B2.set(0, 0, 0);\n        B3.set(0, 0, 0);\n\n        const s1 = uv2.x - uv1.x;\n        const s2 = uv3.x - uv1.x;\n        const t1 = uv2.y - uv1.y;\n        const t2 = uv3.y - uv1.y;\n\n        v1.set(P2.x - P1.x, s1, t1);\n        v2.set(P3.x - P1.x, s2, t2);\n        Float3.Cross(v1, v2, V);\n        if (V.x !== 0.0) {\n            V.normalize();\n            vy = -V.y / V.x;\n            vz = -V.z / V.x;\n            T1.x += vy;\n            B1.x += vz;\n            T2.x += vy;\n            B2.x += vz;\n            T3.x += vy;\n            B3.x += vz;\n        }\n\n        v1.set(P2.y - P1.y, s1, t1);\n        v2.set(P3.y - P1.y, s2, t2);\n        Float3.Cross(v1, v2, V);\n        if (V.x !== 0.0) {\n            V.normalize();\n            vy = -V.y / V.x;\n            vz = -V.z / V.x;\n            T1.y += vy;\n            B1.y += vz;\n            T2.y += vy;\n            B2.y += vz;\n            T3.y += vy;\n            B3.y += vz;\n        }\n\n        v1.set(P2.z - P1.z, s1, t1);\n        v2.set(P3.z - P1.z, s2, t2);\n        Float3.Cross(v1, v2, V);\n        if (V.x !== 0.0) {\n            V.normalize();\n            vy = -V.y / V.x;\n            vz = -V.z / V.x;\n            T1.z += vy;\n            B1.z += vz;\n            T2.z += vy;\n            B2.z += vz;\n            T3.z += vy;\n            B3.z += vz;\n        }\n\n        const T = this.T!;\n        const B = this.B!;\n        const N = this.N!;\n\n        Float3.Cross(N1, T1, tmpVec);\n        Float3.Cross(tmpVec, N1, tmpFloat2);\n        dst.read(T, i1 * 3)\n            .add(tmpFloat2)\n            .write(T, i1 * 3);\n\n        Float3.Cross(B1, N1, tmpVec);\n        Float3.Cross(N1, tmpVec, tmpFloat2);\n        dst.read(B, i1 * 3)\n            .add(tmpFloat2)\n            .write(B, i1 * 3);\n\n        Float3.Cross(N2, T2, tmpVec);\n        Float3.Cross(tmpVec, N2, tmpFloat2);\n        dst.read(T, i2 * 3)\n            .add(tmpFloat2)\n            .write(T, i2 * 3);\n\n        Float3.Cross(B2, N2, tmpVec);\n        Float3.Cross(N2, tmpVec, tmpFloat2);\n        dst.read(B, i2 * 3)\n            .add(tmpFloat2)\n            .write(B, i2 * 3);\n\n        Float3.Cross(N3, T3, tmpVec);\n        Float3.Cross(tmpVec, N3, tmpFloat2);\n        dst.read(T, i3 * 3)\n            .add(tmpFloat2)\n            .write(T, i3 * 3);\n\n        Float3.Cross(B3, N3, tmpVec);\n        Float3.Cross(N3, tmpVec, tmpFloat2);\n        dst.read(B, i3 * 3)\n            .add(tmpFloat2)\n            .write(B, i3 * 3);\n\n        dst.read(N, i1 * 3)\n            .add(N1)\n            .write(N, i1 * 3);\n        dst.read(N, i2 * 3)\n            .add(N2)\n            .write(N, i2 * 3);\n        dst.read(N, i3 * 3)\n            .add(N3)\n            .write(N, i3 * 3);\n    }\n\n    static generate(primitive: Primitive): void {\n        if (t === undefined) {\n            t = new Float3();\n            n = new Float3();\n            b = new Float3();\n            tmp0 = new Float3();\n            tmp1 = new Float3();\n            tmp2 = new Float3();\n        }\n        const position = primitive_get_attribute(primitive, 'position')!.buffer;\n        const size = position.length;\n\n        this.T = new Float32Array(size);\n        this.B = new Float32Array(size);\n        this.N = new Float32Array(size);\n\n        this.prepare(primitive);\n\n        const nElements = size / 3;\n        const tangents = new Float32Array(nElements * 4);\n        for (let i = 0; i < nElements; ++i) {\n            t.read(this.T, i * 3);\n            b.read(this.B, i * 3);\n            n.read(this.N, i * 3);\n\n            n.normalize().write(this.N, i * 3);\n\n            const nt = Float3.Dot(n, t);\n            tmp1.copy(n).mul(nt);\n            tmp0.copy(t).sub(tmp1);\n            tmp2.copy(tmp0).normalize();\n\n            Float3.Cross(n, t, tmp0);\n            let sign = Float3.Dot(tmp0, b);\n            sign = sign < 0 ? -1 : 1;\n\n            const ti = i * 4;\n            tangents[ti] = tmp2.x;\n            tangents[ti + 1] = tmp2.y;\n            tangents[ti + 2] = tmp2.z;\n            tangents[ti + 3] = sign;\n        }\n\n        set_attribute(primitive, {\n            buffer: tangents,\n            stride: 4,\n            name: 'tangent',\n        });\n        set_attribute(primitive, { buffer: this.N, stride: 3, name: 'normal' });\n\n        this.T = undefined;\n        this.B = undefined;\n        this.N = undefined;\n    }\n}\n\nconst tangentGenerator = new TangentGenerator();\nexport default tangentGenerator;\n", "import { Mesh } from '../engine';\n\nexport const builin_meshes: Map<string, Mesh> = new Map<string, Mesh>();", "import { Mesh, VertexData } from '../engine';\nimport { Box3 } from '../math';\nimport { builin_meshes } from './builtin_mesh';\n\nexport function create_box_mesh(): Mesh {\n    let builtin_box = builin_meshes.get('box');\n    if (builtin_box) return builtin_box;\n    const position = new Float32Array([\n        -1, 1, -1, 1, 1, 1, 1, 1, -1, 1, 1, 1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, -1,\n        1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1,\n    ]);\n    const normal = new Float32Array([\n        0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, -1, 0, 0, -1, 0, 0, -1, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 1, 0, 0, 0, 1, -1, 0,\n        0, 0, -1, 0, 1, 0, 0, 0, 0, -1,\n    ]);\n    const uv = new Float32Array([\n        0.875, 0.5, 0.625, 0.75, 0.625, 0.5, 0.625, 0.75, 0.375, 1, 0.375, 0.75, 0.625, 0, 0.375, 0.25, 0.375, 0, 0.375, 0.5, 0.125, 0.75, 0.125, 0.5, 0.625, 0.5, 0.375, 0.75, 0.375, 0.5, 0.625, 0.25,\n        0.375, 0.5, 0.375, 0.25, 0.875, 0.75, 0.625, 1, 0.625, 0.25, 0.375, 0.75, 0.625, 0.75, 0.625, 0.5,\n    ]);\n    const index = new Uint32Array([0, 2, 1, 3, 5, 4, 6, 8, 7, 9, 11, 10, 12, 14, 13, 15, 17, 16, 0, 1, 18, 3, 4, 19, 6, 7, 20, 9, 10, 21, 12, 13, 22, 15, 16, 23]);\n    const vertex_data = { position, normal, uv, index } as VertexData;\n    const sub_meshes = [{ material_index: -1, vertex_start: 0, vertex_count: 24, index_start: 0, index_count: 36, indexed: true }];\n    const box = new Box3();\n    box.min.set(-1, -1, -1);\n    box.max.set(1, 1, 1);\n    builtin_box = { vertex_data, sub_meshes, name: 'builtin box', materials: [], box } as Mesh;\n    builin_meshes.set('box', builtin_box);\n    return builtin_box;\n}", "export enum Platform {\n    Mobile,\n    Mac,\n    Windows,\n    VR,\n    AR\n}\n\nexport function platform_detector(): Platform {\n    const userAgent = navigator.userAgent;\n    if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(userAgent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(userAgent.substring(0, 4))) {\n        return Platform.Mobile;\n    }\n    if(/(macintosh|macintel|macppc|mac68k|macos)/i.test(userAgent)) {\n        return Platform.Mac;\n    }\n    return Platform.Windows;\n}\n", "import { DepthCompareFunc, Pipeline, create_pipeline } from \"@union_native/core\";\n\nexport function create_default_pipeline(): Pipeline {\n    const vertex_shader = `#version 300 es\n    precision highp float;\n    precision highp int;\n    layout(location = 0) in vec3 position;\n    layout(location = 1) in vec2 uv;\n\n    out vec2 v_uv;\n\n    void main() {\n        v_uv = uv;\n        gl_Position = vec4(position, 1.0);\n    }\n    `;\n\n    const fragment_shader = `#version 300 es\n    precision highp float;\n    precision highp int;\n    in vec2 v_uv;\n    out vec4 frag_data;\n\n    void main() {\n        frag_data = vec4(v_uv, 0.0, 1.0);\n    }\n    `;\n\n    return create_pipeline({\n        name: \"default pipeline\",\n        vertex_shader,\n        fragment_shader,\n        depth_write: true,\n        depth_compare_func: DepthCompareFunc.Always\n    })!;\n}\n", "import { Camera, Engine, EngineEvent, EventHub, Float3, GFXDevice, SphericalControl, create_box_mesh, create_gpu_mesh } from \"@union_native/core\";\nimport { create_default_pipeline } from \"./pipeline\";\n\nconst device = new GFXDevice();\nconst encoder = device.encoder;\nconst engine = new Engine();\nconst camera = new Camera();\ncamera.location.set(4, 4, 4);\ncamera.look_at(Float3.ZERO);\ncamera.perspective(45, 1, 1, 1000);\nconst control = new SphericalControl(camera);\nconst pipeline = create_default_pipeline();\n\nconst cube = create_box_mesh();\nfunction frame() {\n    control.update();\n    encoder.set_camera(camera);\n    encoder.set_pipeline(pipeline);\n    encoder.draw_mesh(create_gpu_mesh(cube));\n}\n\nEventHub.on(EngineEvent.Frame, frame);\n\nengine.start();"],
  "mappings": "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AAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,OAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,IAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,aAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,cAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,OAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,MAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,UAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,KAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,UAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,UAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,OAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,QAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,IAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,IAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,IAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,IAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,IAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,IAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,IAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,IAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,IAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,KAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,KAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,KAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,WAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,OAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,OAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,OAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,QAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,OAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,WAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,UAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,WAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,UAAA,IAAA,GAAA,IAAA;AACA,IAAAA,SAAAA,SAAA,OAAA,IAAA,GAAA,IAAA;EACJ,GA7GY,YAAA,UAAO,CAAA,EAAA;AA+GnB,MAAY;AAAZ,GAAA,SAAYC,cAAW;AACnB,IAAAA,aAAAA,aAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,OAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,QAAA,IAAA,CAAA,IAAA;EACJ,GAJY,gBAAA,cAAW,CAAA,EAAA;;;AC1GjB,MAAO,eAAP,MAAmB;IAUrB,cAAA;AATA,WAAA,QAAgB,IAAI,OAAM;AAC1B,WAAA,aAAqB,IAAI,OAAM;AAC/B,WAAA,MAAc,IAAI,OAAM;AACxB,WAAA,QAAgB,IAAI,OAAM;AAE1B,WAAA,eAAuB;AAuCvB,WAAA,cAAc,CAAC,UAA2B;AACtC,eAAO,iBAAiB,aAAa,KAAK,aAAa,KAAK;AAC5D,eAAO,iBAAiB,WAAW,KAAK,WAAW,KAAK;AAExD,aAAK,eAAe,MAAM;AAE1B,aAAK,MAAM,IAAI,MAAM,SAAS,MAAM,OAAO;AAC3C,aAAK,WAAW,KAAK,KAAK,KAAK;AAC/B,iBAAS,KAAK,YAAY,WAAW;UACjC,QAAQ,MAAM;UACd,OAAO,KAAK;UACZ,OAAO,KAAK;UACZ;SACH;MACL;AAEA,WAAA,cAAc,CAAC,UAA2B;AACtC,aAAK,IAAI,IAAI,MAAM,SAAS,MAAM,OAAO;AACzC,aAAK,MAAM,KAAK,KAAK,GAAG,EAAE,IAAI,KAAK,UAAU;AAC7C,aAAK,WAAW,KAAK,KAAK,GAAG;AAC7B,iBAAS,KAAK,YAAY,WAAW;UACjC,QAAQ,KAAK;UACb,OAAO,KAAK;UACZ,OAAO,KAAK;UACZ;SACH;MACL;AAEA,WAAA,cAAc,CAAC,UAA2B;AACtC,aAAK,IAAI,IAAI,MAAM,SAAS,MAAM,OAAO;AACzC,aAAK,MAAM,KAAK,KAAK,GAAG,EAAE,IAAI,KAAK,KAAK;AAExC,aAAK,MAAM,KAAK,KAAK,GAAG;AACxB,iBAAS,KAAK,YAAY,WAAW;UACjC,QAAQ,KAAK;UACb,OAAO,KAAK;UACZ,OAAO,KAAK;UACZ;SACH;MACL;AAEA,WAAA,YAAY,CAAC,UAA2B;AACpC,eAAO,oBAAoB,aAAa,KAAK,WAAW;AACxD,eAAO,oBAAoB,WAAW,KAAK,SAAS;AACpD,iBAAS,KAAK,YAAY,SAAS;UAC/B,QAAQ,KAAK;UACb,OAAO,KAAK;UACZ,OAAO,KAAK;UACZ;SACH;AACD,aAAK,eAAe;MACxB;AAEA,WAAA,eAAe,CAAC,UAAsB;AAClC,cAAM,IAAI;AAEV,YAAI,QAAQ;AACZ,YAAI,EAAE,eAAe,QAAQ;AACzB,kBAAQ,EAAE;mBACH,EAAE,WAAW,QAAQ;AAC5B,kBAAQ,CAAC,EAAE;;AAEf,gBAAQ,QAAQ,IAAI,OAAO;AAC3B,iBAAS,KAAK,YAAY,YAAY,EAAE,OAAO,OAAO,SAAS,EAAE,QAAQ,SAAS,EAAE,OAAM,CAAE;MAChG;AAEA,WAAA,gBAAgB,CAAC,UAAoB;AACjC,YAAI,UAAU;AACd,YAAI,UAAU;AACd,YAAI,QAAQ;AACZ,gBAAQ,MAAM,SAAS,IAAI,OAAO;AAClC,YAAI,MAAM,SAAS,GAAG;AAClB,oBAAU,CAAC,MAAM,SAAS;mBACnB,MAAM,SAAS,GAAG;AACzB,oBAAU,CAAC,MAAM,SAAS;;AAE9B,iBAAS,KAAK,YAAY,YAAY,EAAE,OAAO,OAAO,SAAS,QAAO,CAAE;MAC5E;AAEA,WAAA,YAAY,CAAC,UAA8B;AACvC,cAAM,eAAc;AACpB,iBAAS,KAAK,YAAY,SAAS,EAAE,SAAS,MAAM,SAAS,MAAK,CAAE;MACxE;AAEA,WAAA,UAAU,CAAC,UAA8B;AACrC,cAAM,eAAc;AACpB,iBAAS,KAAK,YAAY,OAAO,EAAE,SAAS,MAAM,SAAS,MAAK,CAAE;MACtE;AAEA,WAAA,eAAe,CAAC,UAA2B;AACvC,cAAM,QAAQ,MAAM,QAAQ,KAAK,MAAM,QAAQ,SAAS,CAAC;AACzD,aAAK,MAAM,IAAI,MAAM,SAAS,MAAM,OAAO;AAC3C,aAAK,IAAI,KAAK,KAAK,KAAK;AACxB,aAAK,eAAe;AACpB,cAAM,UAAU;UACZ,QAAQ,YAAY;UACpB,OAAO,KAAK;UACZ,OAAO,KAAK;;AAEhB,iBAAS,KAAK,YAAY,YAAY,OAAO;MACjD;AAEA,WAAA,cAAc,CAAC,UAA2B;AACtC,cAAM,QAAQ,MAAM,QAAQ,KAAK,MAAM,QAAQ,SAAS,CAAC;AACzD,aAAK,IAAI,IAAI,MAAM,SAAS,MAAM,OAAO;AACzC,aAAK,MAAM,KAAK,KAAK,GAAG,EAAE,IAAI,KAAK,KAAK;AAExC,aAAK,MAAM,KAAK,KAAK,GAAG;AACxB,iBAAS,KAAK,YAAY,WAAW;UACjC,QAAQ,YAAY;UACpB,OAAO,KAAK;UACZ,OAAO,KAAK;SACf;MACL;AAEA,WAAA,aAAa,CAAC,UAA2B;AACrC,YAAI,MAAM,QAAQ,SAAS,GAAG;AAC1B,gBAAM,QAAQ,MAAM,QAAQ,KAAK,MAAM,QAAQ,SAAS,CAAC;AACzD,eAAK,IAAI,IAAI,MAAM,SAAS,MAAM,OAAO;;AAE7C,cAAM,UAAU;UACZ,QAAQ,YAAY;UACpB,OAAO,KAAK;UACZ,OAAO,KAAK;;AAEhB,iBAAS,KAAK,YAAY,UAAU,OAAO;MAC/C;AAhKI,WAAK,KAAK,MAAa;IAC3B;IAEA,KAAK,SAAoB;AACrB,WAAK,OAAM;AACX,cAAQ,iBAAiB,aAAa,KAAK,aAAa,KAAK;AAC7D,cAAQ,iBAAiB,aAAa,KAAK,aAAa,KAAK;AAC7D,cAAQ,iBAAiB,cAAc,KAAK,cAAc,KAAK;AAC/D,cAAQ,iBAAiB,kBAAkB,KAAK,eAAe,KAAK;AACpE,eAAS,iBAAiB,WAAW,KAAK,WAAW,KAAK;AAC1D,eAAS,iBAAiB,SAAS,KAAK,SAAS,KAAK;AAEtD,cAAQ,iBAAiB,cAAc,KAAK,cAAc,KAAK;AAC/D,cAAQ,iBAAiB,aAAa,KAAK,aAAa,KAAK;AAC7D,cAAQ,iBAAiB,YAAY,KAAK,YAAY,KAAK;AAC3D,cAAQ,iBAAiB,eAAe,KAAK,YAAY,KAAK;AAC9D,WAAK,UAAU;IACnB;IAEA,SAAM;AACF,UAAI,KAAK,SAAS;AACd,aAAK,QAAQ,oBAAoB,aAAa,KAAK,WAAW;AAC9D,aAAK,QAAQ,oBAAoB,aAAa,KAAK,WAAW;AAC9D,aAAK,QAAQ,oBAAoB,cAAc,KAAK,YAAY;AAChE,iBAAS,oBAAoB,WAAW,KAAK,SAAS;AACtD,iBAAS,oBAAoB,SAAS,KAAK,OAAO;AAElD,aAAK,QAAQ,oBAAoB,cAAc,KAAK,YAAY;AAChE,aAAK,QAAQ,oBAAoB,aAAa,KAAK,WAAW;AAC9D,aAAK,QAAQ,oBAAoB,YAAY,KAAK,UAAU;AAC5D,aAAK,QAAQ,oBAAoB,eAAe,KAAK,UAAU;;IAEvE;;;;AC5CJ,MAAY;AAAZ,GAAA,SAAYC,YAAS;AACjB,IAAAA,WAAAA,WAAA,YAAA,IAAA,CAAA,IAAA;AACA,IAAAA,WAAAA,WAAA,UAAA,IAAA,CAAA,IAAA;EACJ,GAHY,cAAA,YAAS,CAAA,EAAA;AAKrB,MAAY;AAAZ,GAAA,SAAYC,cAAW;AACnB,IAAAA,aAAAA,aAAA,WAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,KAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,OAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,OAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,KAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,QAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,IAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,OAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,GAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,MAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,QAAA,IAAA,GAAA,IAAA;EACJ,GAxCY,gBAAA,cAAW,CAAA,EAAA;AA0CjB,MAAO,QAAP,MAAO,OAAK;IAEd,OAAO,WAAQ;AACX,aAAO,KAAK,cAAc,KAAK,YAAY,IAAI,OAAK;IACxD;IAKA,SAAS,MAAiB,OAAa;AACnC,WAAK,SAAS,IAAI,IAAI;IAC1B;IAEA,SAAS,MAAe;AACpB,aAAO,KAAK,SAAS,IAAI,KAAK;IAClC;IAEA,cAAA;AAXQ,WAAA,WAA8B,CAAA;AAC9B,WAAA,UAA4B,oBAAI,IAAG;AAenC,WAAA,YAAY,CAAC,YAAsC;AACvD,cAAM,UAAU,QAAQ;AACxB,YAAI,YAAY,YAAY,IAAI;AAC5B,eAAK,SAAS,UAAU,UAAU,CAAC;mBAC5B,YAAY,YAAY,MAAM;AACrC,eAAK,SAAS,UAAU,UAAU,EAAE;mBAC7B,YAAY,YAAY,MAAM;AACrC,eAAK,SAAS,UAAU,YAAY,EAAE;mBAC/B,YAAY,YAAY,OAAO;AACtC,eAAK,SAAS,UAAU,YAAY,CAAC;;AAGzC,aAAK,QAAQ,IAAI,OAAO;MAC5B;AAEQ,WAAA,UAAU,CAAC,YAAsC;AACrD,cAAM,UAAU,QAAQ;AACxB,YAAI,YAAY,YAAY,MAAM,YAAY,YAAY,MAAM;AAC5D,eAAK,SAAS,UAAU,UAAU,CAAC;mBAC5B,YAAY,YAAY,QAAQ,YAAY,YAAY,OAAO;AACtE,eAAK,SAAS,UAAU,YAAY,CAAC;;AAGzC,aAAK,QAAQ,OAAO,OAAO;MAC/B;AA5BI,eAAS,GAAG,YAAY,SAAS,KAAK,SAAS;AAC/C,eAAS,GAAG,YAAY,OAAO,KAAK,OAAO;IAC/C;IA4BA,WAAW,QAAmB;AAC1B,aAAO,KAAK,QAAQ,IAAI,MAAM;IAClC;;;;AC/FG,MAAM,cAAc;IACvB,YAAY,IAAI,WAAW,aAAa;IACxC,WAAW,IAAI,WAAW,YAAY;IACtC,aAAa,IAAI,WAAW,cAAc;IAC1C,YAAY,IAAI,WAAW,aAAa;IACxC,OAAO,IAAI,WAAW,OAAO;;AAG3B,MAAO,SAAP,MAAa;;IAWf,IAAI,iBAAc;AACd,aAAQ,YAAY,IAAG,IAAK,OAAS,KAAK;IAC9C;IAOA,cAAA;AAnBA,WAAA,aAAqB;AAErB,WAAA,cAAsB;AACtB,WAAA,OAAe,YAAY,IAAG,IAAK;AACnC,WAAA,YAAoB,YAAY,IAAG,IAAK;AAGxC,WAAA,aAAqB,YAAY,IAAG,IAAK;AAUzC,WAAA,SAAkB;AAgBlB,WAAA,OAAO,MAAK;AACR,aAAK,OAAO,YAAY,IAAG,IAAK;AAChC,aAAK,aAAa,KAAK,OAAO,KAAK;AACnC,iBAAS,KAAK,YAAY,UAAU;AACpC,iBAAS,KAAK,YAAY,WAAW;AACrC,iBAAS,KAAK,YAAY,KAAK;AAC/B,iBAAS,KAAK,YAAY,UAAU;AACpC,iBAAS,KAAK,YAAY,SAAS;AACnC,aAAK,YAAY,KAAK;AACtB,iBAAQ;AACR,aAAK,aAAa,sBAAsB,KAAK,IAAI;MACrD;AAxBI,WAAK,QAAQ,MAAM,SAAQ;AAC3B,WAAK,cAAc,IAAI,aAAY;AAEnC,eAAS,GAAG,YAAY,cAAc,MAAK;AACvC,YAAI,KAAK;AAAQ,eAAK,MAAK;MAC/B,CAAC;IACL;IAEA,QAAK;AACD,WAAK,KAAI;AACT,WAAK,SAAS;IAClB;IAeA,QAAK;AACD,2BAAqB,KAAK,UAAU;AACpC,WAAK,SAAS;IAClB;IAEA,YAAS;IAAI;;;;AC/DX,MAAO,mBAAP,cAAyC,SAA6B;IAA5E,cAAA;;AACI,WAAA,OAAe;AAQf,WAAA,OAA6B,qBAAqB;IACtD;;AAEA,MAAY;AAAZ,GAAA,SAAYC,uBAAoB;AAC5B,IAAAA,sBAAAA,sBAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,sBAAAA,sBAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,sBAAAA,sBAAA,UAAA,IAAA,CAAA,IAAA;AACA,IAAAA,sBAAAA,sBAAA,gBAAA,IAAA,CAAA,IAAA;AACA,IAAAA,sBAAAA,sBAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,sBAAAA,sBAAA,MAAA,IAAA,CAAA,IAAA;EACJ,GAPY,yBAAA,uBAAoB,CAAA,EAAA;AAS1B,MAAO,WAAP,MAAe;IAIjB,cAAA;AACI,WAAK,OAAO,KAAK,OAAO,IAAI,iBAAgB;IAChD;IAEA,YAAY,MAAc,aAAsB,MAAY,OAA6B,qBAAqB,MAAI;AAC9G,YAAM,QAAQ,YAAY,IAAG;AAC7B,YAAM,OAAO,IAAI,iBAAgB;AAEjC,WAAK,OAAO;AACZ,WAAK,QAAQ;AACb,WAAK,cAAc;AACnB,WAAK,OAAO;AACZ,WAAK,OAAO;AAEZ,WAAK,KAAK,IAAI,IAAI;AAClB,WAAK,OAAO;IAChB;IAEA,UAAU,MAAY;AAClB,YAAM,QAAQ,CAAA;AACd,UAAI,MAAoC,KAAK;AAC7C,aAAO,OAAO,IAAI,SAAS,MAAM;AAC7B,cAAM,KAAK,GAAG;AACd,cAAM,IAAI;;AAGd,UAAI,QAAQ,QAAW;AACnB,cAAM,qBAAqB,IAAI;aAC5B;AACH,cAAM,MAAM,YAAY,IAAG;AAC3B,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,gBAAM,OAAO,MAAM,CAAC;AACpB,eAAK,MAAM;;AAEf,YAAI,MAAM;AACV,aAAK,OAAO,IAAI;;IAExB;IAEA,QAAK;AACD,WAAK,OAAO,KAAK,OAAO,IAAI,iBAAgB;AAC5C,WAAK,KAAK,QAAQ,YAAY,IAAG;IACrC;;;;AClEJ,MAAY;AAAZ,GAAA,SAAYC,iBAAc;AACtB,IAAAA,gBAAAA,gBAAA,QAAA,IAAA,CAAA,IAAA;AACA,IAAAA,gBAAAA,gBAAA,WAAA,IAAA,CAAA,IAAA;AACA,IAAAA,gBAAAA,gBAAA,aAAA,IAAA,CAAA,IAAA;AACA,IAAAA,gBAAAA,gBAAA,SAAA,IAAA,CAAA,IAAA;EACJ,GALY,mBAAA,iBAAc,CAAA,EAAA;;;ACFpB,MAAO,iBAAP,MAAqB;IASvB,YAAmB,YAAkB;AAAlB,WAAA,aAAA;AAPnB,WAAA,OAAe;AACf,WAAA,YAAoB;AAEpB,WAAA,YAA8B,oBAAI,IAAG;AACrC,WAAA,WAA6B,oBAAI,IAAG;AACpC,WAAA,YAAoB;IAEoB;IAExC,SAAS,OAAa;AAClB,YAAM,cAAc,KAAK;AACzB,YAAM,cAAc,QAAQ,KAAK;AACjC,WAAK,QAAQ;AACb,WAAK,YAAY,KAAK,IAAI,KAAK,WAAW,KAAK,IAAI;AACnD,aAAO,EAAE,aAAa,YAAW;IACrC;IAEA,KAAK,OAAkB;AACnB,WAAK,SAAS,IAAI,KAAK;AACvB,WAAK,aAAa,MAAM;IAC5B;IAEA,YAAS;AACL,WAAK,SAAS,MAAK;AACnB,UAAI,SAAS;AACb,iBAAW,SAAS,KAAK,WAAW;AAChC,cAAM,cAAc;AACpB,kBAAU,MAAM;;AAEpB,WAAK,OAAO;AACZ,WAAK,YAAY,KAAK,IAAI,KAAK,WAAW,KAAK,IAAI;IACvD;;;;ACbG,MAAM,SAAsB;AAC5B,MAAM,UAAuB;AAC7B,MAAM,UAAuB;AAC7B,MAAM,aAA0B;AAGhC,MAAM,mBAAiC;AACvC,MAAM,gBAA8B;AAGpC,MAAM,4BAAiD;AACvD,MAAM,YAAgC;AACtC,MAAM,UAA8B;AAEpC,MAAM,4BAA4B;AAClC,MAAM,2BAA2B;AACjC,MAAM,kCAAkC;AAGxC,MAAM,4BAA6C,UAAqB;AACxE,MAAM,6BAA8C,WAAsB;AAC1E,MAAM,6BAA8C,WAAsB;AAC1E,MAAM,gCAAiD,cAAyB;AAEhF,MAAM,8BAA+C,6BAAwC;AAC7F,MAAM,gCAAiD,aAAwB;AAC/E,MAAM,8BAA+C,WAAsB;AAE3E,MAAM,8BAA+C,oBAA+B;AACpF,MAAM,oCAAqD,iBAA4B;;;AC5CxF,MAAO,eAAP,MAAmB;IACrB,YAAY,SAAyB;IAAG;IACxC,iBAAiB,OAAe,QAAc;IAAS;IACvD,aAAaC,IAAYC,IAAY,OAAgB,QAAe;IAAS;IAC7E,WAAWC,SAAc;IAAS;IAClC,SAASC,IAAS;IAAS;IAC3B,SAAS,MAA4B,aAAgC;IAAS;IAC9E,gBAAgB,OAAgB;IAAS;IACzC,MAAM,QAA8B;IAAS;IAC7C,aAAaC,WAAkB;IAAS;IACxC,YAAYJ,IAAwBC,IAAwB,OAA4B,QAA2B;IAAS;IAC5H,aAAa,UAAe,aAAgC;IAAS;IACrE,mBAAmB,UAAyB,aAAoB;IAAS;IACzE,SAAS,MAAiB,OAAa,aAAgC;IAAS;IAChF,SAAS,MAAa;IAAS;IAC/B,UAAU,MAAe,aAAgC;IAAS;IAClE,aAAa,SAAkB,aAAgC;IAAS;IACxE,SAAM;IAAU;;;;AChBpB,MAAY;AAAZ,GAAA,SAAYI,oBAAiB;AACzB,IAAAA,mBAAAA,mBAAA,cAAA,IAAA,CAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,cAAA,IAAA,CAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,cAAA,IAAA,CAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,eAAA,IAAA,CAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,cAAA,IAAA,CAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,YAAA,IAAA,CAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,gBAAA,IAAA,CAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,YAAA,IAAA,CAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,aAAA,IAAA,CAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,eAAA,IAAA,CAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,cAAA,IAAA,EAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,sBAAA,IAAA,EAAA,IAAA;AACA,IAAAA,mBAAAA,mBAAA,qBAAA,IAAA,EAAA,IAAA;EACJ,GAdY,sBAAA,oBAAiB,CAAA,EAAA;AA6F7B,MAAM,mBAAmB,oBAAI,IAAG;AAM1B,WAAU,2BAAoD,MAAuB;AACvF,WAAO,iBAAiB,IAAI,IAAI;EACpC;;;ACrGA,WAAS,mBAAmB,SAAiB,MAAW,SAAgB;AACpE,UAAM,QAAQ,EAAE,SAAS,SAAS,OAAO,SAAS,KAAI;AACtD,SAAK,YAAY,KAAK;EAC1B;AAEM,WAAU,8BAA8B,SAAqB;AAC/D,UAAM,UAAU,QAAQ,KAAK;AAC7B,UAAM,UAAU,QAAQ;AACxB,UAAM,UAAU,2BAA2B,QAAQ,IAAI;AACvD,QAAI,SAAS;AACT,cAAQ,IAAI,mCAAmC,OAAO,UAAU,kBAAkB,QAAQ,IAAI,CAAC,EAAE;AACjG,cAAQ,OAAO;WACZ;AACH,YAAM,EAAE,KAAI,IAAK;AACjB,yBAAmB,SAAS,EAAE,KAAI,GAAI,4BAA4B,QAAQ,IAAI,aAAa;;EAEnG;;;ACFA,OAAK,YAAY;;;ACXX,MAAO,gBAAP,MAAoB;IACtB,YAAY,SAAyB;IAAG;IACxC,iBAAiB,OAAe,QAAc;IAAS;IACvD,aAAaC,IAAWC,IAAW,OAAe,QAAc;IAAS;IACzE,WAAWC,SAAc;IAAS;IAClC,WAAW,QAAiB;IAAS;IACrC,SAAS,MAAgB,aAAoB;IAAS;IACtD,gBAAgB,OAAgB;IAAS;IACzC,MAAM,QAAkB;IAAS;IACjC,aAAaC,WAAkB;IAAS;IACxC,YAAYH,IAAYC,IAAY,OAAgB,QAAe;IAAS;IAC5E,aAAa,UAAe,aAAoB;IAAS;IACzD,mBAAmB,UAAyB,aAAoB;IAAS;IACzE,SAAS,MAAiB,OAAa,aAAoB;IAAS;IACpE,SAAS,MAAa;IAAS;IAC/B,UAAU,MAAe,aAAgC;IAAS;IAClE,aAAa,SAAkB,aAAgC;IAAS;IACxE,SAAM;IAAU;;;;ACpBpB,MAAY;AAAZ,GAAA,SAAYG,aAAU;AAClB,IAAAA,YAAA,OAAA,IAAA;AACA,IAAAA,YAAA,QAAA,IAAA;AACA,IAAAA,YAAA,OAAA,IAAA;EACJ,GAJY,eAAA,aAAU,CAAA,EAAA;AAiBtB,MAAY;AAAZ,GAAA,SAAYC,gBAAa;AACrB,IAAAA,eAAAA,eAAA,YAAA,IAAA,CAAA,IAAA;AACA,IAAAA,eAAAA,eAAA,YAAA,IAAA,CAAA,IAAA;AACA,IAAAA,eAAAA,eAAA,cAAA,IAAA,CAAA,IAAA;AACA,IAAAA,eAAAA,eAAA,UAAA,IAAA,CAAA,IAAA;AACA,IAAAA,eAAAA,eAAA,QAAA,IAAA,CAAA,IAAA;EACJ,GANY,kBAAA,gBAAa,CAAA,EAAA;AAczB,MAAM,uBAAuB;IACzB,MAAM,cAAc;IACpB,aAAa,IAAI,UAAU,GAAG,GAAG,GAAG,CAAC;IACrC,aAAa;;AAGjB,MAAY;AAAZ,GAAA,SAAYC,iBAAc;AACtB,IAAAA,gBAAAA,gBAAA,QAAA,IAAA,CAAA,IAAA;AACA,IAAAA,gBAAAA,gBAAA,SAAA,IAAA,CAAA,IAAA;AACA,IAAAA,gBAAAA,gBAAA,YAAA,IAAA,CAAA,IAAA;EACJ,GAJY,mBAAA,iBAAc,CAAA,EAAA;AAMpB,MAAO,YAAP,MAAO,WAAS;IAElB,OAAO,gBAAa;AAChB,aAAO,WAAU;IACrB;IAaA,YAAY,UAA4B,CAAA,GAAE;AAX1C,WAAA,QAAgB;AAChB,WAAA,SAAiB;AAEjB,WAAA,gBAAwB;AAExB,WAAA,gBAAwB;AACxB,WAAA,iBAAyB;AAEzB,WAAA,UAAsB,WAAW;AAI7B,iBAAU,iBAAiB;AAC3B,WAAK,gBAAgB,QAAQ,iBAAiB;AAC9C,WAAK,UAAU,QAAQ,WAAW,WAAW;AAC7C,UAAI,QAAQ,YAAY,WAAW,OAAO;AACtC,aAAK,UAAU,IAAI,aAAa,OAAO;iBAChC,QAAQ,YAAY,WAAW,QAAQ;AAC9C,aAAK,UAAU,IAAI,cAAc,OAAO;aACrC;AACH,aAAK,UAAU,IAAI,aAAa,OAAO;AACvC,aAAK,SAAS,OAAO,YAAY,OAAO,WAAW;;AAEvD,cAAQ,IAAI,+BAA+B,KAAK,OAAO,EAAE;AACzD,WAAK,QAAQ,aAAa,GAAG,GAAG,KAAK,OAAO,KAAK,MAAM;AACvD,0BAAmB;IACvB;IAEA,SAAS,OAAe,QAAc;AAClC,WAAK,gBAAgB;AACrB,WAAK,iBAAiB;AAEtB,YAAM,cAAc,KAAK,MAAM,QAAQ,KAAK,aAAa;AACzD,YAAM,eAAe,KAAK,MAAM,SAAS,KAAK,aAAa;AAE3D,WAAK,QAAQ;AACb,WAAK,SAAS;AAEd,WAAK,QAAQ,iBAAiB,aAAa,YAAY;AACvD,WAAK,QAAQ,aAAa,GAAG,GAAG,aAAa,YAAY;AAEzD,eAAS,KAAK,YAAY,QAAQ,EAAE,OAAO,OAAM,CAAE;AACnD,aAAO;IACX;;AAGE,WAAU,iBAAc;AAC1B,WAAO,UAAU,cAAa;EAClC;AAEM,WAAU,kBAAe;AAC3B,WAAO,eAAc,EAAG;EAC5B;;;ACrGM,WAAU,UAAU,KAAQ;AAC9B,WAAO,OAAO,QAAQ,YAAY,eAAe;EACrD;AAYM,WAAU,cAAiB,OAAsBC,gBAAgB;AACnE,WAAO,UAAU,SAAYA,iBAAgB;EACjD;;;ACxBA,MAAY;AAAZ,GAAA,SAAYC,cAAW;AACnB,IAAAA,aAAAA,aAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,SAAA,IAAA,CAAA,IAAA;EACJ,GAHY,gBAAA,cAAW,CAAA,EAAA;AAoBjB,MAAO,YAAP,MAAgB;IAQlB,IAAI,YAAS;AACT,aAAO,KAAK,UAAU,YAAY;IACtC;IAEA,YAAoB,QAAwB,iBAA0B,OAAK;AAAvD,WAAA,SAAA;AAAwB,WAAA,iBAAA;AAXpC,WAAA,QAAQ,YAAY;AACpB,WAAA,QAAyB,CAAA;AAC1B,WAAA,cAAsB;AACrB,WAAA,UAAU;AAEV,WAAA,YAAY,oBAAI,IAAG;AA+BnB,WAAA,YAAY,CAAC,UAAuB;AACxC,aAAK,QAAQ,YAAY;AACzB,cAAM,WAAW,MAAM;AACvB,cAAM,EAAE,QAAO,IAAK;AACpB,YAAI,CAAC,SAAS,SAAS;AACnB,kBAAQ,MAAM,sBAAsB,SAAS,WAAW,wBAAwB,EAAE;eAC/E;AACH,kBAAQ,IAAI,sBAAsB,KAAK,WAAW,mBAAmB;;AAEzE,YAAI,KAAK;AAAa,eAAK,YAAY,QAAQ;AAC/C,YAAI,YAAY,UAAa,KAAK,UAAU,IAAI,OAAO,GAAG;AACtD,gBAAM,WAAW,KAAK,UAAU,IAAI,OAAO;AAC3C,cAAI,SAAS;AAAS,qBAAS,SAAS,IAAI;AAC5C,eAAK,UAAU,OAAO,OAAO;;AAEjC,YAAI,KAAK,MAAM,SAAS,GAAG;AACvB,gBAAM,UAAU,KAAK,MAAM,MAAK;AAChC,eAAK,KAAK,QAAQ,SAAS,QAAQ,SAAS,QAAQ,QAAQ;eACzD;AACH,cAAI,KAAK,gBAAgB;AACrB,iBAAK,OAAO,UAAS;;;MAGjC;AA/CI,WAAK,OAAO,YAAY,KAAK;IACjC;IAEA,KAAK,SAAwB,SAAyB,UAA8B;AAChF,YAAM,UAAU,KAAK;AACrB,cAAQ,UAAU;AAClB,UAAI,KAAK,UAAU,YAAY,MAAM;AACjC,aAAK,MAAM,KAAK,EAAE,SAAS,SAAS,SAAQ,CAAE;AAC9C,eAAO;;AAEX,WAAK,OAAO,YAAY,SAAS,OAAO;AACxC,WAAK,OAAO,YAAY,KAAK;AAC7B,UAAI;AAAU,aAAK,UAAU,IAAI,SAAS,QAAQ;AAClD,aAAO;IACX;IAEA,WAAc,SAAwB,UAAyB,CAAA,GAAE;AAC7D,aAAO,IAAI,QAAQ,CAAC,YAAW;AAC3B,aAAK,KAAK,SAAS,SAAS,OAAO;MACvC,CAAC;IACL;;;;AC/CE,MAAO,kBAAP,MAAsB;IAEhB,kBAAe;AACnB,aAAO,KAAK;IAChB;IAGA,YAAmB,SAAmB;AAAnB,WAAA,UAAA;AANX,WAAA,cAAc;AAOlB,YAAM,SAAS,IAAI,OAAO,SAAmB,EAAE,MAAM,eAAc,CAAE;AACrE,WAAK,gBAAgB,IAAI,UAAU,MAAM;IAC7C;IAEA,cAAc,QAA2B,SAAyB;AAC9D,YAAM,mBAAmB,OAAO,2BAA0B;AAC1D,YAAM,cAAc,KAAK,gBAAe;AACxC,YAAM,UAAU,EAAE,aAAa,MAAM,kBAAkB,cAAc,QAAQ,kBAAkB,QAAO;AACtG,WAAK,cAAc,KAAK,SAAS,CAAC,gBAAuB,CAAC;AAC1D,aAAO;IACX;IAEA,eAAe,YAAkC;AAC7C,YAAM,cAAc,KAAK,gBAAe;AACxC,YAAM,UAAU,EAAE,aAAa,MAAM,kBAAkB,eAAe,WAAU;AAChF,YAAM,UAAU,kCAAkC,UAAU;AAC5D,WAAK,cAAc,KAAK,SAAS,OAAO;AACxC,aAAO;IACX;IAEA,eAAe,aAAmB;IAAG;IAErC,OAAO,OAAe,QAAgB,aAAqB,cAAoB;AAC3E,YAAM,OAAO,kBAAkB;AAC/B,YAAM,UAAU,EAAE,MAAM,OAAO,QAAQ,aAAa,aAAY;AAChE,WAAK,cAAc,KAAK,OAAO;IACnC;;AAGJ,WAAS,kCAAkC,YAAkC;AACzE,UAAM,EAAE,QAAQ,QAAO,IAAK;AAC5B,UAAM,UAAyB,CAAA;AAC/B,UAAM,aAAa,oBAAI,IAAG;AAE1B,QAAI,UAAU,CAAC,UAAU,MAAM,GAAG;AAC9B,cAAQ,KAAM,OAAsB,MAAM;AAC1C,iBAAW,IAAK,OAAsB,MAAM;;AAGhD,eAAW,UAAU,SAAS;AAC1B,UAAI,UAAU,CAAC,UAAU,MAAM,KAAK,CAAC,WAAW,IAAI,OAAO,KAAK,MAAM,GAAG;AACrE,gBAAQ,KAAK,OAAO,KAAK,MAAM;AAC/B,mBAAW,IAAI,OAAO,KAAK,MAAM;;;AAIzC,WAAO;EACX;;;AC7DA,MAAY;AAAZ,GAAA,SAAYC,qBAAkB;AAC1B,IAAAA,oBAAAA,oBAAA,QAAA,IAAA,CAAA,IAAA;AACA,IAAAA,oBAAAA,oBAAA,QAAA,IAAA,CAAA,IAAA;AACA,IAAAA,oBAAAA,oBAAA,cAAA,IAAA,CAAA,IAAA;AACA,IAAAA,oBAAAA,oBAAA,SAAA,IAAA,CAAA,IAAA;AACA,IAAAA,oBAAAA,oBAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,oBAAAA,oBAAA,UAAA,IAAA,CAAA,IAAA;AACA,IAAAA,oBAAAA,oBAAA,MAAA,IAAA,CAAA,IAAA;EACJ,GARY,uBAAA,qBAAkB,CAAA,EAAA;;;ACM9B,MAAY;AAAZ,GAAA,SAAYC,kBAAe;AACvB,IAAAA,iBAAAA,iBAAA,OAAA,IAAA,CAAA,IAAA;AACA,IAAAA,iBAAAA,iBAAA,QAAA,IAAA,CAAA,IAAA;AACA,IAAAA,iBAAAA,iBAAA,UAAA,IAAA,CAAA,IAAA;EACJ,GAJY,oBAAA,kBAAe,CAAA,EAAA;AAM3B,MAAY;AAAZ,GAAA,SAAYC,kBAAe;AACvB,IAAAA,iBAAA,OAAA,IAAA;AACA,IAAAA,iBAAA,QAAA,IAAA;AACA,IAAAA,iBAAA,UAAA,IAAA;EACJ,GAJY,oBAAA,kBAAe,CAAA,EAAA;AAwB3B,MAAM,0BAA0B,IAAI;AACpC,MAAM,0BAA0B,KAAK;AAIrC,MAAI;AACE,WAAU,sBAAmB;AAC/B,UAAMC,UAAS,eAAc,EAAG;AAChC,UAAM,KAAKA,QAAO;AAElB,aAAS,qBAAqB,MAAY;AACtC,YAAM,SAAS,GAAG,aAAY;AAC9B,SAAG,WAAW,GAAG,gBAAgB,MAAM;AACvC,SAAG,WAAW,GAAG,gBAAgB,MAAM,GAAG,YAAY;AACtD,SAAG,WAAW,GAAG,gBAAgB,IAAI;AACrC,aAAO;IACX;AAEA,UAAM,MAAM,oBAAI,IAAG;AACnB,UAAM,eAAeA,QAAO;AAE5B,UAAM,cAAc;MAChB,QAAQ,qBAAqB,uBAAuB;MACpD,MAAM,IAAI,eAAe,IAAI,YAAY,uBAAuB,CAAC;MACjE,WAAW,IAAI,eAAe,YAAY;;AAE9C,QAAI,IAAI,gBAAgB,OAAO,WAAW;AAE1C,UAAM,eAAe;MACjB,QAAQ,qBAAqB,uBAAuB;MACpD,MAAM,IAAI,eAAe,IAAI,YAAY,uBAAuB,CAAC;MACjE,WAAW,IAAI,eAAe,YAAY;;AAE9C,QAAI,IAAI,gBAAgB,QAAQ,YAAY;AAE5C,UAAM,iBAAiB;MACnB,QAAQ,qBAAqB,uBAAuB;MACpD,MAAM,IAAI,eAAe,IAAI,YAAY,uBAAuB,CAAC;MACjE,WAAW,IAAI,eAAe,YAAY;;AAE9C,QAAI,IAAI,gBAAgB,UAAU,cAAc;AAEhD,oBAAgB;MACZ,QAAQ;;EAEhB;AAcM,WAAU,aAAa,MAAuB,MAAc,MAAY;AAC1E,QAAI,CAAC;AAAe,YAAM;AAC1B,UAAM,QAAQ,cAAc,OAAO,IAAI,IAAI;AAC3C,UAAM,cAAc,KAAK,KAAK,OAAO,MAAM,UAAU,UAAU;AAC/D,UAAM,QAAQ,cAAc,OAAO,IAAI,IAAI,EAAG,UAAU,SAAS,WAAW;AAC5E,UAAM,OAAO,cAAc,OAAO,IAAI,IAAI,EAAG,KAAK,SAAS,KAAK;AAChE,WAAO,EAAE,OAAO,MAAM,MAAM,KAAI;EACpC;AAEM,WAAU,aAAa,OAAkB;AAC3C,QAAI,CAAC;AAAe,YAAM;AAC1B,QAAI,CAAC;AAAO;AACZ,UAAMC,WAAU,eAAc,EAAG;AACjC,UAAM,KAAKA,SAAQ;AACnB,UAAM,aAAa,cAAc,OAAO,IAAI,MAAM,IAAI;AACtD,OAAG,WAAW,GAAG,gBAAgB,WAAW,MAAM;AAClD,OAAG,cAAc,GAAG,gBAAgB,MAAM,MAAM,aAAa,MAAM,KAAK,SAAS,GAAG,MAAM,KAAK,QAAQ,UAAU;EACrH;AAEM,WAAU,WAAWC,WAAoB,OAAkB;AAC7D,UAAMD,WAAU,eAAc,EAAG;AACjC,UAAM,KAAKA,SAAQ;AACnB,UAAM,aAAa,MAAM;AACzB,UAAM,aAAa,cAAe,OAAO,IAAI,UAAU;AACvD,UAAM,iBAAiBC,UAAS,cAAc,MAAM,IAAI;AACxD,OAAG,oBAAoBA,UAAS,SAAS,eAAe,cAAc,eAAe,YAAY;AACjG,OAAG,gBAAgB,GAAG,gBAAgB,eAAe,cAAc,WAAW,QAAQ,MAAM,MAAM,aAAa,MAAM,MAAM,WAAW;EAC1I;;;ACzHA,MAAY;AAAZ,EAAA,0BAAYC,qBAAkB;EAAE,GAApB,uBAAA,qBAAkB,CAAA,EAAA;AAS9B,MAAY;AAAZ,EAAA,0BAAYC,uBAAoB;EAAE,GAAtB,yBAAA,uBAAoB,CAAA,EAAA;AAMhC,MAAY;AAAZ,EAAA,0BAAYC,gBAAa;EAAE,GAAf,kBAAA,gBAAa,CAAA,EAAA;AAClB,MAAM,mBAAkC;AACxC,MAAM,WAA0B;AAChC,MAAM,YAA2B;AACjC,MAAM,oBAAmC;AACzC,MAAM,UAAyB;AAC/B,MAAM,kBAAiC;AACvC,MAAM,YAA2B;AACjC,MAAM,gBAA+B;AAO5C,MAAY;AAAZ,EAAA,0BAAYC,mBAAgB;EAAE,GAAlB,qBAAA,mBAAgB,CAAA,EAAA;AAqB5B,MAAY;AAAZ,EAAA,0BAAYC,kCAA+B;EAAE,GAAjC,oCAAA,kCAA+B,CAAA,EAAA;AAgC3C,MAAY;AAAZ,EAAA,0BAAYC,qBAAkB;EAAE,GAApB,uBAAA,qBAAkB,CAAA,EAAA;AA2B9B,MAAY;AAAZ,EAAA,0BAAYC,mBAAgB;EAAE,GAAlB,qBAAA,mBAAgB,CAAA,EAAA;AAM5B,MAAY;AAAZ,EAAA,0BAAYC,kBAAe;EAAE,GAAjB,oBAAA,kBAAe,CAAA,EAAA;AAU3B,MAAY;AAAZ,EAAA,0BAAYC,mBAAgB;EAAE,GAAlB,qBAAA,mBAAgB,CAAA,EAAA;;;ACxEtB,WAAU,mBAAmB,QAAkB;AACjD,QAAI,kBAAkB,cAAc;AAChC,aAAO;eACA,kBAAkB,YAAY;AACrC,aAAO;eACA,kBAAkB,YAAY;AACrC,aAAO;eACA,kBAAkB,WAAW;AACpC,aAAO;eACA,kBAAkB,aAAa;AACtC,aAAO;eACA,kBAAkB,aAAa;AACtC,aAAO;eACA,kBAAkB,YAAY;AACrC,aAAO;;AAEX,UAAM,uBAAuB,OAAO,MAAM;EAC9C;;;ACxEA,MAAM,aAAa,CAAA;AAEb,WAAU,cAA6B,IAA4B,MAAY;AACjF,QAAI,WAAW,IAAI,MAAM,QAAW;AAChC,aAAO,WAAW,IAAI;;AAG1B,QAAI;AACJ,YAAQ,MAAM;MACV,KAAK;AACD,oBAAY,GAAG,aAAa,qBAAqB,KAAK,GAAG,aAAa,yBAAyB,KAAK,GAAG,aAAa,4BAA4B;AAChJ;MACJ,KAAK;AACD,oBAAY,GAAG,aAAa,gCAAgC,KAAK,GAAG,aAAa,oCAAoC,KAAK,GAAG,aAAa,uCAAuC;AACjL;MACJ,KAAK;AACD,oBAAY,GAAG,aAAa,+BAA+B,KAAK,GAAG,aAAa,mCAAmC,KAAK,GAAG,aAAa,sCAAsC;AAC9K;MACJ,KAAK;AACD,oBAAY,GAAG,aAAa,gCAAgC,KAAK,GAAG,aAAa,uCAAuC;AACxH;MACJ;AACI,oBAAY,GAAG,aAAa,IAAI;;AAGxC,QAAI,cAAc,MAAM;AACpB,cAAQ,IAAI,+BAA+B,IAAI,iBAAiB;WAC7D;AACH,cAAQ,IAAI,+BAA+B,IAAI,SAAS;;AAE5D,eAAW,IAAI,IAAI;AACnB,WAAO;EACX;;;AChBA,MAAY;AAAZ,GAAA,SAAYC,iBAAc;AACtB,IAAAA,gBAAAA,gBAAA,UAAA,IAAA,CAAA,IAAA;AACA,IAAAA,gBAAAA,gBAAA,OAAA,IAAA,CAAA,IAAA;EACJ,GAHY,mBAAA,iBAAc,CAAA,EAAA;;;AChBpB,WAAU,kBAAkBC,IAAS;AACvC,QAAI,IAAI;AACR,WAAO,KAAK,IAAIA,EAAC,KAAK,IAAI;AACtB,MAAAA,MAAK;AACL;;AAEJ,WAAO;EACX;;;ACLA,MAAI,2BAA2B;AAC/B,MAAM,2BAA2B,oBAAI,IAAG;AAElC,WAAU,2BAAwB;AACpC,+BAA2B;AAC3B,6BAAyB,MAAK;EAClC;AAEM,WAAU,2BAA2B,SAA2B;AAClE,UAAM,KAAK,QAAQ;AACnB,QAAI,yBAAyB,IAAI,EAAE,GAAG;AAClC,aAAO,yBAAyB,IAAI,EAAE;WACnC;AACH,YAAM,OAAO;AACb,+BAAyB,IAAI,IAAI,IAAI;AACrC,aAAO;;EAEf;;;ACRA,MAAI,eAAe;AACnB,WAAS,kBAAe;AACpB,WAAO;EACX;AAuDA,MAAY;AAAZ,GAAA,SAAYC,gBAAa;AACrB,IAAAA,eAAAA,eAAA,QAAA,IAAA,CAAA,IAAA;AACA,IAAAA,eAAAA,eAAA,OAAA,IAAA,CAAA,IAAA;AACA,IAAAA,eAAAA,eAAA,UAAA,IAAA,CAAA,IAAA;AACA,IAAAA,eAAAA,eAAA,WAAA,IAAA,CAAA,IAAA;AACA,IAAAA,eAAAA,eAAA,WAAA,IAAA,CAAA,IAAA;AACA,IAAAA,eAAAA,eAAA,eAAA,IAAA,CAAA,IAAA;AACA,IAAAA,eAAAA,eAAA,aAAA,IAAA,CAAA,IAAA;EACJ,GARY,kBAAA,gBAAa,CAAA,EAAA;AA6BzB,MAAY;AAAZ,GAAA,SAAYC,cAAW;AACnB,IAAAA,aAAAA,aAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,OAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,QAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,QAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,QAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,iBAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,SAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,WAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,WAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,aAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,gBAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,WAAA,IAAA,EAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,QAAA,IAAA,EAAA,IAAA;EACJ,GAhBY,gBAAA,cAAW,CAAA,EAAA;AAkBvB,MAAY;AAAZ,GAAA,SAAYC,WAAQ;AAChB,IAAAA,UAAAA,UAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,UAAAA,UAAA,OAAA,IAAA,IAAA,IAAA;AACA,IAAAA,UAAAA,UAAA,MAAA,IAAA,IAAA,IAAA;EACJ,GAJY,aAAA,WAAQ,CAAA,EAAA;AAMpB,MAAY;AAAZ,GAAA,SAAYC,mBAAgB;AACxB,IAAAA,kBAAAA,kBAAA,OAAA,IAAA,CAAA,IAAA;AACA,IAAAA,kBAAAA,kBAAA,MAAA,IAAA,GAAA,IAAA;AACA,IAAAA,kBAAAA,kBAAA,OAAA,IAAA,GAAA,IAAA;AACA,IAAAA,kBAAAA,kBAAA,WAAA,IAAA,GAAA,IAAA;AACA,IAAAA,kBAAAA,kBAAA,SAAA,IAAA,GAAA,IAAA;AACA,IAAAA,kBAAAA,kBAAA,UAAA,IAAA,GAAA,IAAA;AACA,IAAAA,kBAAAA,kBAAA,cAAA,IAAA,GAAA,IAAA;AACA,IAAAA,kBAAAA,kBAAA,QAAA,IAAA,GAAA,IAAA;EACJ,GATY,qBAAA,mBAAgB,CAAA,EAAA;AAW5B,MAAY;AAAZ,GAAA,SAAYC,cAAW;AACnB,IAAAA,aAAAA,aAAA,UAAA,IAAA,GAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,UAAA,IAAA,GAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,UAAA,IAAA,GAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,UAAA,IAAA,GAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,KAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,MAAA,IAAA,CAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,kBAAA,IAAA,GAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,kBAAA,IAAA,GAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,kBAAA,IAAA,GAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,kBAAA,IAAA,GAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,oBAAA,IAAA,KAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,oBAAA,IAAA,KAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,YAAA,IAAA,KAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,YAAA,IAAA,KAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,kBAAA,IAAA,GAAA,IAAA;EACJ,GAhBY,gBAAA,cAAW,CAAA,EAAA;AAkBvB,MAAY;AAAZ,GAAA,SAAYC,YAAS;AACjB,IAAAA,WAAAA,WAAA,KAAA,IAAA,KAAA,IAAA;AACA,IAAAA,WAAAA,WAAA,UAAA,IAAA,KAAA,IAAA;AACA,IAAAA,WAAAA,WAAA,iBAAA,IAAA,KAAA,IAAA;EACJ,GAJY,cAAA,YAAS,CAAA,EAAA;AAiBrB,MAAY;AAAZ,GAAA,SAAYC,cAAW;AACnB,IAAAA,aAAAA,aAAA,WAAA,IAAA,IAAA,IAAA;AACA,IAAAA,aAAAA,aAAA,kBAAA,IAAA,IAAA,IAAA;EACJ,GAHY,gBAAA,cAAW,CAAA,EAAA;AAKvB,MAAM,UAAU;AAEhB,MAAM,cAAc;AACpB,MAAM,iCAAiC;AACvC,MAAM,eAAe;AACrB,MAAM,iBAAiB;AACvB,MAAM,wBAAwB;AAC9B,MAAM,mBAAmB;AACzB,MAAM,cAAc;AAEpB,WAAS,sBAAsB,QAAc;AACzC,QAAI,SAAS;AACb,QAAI,OAAO,OAAO,8BAA8B,IAAI,IAAI;AACpD,aAAO;;AAGX,QAAI,OAAO,OAAO,YAAY,IAAI,IAAI;AAClC,gBAAU;;AAEd,QAAI,OAAO,OAAO,cAAc,IAAI,IAAI;AACpC,gBAAU;;AAEd,QAAI,OAAO,OAAO,qBAAqB,IAAI,IAAI;AAC3C,gBAAU;;AAEd,QAAI,OAAO,OAAO,gBAAgB,IAAI,IAAI;AACtC,gBAAU;;AAEd,WAAO;EACX;AAEA,WAAS,cAAc,QAAgB,WAA4B;AAC/D,QAAI;AACJ,UAAM,YAAmD,CAAA;AACzD,YAAQ,UAAU,YAAY,KAAK,MAAM,MAAM,MAAM;AACjD,gBAAU,KAAK,EAAE,OAAO,QAAQ,CAAC,GAAG,KAAK,QAAQ,CAAC,EAAC,CAAE;;AAGzD,eAAW,YAAY,WAAW;AAC9B,YAAM,UAAU,UAAU,SAAS,GAAG,KAAK,uBAAuB,SAAS,GAAG;AAC9E,eAAS,OAAO,QAAQ,SAAS,OAAO,OAAO;;AAGnD,WAAO;EACX;AAEM,WAAU,gBAAgB,YAA0C;AAE1E,UAAM,KAAK,gBAAe,EAAiB;AAEvC,QAAI,gBAAgB,cAAc,WAAW,eAAe,EAAE;AAC9D,QAAI,kBAAkB,cAAc,WAAW,iBAAiB,EAAE;AAClE,QAAI,YAAY,cAAc,WAAW,WAAW,CAAA,CAAE;AACtD,QAAI,OAAO,cAAc,WAAW,MAAM,kBAAkB;AAC5D,YAAQ,IAAI,mBAAmB,IAAI,EAAE;AAErC,QAAI,QAAQ,cAAc,WAAW,OAAO,CAAA,CAAE;AAC9C,UAAM,UAAU,cAAc,MAAM,SAAS,KAAK;AAClD,UAAM,mBAAmB,cAAc,MAAM,kBAAkB,YAAY,GAAG;AAC9E,UAAM,mBAAmB,cAAc,MAAM,kBAAkB,YAAY,gBAAgB;AAC3F,UAAM,mBAAmB,cAAc,MAAM,kBAAkB,YAAY,QAAQ;AACnF,UAAM,mBAAmB,cAAc,MAAM,kBAAkB,YAAY,gBAAgB;AAC3F,UAAM,aAAa,cAAc,MAAM,YAAY,UAAU,GAAG;AAChE,UAAM,aAAa,cAAc,MAAM,YAAY,UAAU,GAAG;AAEhE,QAAI,qBAAqB,cAAc,WAAW,oBAAoB,iBAAiB,SAAS;AAChG,QAAI,cAAc,cAAc,WAAW,aAAa,IAAI;AAC5D,QAAI,eAAe,cAAc,WAAW,cAAc,YAAY,gBAAgB;AACtF,QAAI,YAAY,cAAc,WAAW,WAAW,SAAS,IAAI;AAEjE,QAAI,WAAW,iBAAiB;AAC5B,YAAM,QAAQ,WAAW,gBAAgB,MAAM,kBAAkB;AACjE,uBAAiB,MAAM,CAAC;AACxB,yBAAmB,MAAM,CAAC;;AAG9B,QAAI,CAAC;AAAe,YAAM;AAC1B,QAAI,CAAC;AAAiB,YAAM;AAE5B,QAAI,gBAAgB,cAAc,OAAO,WAAW,IAAI,KAAK,KAAK;AAClE,QAAI,kBAAkB,gBAAgB,OAAO,WAAW,IAAI,KAAK,KAAK;AACtE,UAAM,UAAU,WAAW,WAAW,CAAA;AACtC,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,EAAE,GAAG;AACrC,uBAAiB,WAAW,QAAQ,CAAC,CAAC;;AACtC,yBAAmB,WAAW,QAAQ,CAAC,CAAC;;;AAG5C,oBAAgB,cAAc,eAAe,SAAS;AACtD,sBAAkB,cAAc,iBAAiB,SAAS;AAE1D,qBAAiB,sBAAsB,aAAa;AACpD,uBAAmB,sBAAsB,eAAe;AAExD,oBAAgB,gBAAgB;AAChC,sBAAkB,kBAAkB;AAEpC,UAAM,UAAU,GAAG,cAAa;AAChC,QAAI,YAAY,MAAM;AAClB,cAAQ,KAAK,YAAY,IAAI,eAAe;AAC5C,aAAO;;AAGX,UAAM,uBAAuB,aAAa,IAAI,eAAe,GAAG,aAAa;AAC7E,QAAI,yBAAyB,MAAM;AAC/B,cAAQ,KAAK,YAAY,IAAI,8BAA8B;AAC3D,aAAO;;AAEX,UAAM,yBAAyB,aAAa,IAAI,iBAAiB,GAAG,eAAe;AACnF,QAAI,2BAA2B,MAAM;AACjC,cAAQ,KAAK,YAAY,IAAI,gCAAgC;AAC7D,aAAO;;AAGX,OAAG,aAAa,SAAS,oBAAoB;AAC7C,OAAG,aAAa,SAAS,sBAAsB;AAC/C,OAAG,YAAY,OAAO;AAGtB,UAAM,WAAsB,CAAA;AAC5B,UAAMC,YAAW;MACb;MACA,OAAO;MACP,IAAI,gBAAe;MAEnB;MACA;MACA;MAEA,eAAe,CAAA;MACf;MACA;MACA;MACA;MACA;MACA;;AAGJ,0BAAsBA,WAAU,WAAW,YAAY,CAAA,CAAE;AACzD,WAAOA;EACX;AAEM,WAAU,sBAAsBA,WAAoB,aAAgC;AACtF,UAAM,qBAAqB,oBAAI,IAAG;AAClC,UAAM,EAAE,eAAe,UAAU,QAAO,IAAKA;AAE7C,UAAMC,WAAU,eAAc,EAAG;AACjC,UAAM,KAAKA,SAAQ;AAEnB,QAAI,UAAU;AACV,eAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,EAAE,GAAG;AACzC,cAAM,eAAe,YAAY,CAAC;AAClC,cAAM,EAAE,MAAM,MAAM,SAAS,eAAAC,eAAa,IAAK;AAG/C,YAAI,KAAK,OAAO,IAAI,IAAI,IAAI;AACxB,gBAAM,cAAc,KAAK,MAAM,IAAI,EAAE,CAAC;AACtC,cAAI,kBAAkB,mBAAmB,IAAI,WAAW;AACxD,cAAI,CAAC,iBAAiB;AAClB,8BAAkB,CAAC,YAAY;AAC/B,+BAAmB,IAAI,aAAa,eAAe;iBAChD;AACH,4BAAgB,KAAK,YAAY;;AAErC;;AAGJ,cAAM,WAAW,GAAG,mBAAmB,SAAS,IAAI;AACpD,YAAI,CAAC,UAAU;AACX;;AAGJ,YAAI;AACJ,gBAAQ,MAAM;UACV,KAAK,YAAY;AACb,qBAAS,aAAa,KAAK,QAAW,IAAI,QAAQ;AAClD;UACJ,KAAK,YAAY;AACb,qBAAS,cAAc,KAAK,QAAW,IAAI,QAAQ;AACnD;UACJ,KAAK,YAAY;AACb,qBAAS,cAAc,KAAK,QAAW,IAAI,QAAQ;AACnD;UACJ,KAAK,YAAY;AACb,qBAAS,YAAY,KAAK,QAAW,IAAI,QAAQ;AACjD;UACJ,KAAK,YAAY;AACb,qBAAS,WAAW,KAAK,QAAW,IAAI,QAAQ;UACpD,KAAK,YAAY;UACjB,KAAK,YAAY;AACb,qBAAS,cAAc,KAAK,QAAW,IAAI,QAAQ;AACnD;UACJ,KAAK,YAAY;AACb,qBAAS,YAAY,KAAK,QAAW,IAAI,QAAQ;AACjD;UACJ,KAAK,YAAY;AACb,qBAAS,YAAY,KAAK,QAAW,IAAI,QAAQ;AACjD;UACJ,KAAK,YAAY;UACjB,KAAK,YAAY;AACb,qBAAS,iBAAiB,KAAK,QAAW,IAAI,QAAQ;AACtD;UACJ,KAAK,YAAY;AACb,qBAAS,oBAAoB,KAAK,QAAW,IAAI,QAAQ;AACzD;UACJ;AACI,kBAAM,IAAI,MAAM,yBAAyB,IAAI,EAAE;;AAGvD,cAAM,aAAa,EAAE,MAAM,QAAQ,KAAI;AACvC,mBAAW,UAAU,WAAW;AAChC,YAAIA,mBAAkB;AAAW,qBAAW,gBAAgBA;AAE5D,sBAAc,IAAI,IAAI;AACtB,iBAAS,KAAK,UAAU;;;AAKhC,eAAW,CAAC,aAAa,eAAe,KAAK,oBAAoB;AAC7D,UAAI,gBAAgB,UAAU;AAAG;AACjC,YAAM,eAAe,GAAG,qBAAqB,SAAS,WAAW;AACjE,YAAM,cAAc,GAAG,+BAA+B,SAAS,cAAc,GAAG,uBAAuB;AAEvG,YAAM,QAAQ,gBAAgB,IAAI,CAAC,YAAY,QAAQ,KAAK,MAAM,IAAI,EAAE,CAAC,CAAE;AAC3E,YAAM,UAAU,GAAG,kBAAkB,SAAS,KAAK,EAAG,OAAO,CAAC,OAAO,UAAS;AAC1E,YAAI,QAAQ,GAAG,iBAAiB;AAC5B,kBAAQ,KAAK,kBAAkB,WAAW,IAAI,MAAM,KAAK,CAAC,aAAa;AACvE,iBAAO;;AAEX,eAAO;MACX,CAAC;AAED,YAAM,iBAAiB;QACnB,MAAM;QACN,MAAM,YAAY;QAClB,SAAS;QACT;QACA;QACA,OAAO,CAAA;;AAGX,YAAM,UAAU,GAAG,kBAAkB,SAAS,SAAS,GAAG,cAAc;AACxE,eAAS,IAAI,GAAG,IAAI,gBAAgB,QAAQ,EAAE,GAAG;AAC7C,cAAM,EAAE,MAAM,MAAM,SAAS,eAAAA,eAAa,IAAK,gBAAgB,CAAC;AAChE,cAAM,cAAc,QAAQ,CAAC;AAC7B,cAAM,YAAY,kBAAkB,IAAI;AACxC,cAAM,YAAY,KAAK,MAAM,IAAI,EAAE,CAAC;AACpC,cAAM,OAAO,EAAE,MAAM,WAAW,MAAM,SAAS,eAAAA,gBAAe,aAAa,UAAS;AACpF,uBAAe,MAAM,SAAS,IAAI;;AAGtC,oBAAc,WAAW,IAAI;AAC7B,eAAS,KAAK,cAAc;;AAGhC,UAAM,cAAc,cAAc,gBAAgB,KAAK;AACvD,QAAI,aAAa;AACb,YAAMD,WAAU,eAAc,EAAG;AACjC,YAAM,gBAAgBA,SAAQ;AAC9B,YAAM,OAAO,KAAK,KAAK,YAAY,cAAc,aAAa,IAAI;AAClE,MAAAD,UAAS,cAAc,aAAa,gBAAgB,OAAO,MAAM,gBAAgB,KAAK;;EAE9F;AAmBA,MAAM,iBAAiB;AACvB,WAAS,cAAc,GAAW,OAAe,KAAa,SAAe;AACzE,QAAI,SAAS;AACb,aAAS,IAAI,SAAS,KAAK,GAAG,IAAI,SAAS,GAAG,GAAG,KAAK;AAClD,gBAAU,QAAQ,QAAQ,gBAAgB,MAAM,IAAI,GAAG,EAAE,QAAQ,wBAAwB,EAAE,SAAQ,CAAE;;AAEzG,WAAO;EACX;AAEA,WAAS,aAAa,IAAQ,QAAgB,MAAS;AACnD,aAAS,OAAO,QAAQ,gBAAgB,aAAa;AACrD,UAAM,SAAS,GAAG,aAAa,IAAI;AACnC,OAAG,aAAa,QAAQ,MAAM;AAC9B,OAAG,cAAc,MAAM;AACvB,UAAM,aAAa,GAAG,iBAAiB,MAAM;AAC7C,QAAI,cAAc,IAAI;AAClB,YAAM,QAAQ,OAAO,MAAM,IAAI;AAC/B,YAAM,aAAa,MAAM;AACzB,YAAM,UAAU,kBAAkB,UAAU;AAC5C,cAAQ,KACJ,MACK,IAAI,CAAC,GAAG,MAAK;AACV,eAAO,GAAG,IAAI,OAAO,UAAU,kBAAkB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC;MACzE,CAAC,EACA,KAAK,IAAI,CAAC;AAEnB,cAAQ,KAAK;EAAuB,UAAU,EAAE;AAChD,aAAO;;AAEX,WAAO;EACX;AAEA,WAAS,kBAAkB,MAAiB;AACxC,YAAQ,MAAM;MACV,KAAK,YAAY;MACjB,KAAK,YAAY;MACjB,KAAK,YAAY;MACjB,KAAK,YAAY;AACb,eAAO;MACX,KAAK,YAAY;AACb,eAAO;MACX,KAAK,YAAY;AACb,eAAO;MACX,KAAK,YAAY;MACjB,KAAK,YAAY;AACb,eAAO;MACX,KAAK,YAAY;AACb,eAAO;MACX,KAAK,YAAY;AACb,eAAO;MACX,KAAK,YAAY;MACjB,KAAK,YAAY;MACjB,KAAK,YAAY;MACjB,KAAK,YAAY;AACb,eAAO;MACX;AACI,cAAM,IAAI,MAAM,yBAAyB,IAAI,EAAE;;EAE3D;AAEA,WAAS,aAAa,IAAQ,UAAgC,OAA4B;AACtF,QAAI,iBAAiB,cAAc;AAC/B,SAAG,WAAW,UAAU,KAAK;WAC1B;AACH,SAAG,UAAU,UAAU,KAAK;;EAEpC;AAEA,WAAS,cAAc,IAAQ,UAAgC,OAA4B;AACvF,QAAI,iBAAiB,cAAc;AAC/B,SAAG,WAAW,UAAU,KAAK;WAC1B;AACH,SAAG,WAAW,UAAU,MAAM,QAAQ;;EAE9C;AAEA,WAAS,cAAc,IAAQ,UAAgC,OAAa;AACxE,QAAI,iBAAiB,cAAc;AAC/B,SAAG,WAAW,UAAU,KAAK;WAC1B;AACH,SAAG,WAAW,UAAU,MAAM,QAAQ;;EAE9C;AAEA,WAAS,cAAc,IAAQ,UAAgC,OAA4B;AACvF,QAAI,iBAAiB,cAAc;AAC/B,SAAG,WAAW,UAAU,KAAK;WAC1B;AACH,SAAG,WAAW,UAAU,MAAM,QAAQ;;EAE9C;AAEA,WAAS,YAAY,IAAQ,UAAgC,OAAa;AACtE,OAAG,WAAW,UAAU,KAAK;EACjC;AAEA,WAAS,WAAW,IAAQ,UAAgC,OAAa;AACrE,OAAG,UAAU,UAAU,KAAK;EAChC;AAEA,WAAS,YAAY,IAAQ,UAAgC,OAA0B;AACnF,QAAI,iBAAiB,cAAc;AAC/B,SAAG,iBAAiB,UAAU,OAAO,KAAK;WACvC;AACH,SAAG,iBAAiB,UAAU,OAAO,MAAM,QAAQ;;EAE3D;AAEA,WAAS,YAAY,IAAQ,UAAgC,OAA0B;AACnF,QAAI,iBAAiB,cAAc;AAC/B,SAAG,iBAAiB,UAAU,OAAO,KAAK;WACvC;AACH,SAAG,iBAAiB,UAAU,OAAO,MAAM,QAAQ;;EAE3D;AAEA,WAAS,iBAAiB,IAAQ,UAAgC,SAA2B;AACzF,QAAI,CAAC;AAAS;AACd,UAAM,OAAO,2BAA2B,OAAO;AAC/C,OAAG,cAAc,GAAG,WAAW,IAAI;AACnC,OAAG,YAAY,QAAQ,cAAc,QAAQ,aAAc;AAC3D,OAAG,UAAU,UAAU,IAAI;EAC/B;AAEA,WAAS,oBAAoB,IAAQ,UAAgC,SAA2B;AAC5F,QAAI,CAAC;AAAS;AACd,UAAM,OAAO,2BAA2B,OAAO;AAC/C,OAAG,cAAc,GAAG,WAAW,IAAI;AACnC,OAAG,YAAY,QAAQ,cAAc,QAAQ,aAAc;AAC3D,OAAG,UAAU,UAAU,IAAI;EAC/B;;;ACvjBM,MAAO,eAAP,MAAmB;IAoCrB,YAAY,SAAyB;AA1BrC,WAAA,gBAAsB,IAAI,KAAI;AAC9B,WAAA,WAAiB,IAAI,KAAI;AAEzB,WAAA,WAAqB,IAAI,SAAQ;AACjC,WAAA,YAAqB;AAErB,WAAA,eAAe;QACX,MAAM,cAAc;QACpB,aAAa,IAAI,UAAU,GAAG,GAAG,GAAG,CAAC;QACrC,aAAa;;AAGjB,WAAA,gBAA2C,oBAAI,IAAG;AASlD,WAAA,QAAgB;AAChB,WAAA,SAAiB;AAEjB,WAAA,yBAAkC;AAiPlC,WAAA,WAAW,CAAC,MAAiB,QAAuB,gBAA8B;AAC9E,YAAI,KAAK;AAAW,eAAK,SAAS,YAAY,YAAY,aAAa,MAAM,qBAAqB,IAAI;AAEtG,cAAMG,MAAK,KAAK;AAChB,YAAI,KAAK,aAAa;AAAW,gBAAM,IAAI,MAAM,oBAAoB;AAErE,cAAMC,YAAW,KAAK;AACtB,cAAM,eAAeA,UAAS;AAC9B,iBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,EAAE,GAAG;AAC1C,gBAAM,cAAc,aAAa,CAAC;AAClC,gBAAM,OAAO,YAAY;AACzB,cAAI;AACJ,cAAI,QAAQ,gBAAgB,aAAa,IAAI,GAAG;AAC5C,sBAAU,OAAO,eAAe,aAAa,IAAI;iBAC9C;AACH,sBAAU,KAAK,SAAS,IAAI,KAAKA,UAAS,cAAc,IAAI,EAAE;;AAIlE,gBAAM,iBAAiB,KAAK,cAAc,IAAI,IAAI;AAClD,cAAI,mBAAmB,WAAW,CAAC,KAAK,aAAa,IAAI,IAAI;AAAG;AAGhE,cAAI,KAAK;AAAW,iBAAK,SAAS,YAAY,kBAAkB,GAAG,IAAI,IAAI,OAAO,IAAI,SAAS,qBAAqB,cAAc;AAClI,cAAI,YAAY;AAAW,wBAAY,OAAO,OAAO;AACrD,cAAI,KAAK;AAAW,iBAAK,SAAS,UAAU,gBAAgB;AAC5D,eAAK,cAAc,IAAI,MAAM,OAAO;;AAGxC,cAAM,iBAAiBA,UAAS,cAAc,gBAAgB,MAAM;AACpE,cAAM,gBAAgB,QAAQ;AAC9B,YAAI,iBAAiB,gBAAgB;AACjC,qBAAWA,WAAU,aAAa;;AAGtC,YAAI,KAAK,cAAc;AAAW;AAClC,QAAAD,IAAG,gBAAgB,KAAK,SAAS;AAEjC,YAAI,KAAK,UAAU,QAAW;AAC1B,cAAI,KAAK,SAAS;AACd,YAAAA,IAAG,aAAa,KAAK,MAAM,KAAK,MAAM,OAAOA,IAAG,cAAc,KAAK,MAAM,KAAK;iBAC3E;AACH,YAAAA,IAAG,WAAW,KAAK,MAAM,KAAK,MAAM,OAAO,KAAK,MAAM,KAAK;;eAE5D;AACH,cAAI,KAAK,SAAS;AACd,YAAAA,IAAG,aAAa,KAAK,MAAM,KAAK,kBAAkBA,IAAG,cAAc,CAAC;iBACjE;AACH,YAAAA,IAAG,WAAW,KAAK,MAAM,GAAG,KAAK,gBAAgB;;;AAIzD,YAAI,KAAK;AAAW,eAAK,SAAS,UAAU,UAAU;MAC1D;AAnSI,YAAM,aAAa,CAAA;AACnB,iBAAW,wBAAwB,QAAQ,oBAAoB,QAAQ,QAAQ,0BAA0B;AACzG,iBAAW,YAAY,QAAQ,cAAc;AAC7C,iBAAW,kBAAkB,QAAQ,mBAAmB;AACvD,iBAAmB,eAAe,QAAQ,eAAe;AAC1D,YAAM,SAAS,QAAQ,UAAU,SAAS,qBAAqB,QAAQ,EAAE,CAAC;AAC1E,UAAI,CAAC;AAAQ,cAAM,IAAI,MAAM,mBAAmB;AAChD,WAAK,SAAS;AACd,WAAK,yBAAyB,QAAQ,2BAA2B;AAEjE,UAAI,KAAK,OAAO,WAAW,UAAU,UAAU;AAC/C,UAAI,OAAO;AAAM,cAAM;AAEvB,WAAK,KAAK;AAEV,oBAAc,IAAI,0BAA0B;AAC5C,oBAAc,IAAI,wBAAwB;AAC1C,oBAAc,IAAI,kBAAkB;AAEpC,WAAK,mBAAmB,GAAG,aAAa,GAAG,gBAAgB;AAC3D,WAAK,0BAA0B,GAAG,aAAa,GAAG,uBAAuB;AACzE,WAAK,wBAAwB,GAAG,aAAa,GAAG,qBAAqB;AACrE,WAAK,2BAA2B,GAAG,aAAa,GAAG,+BAA+B;AAClF,WAAK,sBAAsB,GAAG,aAAa,GAAG,sBAAsB;AACpE,UAAI,GAAG,aAAa,GAAG,8BAA8B,IAAI;AAAG,cAAM;AAElE,UAAI,QAAQ,0BAA0B,qBAAqB,UAAU,uBAAuB,QAAQ;AAChG,cAAM,UAAU,QAAQ,WAAW,WAAW;AAC9C,aAAK,SAAS,IAAI,gBAAgB,OAAO;AACzC,aAAK,OAAO,cAAc,SAAS,eAAe,QAAQ,GAAwB,OAAO;;IAEjG;IAEA,iBAAiB,OAAe,QAAc;AAC1C,WAAK,QAAQ;AACb,WAAK,SAAS;AACd,WAAK,OAAO,QAAQ;AACpB,WAAK,OAAO,SAAS;IACzB;IAEA,WAAWE,SAAc;AACrB,WAAK,SAASA;AACd,WAAK,cAAc,MAAK;AACxB,WAAK,qBAAoB;IAC7B;IAEA,SAAS,MAAgB,aAAoB;AAGzC,WAAK,cAAc,KAAK,KAAK,QAAQ;AACrC,YAAM,KAAK,KAAK;AAChB,UAAI,CAAC,MAAM;AACP,YAAI,KAAK,iBAAiB;AAAW;AAGrC,YAAI,KAAK,WAAW;AAChB,cAAI,KAAK;AAAc,iBAAK,SAAS,UAAU,UAAU;;AAG7D,WAAG,gBAAgB,GAAG,aAAa,IAAI;AACvC,aAAK,aAAa,GAAG,GAAG,KAAK,OAAO,KAAK,MAAM;AAC/C,aAAK,eAAe;AACpB;;AAGJ,UAAI,KAAK,iBAAiB,MAAM;AAC5B;;AAIJ,UAAI,KAAK,iBAAiB,UAAa,KAAK;AAAW,aAAK,SAAS,UAAU,UAAU;AAEzF,UAAI,KAAK;AAAW,aAAK,SAAS,YAAY,YAAY,eAAe,KAAK,MAAM,MAAM,qBAAqB,IAAI;AACnH,SAAG,gBAAgB,GAAG,aAAa,KAAK,iBAAiB;AACzD,WAAK,aAAa,GAAG,GAAG,KAAK,OAAO,KAAK,MAAM;AAG/C,UAAI,OAAO;AACX,UAAI,KAAK,sBAAsB,eAAe,OAAO;AACjD,cAAM,QAAQ,KAAK;AACnB,WAAG,WAAW,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;AAChD,gBAAQ,GAAG;;AAEf,UAAI,KAAK,sBAAsB,eAAe,OAAO;AACjD,WAAG,WAAW,KAAK,WAAY;AAC/B,gBAAQ,GAAG;;AAEf,UAAI,SAAS;AAAG,WAAG,MAAM,IAAI;AAE7B,WAAK,YAAY,KAAK;AAEtB,WAAK,eAAe;AACpB,WAAK,cAAc,MAAK;IAC5B;IAEA,gBAAgB,OAAgB;AAC5B,WAAK,aAAa,YAAY,KAAK,KAAK;IAC5C;IAEA,MAAM,QAAkB;AACpB,UAAI,CAAC;AAAQ,iBAAS,KAAK;AAE3B,UAAI,OAAO,SAAS,cAAc;AAAQ;AAE1C,WAAK,OAAO,OAAO,cAAc,gBAAgB,GAAG;AAChD,aAAK,GAAG,WAAW,OAAO,YAAY,GAAG,OAAO,YAAY,GAAG,OAAO,YAAY,GAAG,OAAO,YAAY,CAAC;;AAG7G,WAAK,GAAG,WAAW,OAAO,WAAW;AAErC,UAAI,OAAO;AACX,WAAK,OAAO,OAAO,cAAc,gBAAgB;AAAG,gBAAQ,KAAK,GAAG;AACpE,WAAK,OAAO,OAAO,cAAc,gBAAgB;AAAG,gBAAQ,KAAK,GAAG;AACpE,WAAK,OAAO,OAAO,cAAc,kBAAkB;AAAG,gBAAQ,KAAK,GAAG;AAEtE,WAAK,GAAG,MAAM,IAAI;IACtB;IAEA,aAAaC,IAAWC,IAAW,OAAe,QAAc;AAC5D,cAAQ,KAAK,IAAI,GAAG,KAAK;AACzB,eAAS,KAAK,IAAI,GAAG,MAAM;AAC3B,WAAK,cAAc,KAAK,KAAK,QAAQ;AACrC,WAAK,SAAS,IAAID,IAAGC,IAAG,OAAO,MAAM;AACrC,WAAK,GAAG,SAASD,IAAGC,IAAG,OAAO,MAAM;IACxC;IAEA,aAAaH,WAAkB;AAC3B,UAAI,CAACA,UAAS,OAAO;AACjB,gBAAQ,MAAM,0BAA0BA,UAAS,QAAQ,EAAE,EAAE;AAC7D;;AAGJ,+BAAwB;AAExB,UAAI,KAAK,aAAaA,WAAU;AAC5B;;AAIJ,YAAM,KAAK,KAAK;AAChB,UAAI,KAAK;AAAW,aAAK,SAAS,YAAY,gBAAgBA,UAAS,MAAMA,WAAU,qBAAqB,QAAQ;AACpH,SAAG,WAAWA,UAAS,OAAO;AAE9B,YAAM,EAAE,WAAW,aAAa,oBAAoB,cAAc,MAAK,IAAKA;AAE5E,UAAI,KAAK,aAAa,UAAa,cAAc,KAAK,SAAS,WAAW;AACtE,YAAI,uBAAuB,iBAAiB,SAAS,aAAa,SAAS,MAAM;AAC7E,aAAG,QAAQ,GAAG,SAAS;eACpB;AACH,aAAG,OAAO,GAAG,SAAS;AACtB,aAAG,SAAS,SAAS;;;AAI7B,UAAI,KAAK,aAAa,UAAa,uBAAuB,KAAK,SAAS,oBAAoB;AACxF,YAAI,uBAAuB,iBAAiB,OAAO;AAC/C,aAAG,QAAQ,GAAG,UAAU;eACrB;AACH,aAAG,OAAO,GAAG,UAAU;AACvB,aAAG,UAAU,kBAAkB;;;AAIvC,UAAI,KAAK,aAAa,UAAa,gBAAgB,KAAK,SAAS,aAAa;AAC1E,WAAG,UAAU,WAAW;;AAG5B,UAAI,KAAK,aAAa,UAAa,iBAAiB,KAAK,SAAS,cAAc;AAC5E,WAAG,UAAU,YAAY;;AAG7B,UAAI,KAAK,aAAa,UAAa,MAAM,YAAY,KAAK,SAAS,MAAM,SAAS;AAC9E,YAAI,SAAS,MAAM,SAAS;AACxB,aAAG,OAAO,GAAG,KAAK;eACf;AACH,aAAG,QAAQ,GAAG,KAAK;;;AAI3B,UACI,KAAK,aAAa,UAClB,MAAM,qBAAqB,KAAK,SAAS,MAAM,oBAC/C,MAAM,qBAAqB,KAAK,SAAS,MAAM,oBAC/C,MAAM,qBAAqB,KAAK,SAAS,MAAM,oBAC/C,MAAM,qBAAqB,KAAK,SAAS,MAAM,oBAC/C,MAAM,eAAe,KAAK,SAAS,MAAM,cACzC,MAAM,eAAe,KAAK,SAAS,MAAM,YAC3C;AACE,WAAG,kBAAkB,MAAM,kBAAkB,MAAM,kBAAkB,MAAM,kBAAkB,MAAM,gBAAgB;AACnH,WAAG,sBAAsB,MAAM,YAAY,MAAM,UAAU;;AAG/D,WAAK,WAAWA;AAChB,WAAK,cAAc,MAAK;AAExB,YAAM,cAAcA,UAAS,cAAc,gBAAgB,KAAK;AAChE,UAAI,eAAeA,UAAS,aAAa;AACrC,mBAAWA,WAAUA,UAAS,WAAW;;AAG7C,iBAAW,WAAWA,UAAS,UAAU;AACrC,cAAM,OAAO,QAAQ;AACrB,cAAM,gBAAgB,QAAQ;AAC9B,YAAI,kBAAkB;AAAW,kBAAQ,OAAO,aAAa;AAC7D,aAAK,cAAc,IAAI,MAAM,aAAa;;AAG9C,UAAI,KAAK;AAAW,aAAK,SAAS,UAAU,cAAc;IAC9D;IAEQ,uBAAoB;AACxB,UAAI,CAAC,KAAK,UAAU,CAAC,KAAK;AAAU;AACpC,YAAM,cAAc,KAAK,SAAS;AAClC,YAAM,eAAe,KAAK,SAAS,cAAc,gBAAgB,KAAK;AACtE,UAAI,CAAC,eAAe,CAAC;AAAc;AACnC,WAAK,OAAO,YAAY,MAAM,aAAa,KAAK,UAAU,aAAa,MAAM,aAAa,EAAE,cAAc,CAAC;AAC3G,WAAK,OAAO,kBAAkB,MAAM,aAAa,KAAK,UAAU,aAAa,MAAM,mBAAmB,EAAE,cAAc,CAAC;AACvH,UAAI,KAAK,SAAS,aAClB;AACI,qBAAa,WAAW;AACxB,mBAAW,KAAK,UAAU,KAAK,SAAS,WAAW;;IAE3D;IAEA,YAAYE,IAAYC,IAAY,OAAgB,QAAiB,aAAoB;AACrF,YAAM,KAAK,KAAK;AAChB,UAAID,OAAM,QAAW;AACjB,WAAG,QAAQ,GAAG,YAAY;aACvB;AACH,WAAG,OAAO,GAAG,YAAY;AACzB,WAAG,QAAQA,IAAGC,IAAI,OAAQ,MAAO;;IAEzC;IAEA,aAAa,UAAoB,aAAoB;IAErD;IAyDA,mBAAmB,UAAyB,aAAoB;AAC5D,UAAI,KAAK,aAAa;AAAW;AACjC,UAAI,KAAK;AAAW,aAAK,SAAS,YAAY,sBAAsB,WAAW;AAE/E,YAAMH,YAAW,KAAK;AACtB,YAAM,eAAeA,UAAS;AAC9B,eAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,EAAE,GAAG;AAC1C,cAAM,cAAc,aAAa,CAAC;AAClC,cAAM,OAAO,YAAY;AACzB,YAAI,CAAC,SAAS,aAAa,IAAI;AAAG;AAClC,cAAM,UAAU,SAAS,aAAa,IAAI;AAG1C,YAAI,KAAK;AAAW,eAAK,SAAS,YAAY,kBAAkB,GAAG,IAAI,IAAI,OAAO,IAAI,SAAS,qBAAqB,cAAc;AAClI,YAAI,YAAY;AAAW,sBAAY,OAAO,OAAO;AACrD,YAAI,KAAK;AAAW,eAAK,SAAS,UAAU,gBAAgB;AAC5D,aAAK,cAAc,IAAI,MAAM,OAAO;;AAGxC,UAAI,MAAK,KAAK;AAAW,aAAK,SAAS,UAAU,oBAAoB;IACzE;IAEA,SAAS,MAAe,aAAoB;AACxC,YAAM,KAAK,KAAK;AAChB,UAAI,KAAK;AAAW,aAAK,SAAS,YAAY,YAAY,WAAW;AACrE,SAAG,gBAAgB,KAAK,GAAG;AAC3B,UAAI,KAAK;AAAW,aAAK,SAAS,UAAU,UAAU;IAC1D;IAEA,UAAU,MAAe,aAAoB;AACzC,YAAM,KAAK,KAAK;AAChB,UAAI,KAAK;AAAW,aAAK,SAAS,YAAY,aAAa,aAAa,MAAM,qBAAqB,IAAI;AACvG,SAAG,gBAAgB,KAAK,GAAG;AAC3B,eAAS,IAAI,GAAG,IAAI,KAAK,WAAW,QAAQ,EAAE,GAAG;AAC7C,YAAI,KAAK,SAAS;AACd,aAAG,aAAa,cAAc,WAAW,KAAK,aAAa,GAAG,cAAc,CAAC;eAC1E;AACH,aAAG,WAAW,cAAc,WAAW,GAAG,KAAK,YAAY;;;AAGnE,UAAI,KAAK;AAAW,aAAK,SAAS,UAAU,WAAW;IAC3D;IAEA,aAAa,MAAa;AACtB,YAAM,KAAK,KAAK;AAChB,UAAI,KAAK;AAAW,aAAK,SAAS,YAAY,eAAe;AAC7D,UAAI,KAAK,SAAS;AACd,WAAG,aAAa,cAAc,WAAW,KAAK,aAAa,GAAG,cAAc,KAAK,WAAW;aACzF;AACH,WAAG,WAAW,cAAc,WAAW,KAAK,aAAa,KAAK,WAAW;;IAEjF;IAEA,SAAM;AACF,WAAK,WAAW;AAChB,+BAAwB;AACxB,WAAK,cAAc,MAAK;IAC5B;;;;AC9YE,MAAO,mBAAP,MAAuB;IAwBzB,YAAmBI,SAAc;AAAd,WAAA,SAAAA;AAvBnB,WAAA,UAAmB;AACnB,WAAA,UAAmB;AAEnB,WAAA,yBAAoC,IAAI,UAAS;AACjD,WAAA,oBAA+B,IAAI,UAAS;AAE5C,WAAA,SAAiB,IAAI,OAAM;AAC3B,WAAA,sBAA8B,IAAI,OAAM;AAExC,WAAA,UAAkB;AAElB,WAAA,WAAmB,IAAI,OAAM;AAC7B,WAAA,wBAAgC,IAAI,OAAM;AAE1C,WAAA,eAAuB,KAAK,KAAK;AACjC,WAAA,aAAqB;AACrB,WAAA,aAAqB;AAErB,WAAA,kBAA0B;AAC1B,WAAA,kBAA0B,KAAK;AAE/B,WAAA,UAAU;AAGN,WAAK,WAAWA,QAAO,QAAQ;AAC/B,MAAAA,QAAO,QAAQ,KAAK,MAAM;IAC9B;IAEA,WAAW,UAAgB;AACvB,WAAK,SAAS,KAAK,QAAQ;AAC3B,WAAK,kBAAkB,YAAY,KAAK,QAAQ;AAChD,WAAK,uBAAuB,KAAK,KAAK,iBAAiB;AACvD,WAAK,oBAAoB,KAAK,KAAK,MAAM;AACzC,WAAK,UAAU;IACnB;IAEA,WAAW,UAAgB;AACvB,WAAK,OAAO,KAAK,QAAQ;IAC7B;IAEA,kBAAkB,OAAa;AAC3B,WAAK,kBAAkB,OAAO,QAAQ,KAAK;AAC3C,UAAI,UAAU;AAAG,aAAK,UAAU;IACpC;IAEA,gBAAgB,OAAa;AACzB,WAAK,kBAAkB,QAAQ,MAAM,KAAK,kBAAkB,QAAQ,QAAQ,KAAK,cAAc,KAAK,iBAAiB,KAAK,eAAe;AACzI,UAAI,UAAU;AAAG,aAAK,UAAU;IACpC;IAEA,KAAK,OAAa;AACd,UAAI,CAAC,KAAK;AAAS;AACnB,YAAM,SAAS,SAAS,MAAM;AAC9B,aAAO,IAAI,MAAM,GAAG,MAAM,GAAG,CAAC,EAAE,IAAI,KAAK,kBAAkB,SAAS,KAAK,UAAU;AACnF,WAAK,OAAO,IAAI,OAAO,iBAAiB,KAAK,OAAO,QAAQ,CAAC;AAC7D,UAAI,MAAM,MAAM,KAAK,MAAM,MAAM;AAAG,aAAK,UAAU;AACnD,kBAAY,MAAM;IACtB;IAEA,KAAK,OAAa;AACd,WAAK,kBAAkB,UAAU,QAAQ,KAAK;AAC9C,UAAI,UAAU;AAAG,aAAK,UAAU;IACpC;IAEA,SAAM;AACF,UAAI,CAAC,KAAK;AAAS,eAAO;AAE1B,WAAK,uBAAuB,KAAK,KAAK,mBAAmB,KAAK,OAAO;AACrE,WAAK,sBAAsB,eAAe,KAAK,sBAAsB;AAErE,WAAK,oBAAoB,KAAK,KAAK,QAAQ,KAAK,OAAO;AAEvD,WAAK,sBAAsB,IAAI,KAAK,mBAAmB;AACvD,WAAK,SAAS,KAAK,KAAK,qBAAqB;AAE7C,WAAK,OAAO,SAAS,KAAK,KAAK,QAAQ;AACvC,WAAK,OAAO,QAAQ,KAAK,mBAAmB;AAE5C,UAAI,UAAU,KAAK;AACnB,WAAK,UAAU;AACf,aAAO;IACX;;;;AC3DE,WAAU,wBAAwB,MAAkB,KAAU;AAChE,UAAM,OAAO,IAAI,KAAI;AACrB,UAAMC,KAAI,SAAS,MAAM;AACzB,QAAI,KAAK,UAAU;AACf,YAAM,SAAS,KAAK;AACpB,YAAM,MAAM,OAAO;AACnB,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC7B,QAAAA,GAAE,IAAI,OAAO,CAAC,GAAG,OAAO,IAAI,CAAC,GAAG,OAAO,IAAI,CAAC,CAAC;AAC7C,YAAI,aAAaA,EAAC;;;AAG1B,WAAO;EACX;AAEA,MAAM,YAAY,IAAI,OAAM;;;AC1B5B,MAAY;AAAZ,GAAA,SAAYC,uBAAoB;AAC5B,IAAAA,sBAAA,UAAA,IAAA;AACA,IAAAA,sBAAA,IAAA,IAAA;AACA,IAAAA,sBAAA,QAAA,IAAA;AACA,IAAAA,sBAAA,SAAA,IAAA;AACA,IAAAA,sBAAA,OAAA,IAAA;AACA,IAAAA,sBAAA,QAAA,IAAA;AACA,IAAAA,sBAAA,OAAA,IAAA;AACA,IAAAA,sBAAA,KAAA,IAAA;AACA,IAAAA,sBAAA,KAAA,IAAA;AACA,IAAAA,sBAAA,KAAA,IAAA;AACA,IAAAA,sBAAA,KAAA,IAAA;AACA,IAAAA,sBAAA,KAAA,IAAA;EACJ,GAbY,yBAAA,uBAAoB,CAAA,EAAA;AAe1B,WAAU,2BAA2B,MAA0B;AACjE,YAAQ,MAAM;MACV,KAAK,qBAAqB;AAAU,eAAO;MAC3C,KAAK,qBAAqB;AAAI,eAAO;MACrC,KAAK,qBAAqB;AAAQ,eAAO;MACzC,KAAK,qBAAqB;AAAS,eAAO;MAC1C,KAAK,qBAAqB;AAAO,eAAO;MACxC,KAAK,qBAAqB;AAAQ,eAAO;MACzC,KAAK,qBAAqB;AAAO,eAAO;MACxC,KAAK,qBAAqB;AAAK,eAAO;MACtC,KAAK,qBAAqB;AAAK,eAAO;MACtC,KAAK,qBAAqB;AAAK,eAAO;MACtC,KAAK,qBAAqB;AAAK,eAAO;MACtC,KAAK,qBAAqB;AAAK,eAAO;;EAE9C;AAEA,MAAM,aAAa,oBAAI,QAAO;AAExB,WAAU,gBAAgB,MAAU;AACtC,UAAM,SAAS,WAAW,IAAI,IAAI;AAClC,QAAI;AAAQ,aAAO;AAEnB,UAAMC,WAAU,eAAc,EAAG;AACjC,UAAM,KAAKA,SAAQ;AAEnB,UAAM,MAAM,GAAG,kBAAiB;AAChC,OAAG,gBAAgB,GAAG;AACtB,UAAM,EAAE,aAAa,WAAU,IAAK;AAEpC,aAAS,cAAc,MAAkB,MAAc,MAAY;AAC/D,YAAM,OAAO,mBAAmB,IAAI;AACpC,YAAM,SAAS,GAAG,aAAY;AAC9B,SAAG,WAAW,GAAG,cAAc,MAAM;AACrC,SAAG,WAAW,GAAG,cAAc,MAAM,GAAG,WAAW;AACnD,UAAI,SAAS,aAAa,SAAS,eAAe;AAC9C,WAAG,oBAAoB,MAAM,MAAM,MAAM,OAAO,GAAG,CAAC;aACjD;AACH,WAAG,qBAAqB,MAAM,MAAM,MAAM,GAAG,CAAC;;AAElD,SAAG,wBAAwB,IAAI;IACnC;AAEA,UAAM,MAAM,wBAAwB,WAAW;AAE/C,QAAI,YAAY;AAAU,oBAAc,YAAY,UAAU,2BAA2B,qBAAqB,QAAQ,GAAG,CAAC;AAC1H,QAAI,YAAY;AAAI,oBAAc,YAAY,IAAI,2BAA2B,qBAAqB,EAAE,GAAG,CAAC;AACxG,QAAI,YAAY;AAAQ,oBAAc,YAAY,QAAQ,2BAA2B,qBAAqB,MAAM,GAAG,CAAC;AACpH,QAAI,YAAY;AAAS,oBAAc,YAAY,SAAS,2BAA2B,qBAAqB,OAAO,GAAG,CAAC;AACvH,QAAI,YAAY;AAAO,oBAAc,YAAY,OAAO,2BAA2B,qBAAqB,KAAK,GAAG,CAAC;AACjH,QAAI,YAAY;AAAQ,oBAAc,YAAY,QAAQ,2BAA2B,qBAAqB,MAAM,GAAG,CAAC;AACpH,QAAI,YAAY;AAAO,oBAAc,YAAY,OAAO,2BAA2B,qBAAqB,KAAK,GAAG,CAAC;AACjH,QAAI,YAAY;AAAK,oBAAc,YAAY,KAAK,2BAA2B,qBAAqB,GAAG,GAAG,CAAC;AAC3G,QAAI,YAAY;AAAK,oBAAc,YAAY,KAAK,2BAA2B,qBAAqB,GAAG,GAAG,CAAC;AAC3G,QAAI,YAAY;AAAK,oBAAc,YAAY,KAAK,2BAA2B,qBAAqB,GAAG,GAAG,CAAC;AAC3G,QAAI,YAAY;AAAK,oBAAc,YAAY,KAAK,2BAA2B,qBAAqB,GAAG,GAAG,CAAC;AAC3G,QAAI,YAAY;AAAK,oBAAc,YAAY,KAAK,2BAA2B,qBAAqB,GAAG,GAAG,CAAC;AAE3G,QAAI,UAAU;AACd,QAAI,YAAY,OAAO;AACnB,YAAM,SAAS,GAAG,aAAY;AAC9B,SAAG,WAAW,GAAG,sBAAsB,MAAM;AAC7C,SAAG,WAAW,GAAG,sBAAsB,YAAY,OAAO,GAAG,WAAW;AACxE,gBAAU;;AAGd,UAAM,eAAe,YAAY,WAAW,YAAY,SAAS,SAAS,IAAI;AAC9E,UAAM,cAAc,YAAY,QAAQ,YAAY,MAAM,SAAS;AAEnE,OAAG,gBAAgB,IAAI;AACvB,UAAM,WAAW,EAAE,KAAK,YAAY,SAAS,KAAK,cAAc,YAAW;AAC3E,eAAW,IAAI,MAAM,QAAQ;AAC7B,WAAO;EACX;;;AClEM,WAAU,wBAA8C,WAAsB,OAAe,qBAAqB,UAAQ;AAC5H,QAAI,UAAU,eAAe,UAAa,UAAU,WAAW,SAAS,GAAG;AACvE,aAAO;;AAGX,aAAS,IAAI,GAAG,IAAI,UAAU,WAAW,QAAQ,EAAE,GAAG;AAClD,YAAM,OAAO,UAAU,WAAW,CAAC;AACnC,UAAI,KAAK,SAAS,MAAM;AACpB,eAAO;;;AAIf,WAAO;EACX;AAEM,WAAU,cAAoC,WAAsB,WAAuB;AAC7F,QAAI,cAAc,QAAW;AACzB;;AAEJ,UAAM,MAAM,wBAAwB,WAAW,UAAU,IAAI;AAC7D,QAAI,QAAQ,MAAM;AACd,gBAAU,WAAW,KAAK,SAAS;WAChC;AACH,UAAK,OAAO,UAAU;AACtB,UAAK,SAAS,UAAU;AACxB,UAAK,SAAS,UAAU;;EAEhC;AAEA,MAAM,cAAc,IAAI,OAAM;AAC9B,MAAM,cAAc,IAAI,KAAI;;;ACjE5B,MAAI,KAAa,IAAI,OAAM;AAC3B,MAAIC,MAAa,IAAI,OAAM;AAE3B,MAAI,IAAY,IAAI,OAAM;AAE1B,MAAI,KAAa,IAAI,OAAM;AAC3B,MAAI,KAAa,IAAI,OAAM;AAC3B,MAAI,KAAa,IAAI,OAAM;AAE3B,MAAI,KAAa,IAAI,OAAM;AAC3B,MAAI,KAAa,IAAI,OAAM;AAC3B,MAAI,KAAa,IAAI,OAAM;AAE3B,MAAI,KAAa,IAAI,OAAM;AAC3B,MAAI,KAAa,IAAI,OAAM;AAC3B,MAAI,KAAa,IAAI,OAAM;AAE3B,MAAI,KAAa,IAAI,OAAM;AAC3B,MAAI,KAAa,IAAI,OAAM;AAC3B,MAAI,KAAa,IAAI,OAAM;AAE3B,MAAI,MAAc,IAAI,OAAM;AAC5B,MAAI,MAAc,IAAI,OAAM;AAC5B,MAAI,MAAc,IAAI,OAAM;AAE5B,MAAI,SAAiB,IAAI,OAAM;AAC/B,MAAI,YAAoB,IAAI,OAAM;AAElC,MAAI,MAAc,IAAI,OAAM;AAG5B,MAAI,IAAY,IAAI,OAAM;AAC1B,MAAI,IAAY,IAAI,OAAM;AAC1B,MAAI,IAAY,IAAI,OAAM;AAC1B,MAAI,OAAe,IAAI,OAAM;AAC7B,MAAI,OAAe,IAAI,OAAM;AAC7B,MAAI,OAAe,IAAI,OAAM;AAKvB,MAAO,mBAAP,MAAuB;IAKjB,OAAO,QAAQ,WAAoB;AACvC,YAAM,KAAK,wBAAwB,WAAW,UAAU,EAAG;AAC3D,YAAM,KAAK,wBAAwB,WAAW,QAAQ,EAAG;AACzD,YAAM,KAAK,wBAAwB,WAAW,IAAI,EAAG;AACrD,YAAM,QAAQ,UAAU;AAExB,UAAI;AACJ,UAAI,OAAO;AACP,cAAM,MAAM;AACZ,cAAM,QAAQ;AACd,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC7B,gBAAM,KAAK,MAAM,CAAC;AAClB,gBAAM,KAAK,MAAM,IAAI,CAAC;AACtB,gBAAM,KAAK,MAAM,IAAI,CAAC;AACtB,eAAK,QAAQ,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;;aAEpC;AACH,cAAM,GAAG,SAAS;AAClB,iBAAS,IAAI,GAAG,IAAI,KAAK,KAAK,GAAG;AAC7B,eAAK,QAAQ,IAAI,IAAI,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC;;;IAGpD;IAEQ,OAAO,QAAQ,IAAkB,IAAkB,IAAkB,IAAY,IAAY,IAAU;AAC3G,UAAI,OAAO,QAAW;AAClB,aAAK,IAAI,OAAM;AACf,QAAAA,MAAK,IAAI,OAAM;AAEf,YAAI,IAAI,OAAM;AAEd,aAAK,IAAI,OAAM;AACf,aAAK,IAAI,OAAM;AACf,aAAK,IAAI,OAAM;AAEf,aAAK,IAAI,OAAM;AACf,aAAK,IAAI,OAAM;AACf,aAAK,IAAI,OAAM;AAEf,aAAK,IAAI,OAAM;AACf,aAAK,IAAI,OAAM;AACf,aAAK,IAAI,OAAM;AACf,aAAK,IAAI,OAAM;AACf,aAAK,IAAI,OAAM;AACf,aAAK,IAAI,OAAM;AAEf,cAAM,IAAI,OAAM;AAChB,cAAM,IAAI,OAAM;AAChB,cAAM,IAAI,OAAM;AAEhB,iBAAS,IAAI,OAAM;AACnB,oBAAY,IAAI,OAAM;AAEtB,cAAM,IAAI,OAAM;;AAGpB,SAAG,KAAK,IAAI,KAAK,CAAC;AAClB,SAAG,KAAK,IAAI,KAAK,CAAC;AAClB,SAAG,KAAK,IAAI,KAAK,CAAC;AAElB,SAAG,KAAK,IAAI,KAAK,CAAC;AAClB,SAAG,KAAK,IAAI,KAAK,CAAC;AAClB,SAAG,KAAK,IAAI,KAAK,CAAC;AAElB,UAAI,KAAK,IAAI,KAAK,CAAC;AACnB,UAAI,KAAK,IAAI,KAAK,CAAC;AACnB,UAAI,KAAK,IAAI,KAAK,CAAC;AAEnB,UAAI;AACJ,UAAI;AAEJ,SAAG,IAAI,GAAG,GAAG,CAAC;AACd,SAAG,IAAI,GAAG,GAAG,CAAC;AACd,SAAG,IAAI,GAAG,GAAG,CAAC;AACd,SAAG,IAAI,GAAG,GAAG,CAAC;AACd,SAAG,IAAI,GAAG,GAAG,CAAC;AACd,SAAG,IAAI,GAAG,GAAG,CAAC;AAEd,YAAM,KAAK,IAAI,IAAI,IAAI;AACvB,YAAM,KAAK,IAAI,IAAI,IAAI;AACvB,YAAM,KAAK,IAAI,IAAI,IAAI;AACvB,YAAM,KAAK,IAAI,IAAI,IAAI;AAEvB,SAAG,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,EAAE;AAC1B,MAAAA,IAAG,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,EAAE;AAC1B,aAAO,MAAM,IAAIA,KAAI,CAAC;AACtB,UAAI,EAAE,MAAM,GAAK;AACb,UAAE,UAAS;AACX,aAAK,CAAC,EAAE,IAAI,EAAE;AACd,aAAK,CAAC,EAAE,IAAI,EAAE;AACd,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;;AAGZ,SAAG,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,EAAE;AAC1B,MAAAA,IAAG,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,EAAE;AAC1B,aAAO,MAAM,IAAIA,KAAI,CAAC;AACtB,UAAI,EAAE,MAAM,GAAK;AACb,UAAE,UAAS;AACX,aAAK,CAAC,EAAE,IAAI,EAAE;AACd,aAAK,CAAC,EAAE,IAAI,EAAE;AACd,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;;AAGZ,SAAG,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,EAAE;AAC1B,MAAAA,IAAG,IAAI,GAAG,IAAI,GAAG,GAAG,IAAI,EAAE;AAC1B,aAAO,MAAM,IAAIA,KAAI,CAAC;AACtB,UAAI,EAAE,MAAM,GAAK;AACb,UAAE,UAAS;AACX,aAAK,CAAC,EAAE,IAAI,EAAE;AACd,aAAK,CAAC,EAAE,IAAI,EAAE;AACd,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;AACR,WAAG,KAAK;;AAGZ,YAAM,IAAI,KAAK;AACf,YAAM,IAAI,KAAK;AACf,YAAM,IAAI,KAAK;AAEf,aAAO,MAAM,IAAI,IAAI,MAAM;AAC3B,aAAO,MAAM,QAAQ,IAAI,SAAS;AAClC,UAAI,KAAK,GAAG,KAAK,CAAC,EACb,IAAI,SAAS,EACb,MAAM,GAAG,KAAK,CAAC;AAEpB,aAAO,MAAM,IAAI,IAAI,MAAM;AAC3B,aAAO,MAAM,IAAI,QAAQ,SAAS;AAClC,UAAI,KAAK,GAAG,KAAK,CAAC,EACb,IAAI,SAAS,EACb,MAAM,GAAG,KAAK,CAAC;AAEpB,aAAO,MAAM,IAAI,IAAI,MAAM;AAC3B,aAAO,MAAM,QAAQ,IAAI,SAAS;AAClC,UAAI,KAAK,GAAG,KAAK,CAAC,EACb,IAAI,SAAS,EACb,MAAM,GAAG,KAAK,CAAC;AAEpB,aAAO,MAAM,IAAI,IAAI,MAAM;AAC3B,aAAO,MAAM,IAAI,QAAQ,SAAS;AAClC,UAAI,KAAK,GAAG,KAAK,CAAC,EACb,IAAI,SAAS,EACb,MAAM,GAAG,KAAK,CAAC;AAEpB,aAAO,MAAM,IAAI,IAAI,MAAM;AAC3B,aAAO,MAAM,QAAQ,IAAI,SAAS;AAClC,UAAI,KAAK,GAAG,KAAK,CAAC,EACb,IAAI,SAAS,EACb,MAAM,GAAG,KAAK,CAAC;AAEpB,aAAO,MAAM,IAAI,IAAI,MAAM;AAC3B,aAAO,MAAM,IAAI,QAAQ,SAAS;AAClC,UAAI,KAAK,GAAG,KAAK,CAAC,EACb,IAAI,SAAS,EACb,MAAM,GAAG,KAAK,CAAC;AAEpB,UAAI,KAAK,GAAG,KAAK,CAAC,EACb,IAAI,EAAE,EACN,MAAM,GAAG,KAAK,CAAC;AACpB,UAAI,KAAK,GAAG,KAAK,CAAC,EACb,IAAI,EAAE,EACN,MAAM,GAAG,KAAK,CAAC;AACpB,UAAI,KAAK,GAAG,KAAK,CAAC,EACb,IAAI,EAAE,EACN,MAAM,GAAG,KAAK,CAAC;IACxB;IAEA,OAAO,SAAS,WAAoB;AAChC,UAAI,MAAM,QAAW;AACjB,YAAI,IAAI,OAAM;AACd,YAAI,IAAI,OAAM;AACd,YAAI,IAAI,OAAM;AACd,eAAO,IAAI,OAAM;AACjB,eAAO,IAAI,OAAM;AACjB,eAAO,IAAI,OAAM;;AAErB,YAAM,WAAW,wBAAwB,WAAW,UAAU,EAAG;AACjE,YAAM,OAAO,SAAS;AAEtB,WAAK,IAAI,IAAI,aAAa,IAAI;AAC9B,WAAK,IAAI,IAAI,aAAa,IAAI;AAC9B,WAAK,IAAI,IAAI,aAAa,IAAI;AAE9B,WAAK,QAAQ,SAAS;AAEtB,YAAM,YAAY,OAAO;AACzB,YAAM,WAAW,IAAI,aAAa,YAAY,CAAC;AAC/C,eAAS,IAAI,GAAG,IAAI,WAAW,EAAE,GAAG;AAChC,UAAE,KAAK,KAAK,GAAG,IAAI,CAAC;AACpB,UAAE,KAAK,KAAK,GAAG,IAAI,CAAC;AACpB,UAAE,KAAK,KAAK,GAAG,IAAI,CAAC;AAEpB,UAAE,UAAS,EAAG,MAAM,KAAK,GAAG,IAAI,CAAC;AAEjC,cAAM,KAAK,OAAO,IAAI,GAAG,CAAC;AAC1B,aAAK,KAAK,CAAC,EAAE,IAAI,EAAE;AACnB,aAAK,KAAK,CAAC,EAAE,IAAI,IAAI;AACrB,aAAK,KAAK,IAAI,EAAE,UAAS;AAEzB,eAAO,MAAM,GAAG,GAAG,IAAI;AACvB,YAAI,OAAO,OAAO,IAAI,MAAM,CAAC;AAC7B,eAAO,OAAO,IAAI,KAAK;AAEvB,cAAM,KAAK,IAAI;AACf,iBAAS,EAAE,IAAI,KAAK;AACpB,iBAAS,KAAK,CAAC,IAAI,KAAK;AACxB,iBAAS,KAAK,CAAC,IAAI,KAAK;AACxB,iBAAS,KAAK,CAAC,IAAI;;AAGvB,oBAAc,WAAW;QACrB,QAAQ;QACR,QAAQ;QACR,MAAM;OACT;AACD,oBAAc,WAAW,EAAE,QAAQ,KAAK,GAAG,QAAQ,GAAG,MAAM,SAAQ,CAAE;AAEtE,WAAK,IAAI;AACT,WAAK,IAAI;AACT,WAAK,IAAI;IACb;;AAGJ,MAAM,mBAAmB,IAAI,iBAAgB;;;AC3RtC,MAAM,gBAAmC,oBAAI,IAAG;;;ACEjD,WAAU,kBAAe;AAC3B,QAAI,cAAc,cAAc,IAAI,KAAK;AACzC,QAAI;AAAa,aAAO;AACxB,UAAM,WAAW,IAAI,aAAa;MAC9B;MAAI;MAAG;MAAI;MAAG;MAAG;MAAG;MAAG;MAAG;MAAI;MAAG;MAAG;MAAG;MAAI;MAAI;MAAG;MAAG;MAAI;MAAG;MAAI;MAAG;MAAG;MAAI;MAAI;MAAI;MAAI;MAAI;MAAG;MAAG;MAAI;MAAI;MAAI;MAAI;MAAG;MAAI;MAAI;MAAI;MAAG;MAAG;MAAI;MAAG;MAAI;MAAG;MAAG;MAAI;MAAI;MAAI;MAAG;MAAI;MAAG;MAAI;MAAI;MAAI;MAAI;MAAI;MAChM;MAAG;MAAG;MAAI;MAAG;MAAG;MAAI;MAAG;MAAI;MAAG;MAAI;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;KACvD;AACD,UAAMC,UAAS,IAAI,aAAa;MAC5B;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAI;MAAG;MAAG;MAAI;MAAG;MAAG;MAAI;MAAG;MAAG;MAAG;MAAI;MAAG;MAAG;MAAI;MAAG;MAAG;MAAI;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAI;MAAG;MAAG;MAAI;MAAG;MAAG;MAAI;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;MAAI;MACjM;MAAG;MAAG;MAAI;MAAG;MAAG;MAAG;MAAG;MAAG;MAAG;KAC/B;AACD,UAAM,KAAK,IAAI,aAAa;MACxB;MAAO;MAAK;MAAO;MAAM;MAAO;MAAK;MAAO;MAAM;MAAO;MAAG;MAAO;MAAM;MAAO;MAAG;MAAO;MAAM;MAAO;MAAG;MAAO;MAAK;MAAO;MAAM;MAAO;MAAK;MAAO;MAAK;MAAO;MAAM;MAAO;MAAK;MAAO;MAC3L;MAAO;MAAK;MAAO;MAAM;MAAO;MAAM;MAAO;MAAG;MAAO;MAAM;MAAO;MAAM;MAAO;MAAM;MAAO;KACjG;AACD,UAAM,QAAQ,IAAI,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,CAAC;AAC7J,UAAM,cAAc,EAAE,UAAU,QAAAA,SAAQ,IAAI,MAAK;AACjD,UAAM,aAAa,CAAC,EAAE,gBAAgB,IAAI,cAAc,GAAG,cAAc,IAAI,aAAa,GAAG,aAAa,IAAI,SAAS,KAAI,CAAE;AAC7H,UAAM,MAAM,IAAI,KAAI;AACpB,QAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AACtB,QAAI,IAAI,IAAI,GAAG,GAAG,CAAC;AACnB,kBAAc,EAAE,aAAa,YAAY,MAAM,eAAe,WAAW,CAAA,GAAI,IAAG;AAChF,kBAAc,IAAI,OAAO,WAAW;AACpC,WAAO;EACX;;;AC5BA,MAAY;AAAZ,GAAA,SAAYC,WAAQ;AAChB,IAAAA,UAAAA,UAAA,QAAA,IAAA,CAAA,IAAA;AACA,IAAAA,UAAAA,UAAA,KAAA,IAAA,CAAA,IAAA;AACA,IAAAA,UAAAA,UAAA,SAAA,IAAA,CAAA,IAAA;AACA,IAAAA,UAAAA,UAAA,IAAA,IAAA,CAAA,IAAA;AACA,IAAAA,UAAAA,UAAA,IAAA,IAAA,CAAA,IAAA;EACJ,GANY,aAAA,WAAQ,CAAA,EAAA;;;ACEb,WAAS,0BAAoC;AAChD,UAAM,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AActB,UAAM,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWxB,WAAO,gBAAgB;AAAA,MACnB,MAAM;AAAA,MACN;AAAA,MACA;AAAA,MACA,aAAa;AAAA,MACb,oBAAoB,iBAAiB;AAAA,IACzC,CAAC;AAAA,EACL;;;AChCA,MAAM,SAAS,IAAI,UAAU;AAC7B,MAAM,UAAU,OAAO;AACvB,MAAM,SAAS,IAAI,OAAO;AAC1B,MAAM,SAAS,IAAI,OAAO;AAC1B,SAAO,SAAS,IAAI,GAAG,GAAG,CAAC;AAC3B,SAAO,QAAQ,OAAO,IAAI;AAC1B,SAAO,YAAY,IAAI,GAAG,GAAG,GAAI;AACjC,MAAM,UAAU,IAAI,iBAAiB,MAAM;AAC3C,MAAM,WAAW,wBAAwB;AAEzC,MAAM,OAAO,gBAAgB;AAC7B,WAAS,QAAQ;AACb,YAAQ,OAAO;AACf,YAAQ,WAAW,MAAM;AACzB,YAAQ,aAAa,QAAQ;AAC7B,YAAQ,UAAU,gBAAgB,IAAI,CAAC;AAAA,EAC3C;AAEA,WAAS,GAAG,YAAY,OAAO,KAAK;AAEpC,SAAO,MAAM;",
  "names": ["AnimationDataType", "Axis", "b", "t", "x", "y", "n", "b", "dst", "z", "b", "ColorMode", "b", "dst", "dst", "x", "y", "z", "x2", "y2", "z2", "b", "EulerOrder", "InterpolationMethod", "v", "n", "x", "y", "t", "b", "x", "y", "z", "dst", "t", "b", "v", "dst", "CameraMode", "camera", "v", "Keycode", "MouseButton", "InputAxis", "InputButton", "FrameCaptureNodeType", "GFXRenderGroup", "x", "y", "camera", "t", "pipeline", "RenderCommandType", "x", "y", "camera", "pipeline", "GFXBackend", "GPUActionType", "GPUStorageMode", "default_value", "WorkerState", "RenderResourceType", "RenderBlockType", "RenderBlockName", "device", "encoder", "pipeline", "WebGLTextureFilter", "WebGLTextureWrapping", "WebGLDataType", "WebGLPixelFormat", "WebGLCompressedWebGLPixelFormat", "TextureStoreFormat", "WebGLTextureType", "WebGLBufferType", "WebGLBufferUsage", "PassLoadAction", "n", "PrimitiveType", "UniformType", "CullMode", "DepthCompareFunc", "BlendFactor", "BlendFunc", "VertexOrder", "pipeline", "encoder", "default_value", "gl", "pipeline", "camera", "x", "y", "camera", "v", "GenericAttributeName", "encoder", "v2", "normal", "Platform"]
}
